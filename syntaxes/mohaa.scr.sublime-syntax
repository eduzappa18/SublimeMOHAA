%YAML 1.2
---
name: Morpheus Script [.scr]
file_extensions:
  - scr
scope: source.scr

variables:
  identifier: '(?:[\w@#'']+\b)'
  identifier_label: '(?!{{reserved_keywords}})[\w@#''-]+\b(?!\.)'
  numbers: (?:\b\d*\.?\d+|\B\.\d+)\b
  reserved_keywords: |-
    \b(?x:
      game|level|local|group|parm|
      if|else|for|while|
      switch|case|default|
      try|catch|throw|
      continue|break|goto|end
    )\b
  storage: '(?:bool|entity|float|int|string)'
  level_props: |-
    (?xi:
      alarm|badplace|bombs_planted|clockside|dmrespawning|dmroundlimit|found_secrets|ignoreclock|
      loop_protection|nodrophealth|objectivebased|papers|planting_team|rain_density|rain_length|
      rain_min_dist|rain_numshaders|rain_shader|rain_slant|rain_speed|rain_speed_vary|rain_width|
      removebadplace|roundbased|targets_destroyed|targets_to_destroy|time|total_secrets
    )\b
  builtin_props: |-
    (?xi:
      useheld|fireheld|secfireheld|leanleftheld|leanrightheld|runheld|inventory|adminrights|userinfo|dmteam|
      size|entnum|classname|origin|angle|angles|viewangles|forwardvector|leftvector|rightvector|upvector|
      target|targetname|health|velocity|scale
    )\b
  level_phases: (?i:prespawn|spawn|postthink|playerspawn|roundstart|allieswin|axiswin|draw)
  thread_lookahead: |-
    (?x:
      {{identifier_label}}
      (?:
        \s+
        (?:local|group)\.{{identifier}}
      )*
      \s*
      (?:\\$|:(?!:))
    )
  builtin_funcs: (?:{{reborn_funcs}}|{{moh_funcs}})
  reborn_funcs: |-
    (?xi:
      adddeaths|addkills|bindweap|charToInt|conprintf|getactiveweap|getclientnum |
      getconnstate|getdate|getdeaths|getentity|getip|getkills|getping|gettime |
      gettimezone|inventory|isadmin|md5file|md5string|netname|registerev|stuffsrv |
      teamswitchdelay|traced|typeof|unregisterev|userinfo|
      # file
      fopen|fclose|feof|fseek|ftell|frewind|fputc|fputs|fgetc|fgets|ferror|
      fflush|fexists|freadall|fsaveall|fremove|frename|fcopy|freadpak|flist|
      # math
      cos|sin|tan|acos|asin|atan|atan2|cosh|sinh|tanh|exp|
      frexp|ldexp|log|log10|modf|pow|sqrt|ceil|floor|fmod|
      # ihuddraw_
      ihuddraw_align|ihuddraw_alpha|ihuddraw_color|ihuddraw_font|
      ihuddraw_rect|ihuddraw_shader|ihuddraw_string|ihuddraw_virtualsize
    )
  moh_funcs: |-
    (?xi:
      #A
      abs|accuracy|actionanimend|activate|activateitem|activatenewweapon|activatepapers|ActivateSound|activatetrigger|
      active|actor|actorinfo|add|additionalstartammo|addkills|addmusictrigger|addobjective|addownervelocity|
      addrandomspeaker|addreverbtrigger|addspeaker|addvelocity|ai_event|ai_off|ai_on|ai_visiondistance|aibulletspread|
      aimat|aimoffset|aimtarget|aimtolerance|airange|alarmnode|alarmthread|alias|aliascache|all_ai_off|all_ai_on|
      AlliesObjNum|alpha|altcurrent|altfallback|altreverblevel|altreverbtype|alwaysaway|alwaysdraw|american|ammo|
      ammo_grenade|ammo_in_clip|ammoentity_postspawn|ammopickupsound|ammorequired|ammotype|amount|angle|angles|
      angles_pointat|angles_toforward|angles_toleft|angles_toup|anglespeed|anim|anim_attached|anim_noclip|anim_scripted|
      animated_farplane|animated_farplane_bias|animated_farplane_color|AnimationSet|animdone|animfinal|animloop|
      animloop_legs|animloop_pain|animloop_torso|animname|animscript|animscript_attached|animscript_noclip|
      animscript_scripted|arc|arctotarget|arena|armor|assert|attach|AttachDriverSlot|attachedmodelanim|attachgrenade|
      attachmodel|AttachPassengerSlot|attachtohand|attachtoladder|AttachTurretSlot|attackhandler|attackmode|
      attackplayer|auto_active|auto_join_team|auto_maxfov|auto_radius|auto_starttime|auto_state|auto_stoptime|autoaim|
      autoputaway|avelocity|avoidplayer|AxisObjNum|
      #B
      back_mass|balconyheight|barreltype|base_velocity|beam|becomebomb|bedead|BeginCycle|bind|blendtime|blockend|
      blockstart|bloodmodel|BlowUp|bool|bouncefactor|bouncesound|bouncesound_hard|bouncesound_metal|bouncesound_water|
      bouncesoundchance|bouncetouch|breakspecial|brushmodel|bsptransition|bulletcount|bulletdamage|bulletknockback|
      bulletlarge|bulletrange|bulletspread|burstFireSettings|
      #C
      cache|calcgrenadetoss|calcgrenadetoss2|callvote|cam|camera|camera_think|cancelFor|canhitowner|canjump|canmoveto|
      cansee|canseenoents|canshoot|canshootenemyfrom|cantpartialreload|censor|centerprint|centroid|chance|channel|
      charge|chargelife|chargespeed|checkanims|checkonground|cinematic|classname|clear_objective_pos|clearAimTarget|
      clearfade|clearletterbox|clearowner|clip_add|clip_empty|clip_fill|clipsize|close|closeportal|cnt|collisionent|
      color|commanddelay|Complete|cone|connect_paths|constantdamage|continue|ControlledBy|convergeTime|cooktime|coord|
      correctweaponattachments|count|crawlto|CreateListener|crosshair|crouchto|cuecamera|cueplayer|current|cut|Cycles|
      #D
      damage|damage_multiplier|damage_type|damageagain|damageeveryframe|damagemult|damagepuff|damagesounds|damagetype|
      dampening|deactivate|deactivateweapon|dead|deadbody|deathembalm|deathhandler|deathsinkeachframe|deathsinkstart|
      debrismodel|debristype|debug_int3|debugline|defaultnonvislevel|delay|delaythrow|delete|DestroyModel|detach|
      detachallchildren|DetachDriverSlot|detachgrenade|DetachPassengerSlot|DetachTurretSlot|detail|dialogneeded|
      disablespawn|disconnect_paths|disguise_accept_thread|disguise_level|disguise_period|disguise_range|
      distancetoenemy|dlight|dm|dmammorequired|dmamount|dmbulletcount|dmbulletdamage|dmbulletrange|dmbulletspread|
      dmcantpartialreload|dmcrosshair|dmdeathdrop|dmfiredelay|dmfirespreadmult|dmg|dmlife|dmmaxamount|dmmessage|
      dmmovementspeed|dmprojectile|dmrealism|dmstartammo|dmteam|dmzoomspreadmult|doActivate|doBlocked|doclose|
      dog|doinit|dojitter|donedeath|donefiring|donereloading|dontdropweapons|doopen|door_triggerfield|doorclosed|
      dooropened|doortype|doroundtransition|doTouch|doUse|dprintln|drawhud|drivable|drive|driveNoWait|dropitems|
      droptofloor|dropturret|drunk|dumb|duration|
      #E
      earthquake|edgeeffect|edgetriggered|effects|emitter|emotion|enableEnemy|enablePain|enablespawn|endactionanim|
      endalpha|endArray|EndCycle|endlevel|endpath|endpoint|enemy|enemy_visible_change_time|enemysharerange|
      enemyswitchdisable|enemyswitchenable|ensureforwardoffladder|ensureoverladder|enter|entity|entitystart|entnum|
      error|exec|exit|explode|explodeontouch|explosionattack|explosioneffect|explosionmodel|explosionoffset|
      explosions|ExplosionSound|eyeslookat|
      #F
      face|fade|fadedelay|fadein|fadeout|fadesound|fadetime|fakebullets|fallback|fallheight|fallingangleadjust|
      farclipoverride|farplane|farplane_bias|farplane_color|farplane_cull|farplaneclipcolor|favoriteenemy|findendpoint|
      findenemy|finishroundtransition|finishuseanim|finishuseobject|fire|fire_grenade|firedelay|FireOnStartUp|
      firespreadmult|firetype|firewarmupdelay|fixedleash|flags|flash|float|flypath|follow|follow_distance|follow_yaw|
      follow_yaw_absolute|follow_yaw_relative|followpath|forceactivate|forcelegsstate|forcemusic|forcetorsostate|
      forwardvector|fov|freezeplayer|front_mass|fullheal|fullstop|fuse|
      #G
      gameversion|german|get_render_terrain|getboundkey1|getboundkey2|getcontrollerangles|getcvar|GetLocalYawFromVector|
      getmaxs|getmins|getmovement|getposition|GetRunAnim|gettagangles|gettagposition|gettargetentity|GetWalkAnim|ghost|
      give|givedynitem|giveweapon|globaltranslate|glue|gotkill|gravity|gren_awareness|gun|gvo|
      #H
      handlespawn|has_disguise|hascompletelookahead|headmodel|headskin|heal|health|health_postspawn|healthonly|hearing|
      heatseek|hide|hidemenu|hidemouse|hitdamage|hiteffect|holster|holsterangles|holsteroffset|holsterscale|holstertag|
      huddraw_align|huddraw_alpha|huddraw_color|huddraw_font|huddraw_rect|huddraw_shader|huddraw_string|
      huddraw_virtualsize|hurt|
      #I
      ID|idle|idleCheckOffset|idleinit|idlesay|ignorebadplaces|ignoreclock|immediateremove|immune|impactmarkorientation|
      impactmarkradius|impactmarkshader|initialize|inpvs|inreload|int|interrupt_point|interval|intervaldir|invnext|
      invprev|iprint|iprintln|iprintln_noloc|iprintlnbold|iprintlnbold_noloc|is_disguised|is_enemy_visible|isabandoned|
      isAlive|isdonut|isimmune|isloopinganim|istouching|isturnedon|item|item_droptofloor|
      item_pickup|
      #J
      jitteramount|join_team|joinTeam|jump|jumpto|jumpxy|
      #K
      key|kickdir|kill|killattach|killclass|killed|killedeffect|killent|killtarget|killthread|killtrace|knockback|
      #L
      land_angles|land_radius|landminedamage|last_enemy_visible_time|launchsound|lavaalpha|lavacolor|leash|leave_team|
      leftvector|letterbox|leveltransition|life|light|lightBlue|lightGreen|lightOff|lightOn|lightRadius|lightRed|
      lightStyle|limit|linkdoor|linkturret|lip|listinventory|load|loaded|loc_convert_string|locatecamera|lock|
      lockmovement|locprint|lod_angles|lod_discard|lod_model|lod_roll|lod_spawn|lod_think|lod_yaw|logstats|
      lookaroundangle|lookat|loop|loopfire|loopsound|low_wall_arc|
      #M
      mainattachtotag|makeArray|makenoise|map|maps|mass|max_health|max_time|maxalpha|maxamount|maxchargetime|
      maxdelay|maxdist|maxdonut|MaxDuration|maxfiremovement|maxgibs|maxIdlePitch|maxIdleYaw|maxmouthangle|
      maxmovementsound|MaxNumShots|maxoffset|maxrange|maxs|maxuseangle|maxYawOffset|meansofdeath|meleeattackend|
      meleeattackstart|message|min_dist|min_time|minchargetime|mindelay|mindist|mindonut|MinDuration|minlife|
      MinNumShots|minoffset|minrange|mins|minspeed|missionfailed|missiontransition|model|modelname|modheight|
      modifydrive|modifyflypath|mood|motionfail|move|moveanim|moveBackward|movedir|movedone|movedoneradius|moveDown|
      moveEast|movefail|moveForward|moveLeft|movementspeed|movementstealth|moveNorth|moveOffset|moveplayer|moveposflags|
      moveRight|movesound|moveSouth|moveto|movetopos|moveUp|moveWest|moving_from_anim|mprint|mprintln|multifaceted|
      mumble|music|musicvolume|
      #N
      name|neverdraw|new|next|nextcamera|nextdrive|nextmap|nextpaintime|nextpath|no_idle|no_remove|noammosound|
      noanimlerp|noclip|nodamage|noise|nolongpain|noncinematic|nonvislevel|normal_damage|normal_health|normalangles|
      normaldraw|northyaw|noshadow|nosurprise|notactive|notarget|notdroppable|noticescale|notouchdamage|notready|
      notshootable|notsolid|nottriggerable|nowatch|num_loops|numarenas|numfireanims|numsegments|numspherebeams|
      #O
      objectivecount|ObjectiveNbr|off|offhandattachtotag|offset|on|oneshot|onfire|open|openangle|opendot|openportal|
      orbit|orbit_height|orientedbbox|origin|other|overcooked|overcooked_warning|overlap|owner|
      #P
      pain|painhandler|path_relativeyaw|pathdist|patrolpath|pause|pauseanims|perferredweapon|persist|physics_off|
      physics_on|physics_velocity|pickup|pickup_done|pickup_thread|pickupoffset|pickupsound|pickweapon|pitchCaps|
      pitchSpeed|placeturret|play|playerspawn|PlayMovie|playpreimpact|playsound|pointat|pophelmet|popmenu|position|
      powerupname|poweruptimer|preimpactsound|preimpactsoundprob|preimpactsoundtime|prespawnsentient|prethink|prev|
      previewreverb|previousthread|prevpath|primarydmweapon|print|print3d|println|projectile|psetviewangles|pusher|
      pushmenu|pushsound|putawayweapon|
      #Q
      QueryDriverSlotAngles|QueryDriverSlotEntity|QueryDriverSlotPosition|QueryDriverSlotStatus|QueryFreeDriverSlot|
      QueryFreePassengerSlot|QueryFreeTurretSlot|QueryPassengerSlotEntity|QueryPassengerSlotPosition|
      QueryPassengerSlotStatus|QueryTurretSlotEntity|QueryTurretSlotPosition|QueryTurretSlotStatus|quiet|quitTeam|
      #R
      radius|Radius|radiusdamage|radnum|random|random_velocity|randomfloat|randomint|range|rank|ready|ReadyToFire|
      realism|releasefire|releaseplayer|reload|reload_mg42|reloaddelay|reloadshots|reloadweapon|remove|
      removeattachedmodel|removeclass|removeent|removeimmune|removeondeath|removewhenstopped|renamepath|render_terrain|
      rendereffects|replace|reset|reset_time|resetdelay|resethaveitem|resetleash|resetreverb|resetsound|resetspeed|
      resetstate|respawn|respawn_done|respawnsound|restoremusicvolume|restoresoundtrack|reverblevel|reverbtype|
      rightvector|roll|rotateaxis|rotateaxisdown|rotateaxisdownto|rotateaxisup|rotateaxisupto|rotatedbbox|rotatedownto|
      rotateto|rotateupto|rotateX|rotateXdown|rotateXdownto|rotateXup|rotateXupto|rotateY|rotateYdown|rotateYdownto|
      rotateYup|rotateYupto|rotateZ|rotateZdown|rotateZdownto|rotateZup|rotateZupto|runanimrate|runsounds|runto|
      #S
      safeholster|safesolid|safezoom|save|savemap|savename|say|saydone|sayfail|scale|scalerate|score|scriptshader|
      scriptslave_followingpath|scriptslave_movedone|seatanglesoffset|seatoffset|secondary|secondaryammoinhud|self|
      semiauto|server|set_objective_pos|set_respawn|set_respawn_time|setactionanim|setaimanim|setaimmotionanim|
      setAimOffset|setaimtarget|setAimTarget|setanim|setanimlength|setbaseentity|setcollisionentity|setcontrollerangles|
      SetCurrent|setcurrentfireanim|setcurrentobjective|setcvar|SetDamage|setdamage|setfadetime|setfov|sethelmet|
      setlightstyle|setmeansofdeath|setmotionanim|setpath|setPlayerUsable|setreloadcover|setsay|setshaderdata|
      setshadertime|setsize|setsoundparameters|setspeed|setsynctime|settarget|settargetentity|settargetname|setthread|
      setupperanim|setusable|setusethread|setvolumeparameters|setweapon|setyawfrombone|severity|shader|shadow|
      share_enemy|share_grenade|shareclip|shoot|shootableonly|shootradius|show|showmenu|showquakes|showweapon|sight|
      sighttrace|silent|sinksound|skidding|skill|skipcinematic|skyalpha|skybox_farplane|skybox_speed|skyportal|
      smashthroughglass|solid|sound|sound_awareness|sound_close_end|sound_close_start|sound_locked|sound_message|
      sound_open_end|sound_open_start|soundparms|SoundSet|soundtrack|sp|spawn|spawnbloodygibs|spawnchance|spawnflags|
      spawnitem|spawnlife|spawnmodel|spawnrate|spawnspot|spawntarget|spawntargetname|spawnturret|spectator|speed|spin|
      SplinePath_create|sprealism|start|startammo|startangles|startfiring|startFiring|startingammotoowner|startitem|
      startorigin|startuseobject|startyaw|state|state_backwards|stationary|stats|steerinplace|stickybombwet|stop|
      stopatend|stopfire|stopFiring|stoploopsound|stoponfire|stopped|stoprotating|stopsound|stopwatch|StopWatchDuration|
      stopwatchingactor|string|stuffcmd|stufftext|stunend|stunstart|suppresschance|suppressHeight|suppressTime|
      suppressWaitTime|suppressWidth|surface|svflags|switchfacet|
      #T
      take|takeall|takedamage|TakeOver|takepain|target|targetname|targettype|team|teamwin|tele|testmojo|testplayeranim|
      testthread|tether|Text|thinkstate|thread|threadmove|threatbias|throughmetal|throughwood|throw|throwgib|throwsound|
      TickCycle|TickSound|tileshader|time|timedecay|timeout|toggledelay|toggledoor|toggleitem|toss|touchtriggers|trace|
      tracerfreq|tracerfrequency|tracerspeed|trigger|triggerable|triggered|triggereffect|triggereffectalt|triggername|
      triggertarget|triggerthread|trysolid|tryToOpen|turn|turndoneerror|turnlegs|TurnOff|TurnOn|turnrate|turnspeed|
      turnSpeed|turnto|turnupdate|turret|turretenter|turretexit|turrettik|tweakladderpos|type_attack|type_disguise|
      type_grenade|type_idle|
      #U
      unattachfromladder|unbind|undrivable|unglue|unholster|unlock|unlockmovement|unregister|updatebeam|updateendpoint|
      updateinput|updateorigin|updatepoweruptime|upperanim|upperfail|upvector|use|usebbox|UsedModel|uselast|usematerial|
      usenoammo|userdistance|usestuff|useweaponclass|
      #V
      vector_add|vector_closer|vector_cross|vector_dot|vector_length|vector_normalize|vector_scale|vector_subtract|
      vector_toangles|vector_within|vehicleanim|vehiclebouncy|vehicledestroyed|vehicledrag|vehicleinit|vehiclemass|
      vehicleradius|vehicleRoll|vehiclerollingresistance|vehiclesoudnentity_updatetraces|vehiclesoundentity_postspawn|
      vehiclespeed|vehiclespringy|vehicletread|VehicleWheelCorners|vehicleYaw|vehicleZ|velocity|viewangles|viewanimate|
      viewattach|viewdelete|viewdeleteall|viewdetach|viewdetachall|viewjitter|viewkick|viewlastframe|viewmodel|
      viewmodelanim|viewnext|viewnextanim|viewOffset|vieworigin|viewpitch|viewprev|viewprevanim|viewroll|
      viewsavesurfaces|viewscale|viewscaledown|viewscaleup|viewscrub|viewsetanim|viewsetanim2|viewsetanimslot|viewspawn|
      viewthing_think|viewthingnext|viewthingprev|viewyaw|voicetype|volume|volumedamage|vote|
      #W
      wait|waitexec|waitForState|waitframe|waitmove|waitthread|waittill|waittrigger|walkto|warmupdelay|watch|watchactor|
      watchnode|watchpath|watchstring|wateralpha|watercolor|weapdrop|weapnext|weapon|weapon_internal|weaponcommand|
      weapongroup|weaponsubtype|weapontype|weapprev|whatis|worldhitspawn|wuss|
      #Y
      yaw|yaw_offset|yawCenter|
      #Z
      zoom|zoommovement|zoomoff|zoomspreadmult
    )

  line_continuation_lookahead: >-
    (?x:(?=
      \s*
      (?! \+\+ | -- )
      (?=
        != |
        [-+*/%><=&|^\[(;.]
      )
    ))

contexts:
  main:
    - match: '\)|\}|\]'
      scope: invalid.illegal.stray-bracket-end.scr

    - match: (?=\S)
      push: statement

  prototype:
    - include: comments

  immediately-pop:
    - match: ''
      pop: true

  eol-pop:
    - match: $\n?
      pop: true

  else-pop:
    - match: (?=\S)
      pop: true

  comments:
    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.begin.scr
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.documentation.scr

        - match: \*/
          scope: punctuation.definition.comment.end.scr
          pop: true

        - match: \B\@(\w+)\b
          scope: keyword.other.documentation.scr

    - match: /\*
      scope: punctuation.definition.comment.begin.scr
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.scr

        - match: \*/
          scope: punctuation.definition.comment.end.scr
          pop: true

    - match: //
      scope: punctuation.definition.comment.scr
      push:
        - meta_include_prototype: false
        - meta_scope: comment.line.double-slash.scr

        - include: eol-pop

  literal-string:
    - match: '"'
      scope: punctuation.definition.string.begin.scr
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.scr
        - match: (\")|(\n)
          captures:
            1: punctuation.definition.string.end.scr
            2: invalid.illegal.newline.scr
          pop: true
        - match: '\\[nrt"\\]'
          scope: constant.character.escape.scr

  literal-number:
    - match: '{{numbers}}'
      scope: constant.numeric.scr
      pop: true

  prefix-operators:
    - match: '~'
      scope: keyword.operator.bitwise.scr

    - match: '!(?!=)'
      scope: keyword.operator.logical.scr

    - match: \+|\-
      scope: keyword.operator.arithmetic.scr

    - match: typeof\b
      scope: keyword.other.scr

  postfix-operators:
    - match: '--'
      scope: keyword.operator.arithmetic.scr

    - match: '\+\+'
      scope: keyword.operator.arithmetic.scr

  binary-operators:
    - match: '::'
      scope: keyword.operator.const-array.scr
      #push: expression-begin
      push:
        - include: expression-break
        - include: line-continuation
        - include: file-path
        - include: literal-string
        - include: literal-number
        - include: prefix-operators
        - include: constants
        - include: parenthesized-expression
        - include: literal-variable
        #- include: type
        #- include: built-in-functions
        - include: unquoted-string
        - include: else-pop

    - match: '&&|\|\|'
      scope: keyword.operator.logical.scr
      push: expression-begin

    - match: '=(?![=>])'
      scope: keyword.operator.assignment.scr
      push: expression-begin

    - match: |-
        (?x:
          \+=  | # assignment      right-to-left   both
          -=     # assignment      right-to-left   both
        )
      scope: keyword.operator.assignment.augmented.scr
      push: expression-begin

    - match: |-
        (?x:
          &    | # bitwise-and     left-to-right   both
          \^   | # bitwise-xor     left-to-right   both
          \|     # bitwise-or      left-to-right   both
        )
      scope: keyword.operator.bitwise.scr
      push: expression-begin

    - match: |-
        (?x:
          <=   | # relational      left-to-right   both
          >=   | # relational      left-to-right   both
          <    | # relational      left-to-right   both
          >      # relational      left-to-right   both
        )
      scope: keyword.operator.relational.scr
      push: expression-begin

    - match: |-
        (?x:
          ==   | # equality        left-to-right   both
          !=     # equality        left-to-right   both
        )
      scope: keyword.operator.comparison.scr
      push: expression-begin

    - match: |-
        (?x:
          /    | # division        left-to-right   both
          %    | # modulus         left-to-right   both
          \*   | # multiplication  left-to-right   both
          \+   | # addition        left-to-right   both
          -      # subtraction     left-to-right   both
        )
      scope: keyword.operator.arithmetic.scr
      push: expression-begin

  constants:
    - match: '(?i)\b(?:NULL|NIL)\b'
      scope: constant.language.null.scr
      pop: true

  literal-variable:
    - match: \bself\b
      scope: variable.language.this.scr
      pop: true

    - match: (?i:\blevel\b(?=\s+waittill\b))
      scope: variable.language.scr
      set: waittill-level-phases

    - match: (?i:\b(level)(\.)({{level_props}}))
      captures:
        1: variable.language.scr
        2: punctuation.accessor.dot.scr
        3: meta.property.object.scr support.function.builtin.scr
      pop: true

    - match: '\b(?:game|level|local|group|parm)\b'
      scope: variable.language.scr
      pop: true

    - match: \B((\$){{identifier}})\b
      captures:
        1: variable.language.scr
        2: keyword.operator.targetname.scr
      pop: true

    - match: \B\$
      scope: keyword.operator.targetname.scr
      pop: true

  waittill-level-phases:
    - match: (?i:\bwaittill\b)
      scope: support.function.builtin.scr
      push:
        - meta_scope: meta.waittill-levelphase.scr

        - match: '\b{{level_phases}}\b'
          scope: keyword.other.scr
          pop: true

        - match: \b\w+\b
          scope: invalid.illegal.scr
          pop: true

        - match: \n
          pop: true

    - include: else-pop

  statements:
    - match: '\)|\}|\]'
      scope: invalid.illegal.stray-bracket-end.scr
      pop: true

    - match: (?=\S)
      push: statement

  statement:
    - match: \;
      scope: punctuation.terminator.statement.empty.scr
      pop: true

    - include: conditional
    - include: block

    - match: \b(?:break|continue)\b
      scope: keyword.control.loop.scr
      set: expect-semicolon

    - match: \bend\b
      scope: keyword.control.flow.scr
      set: expect-semicolon

    - match: (?={{thread_lookahead}})
      set: thread-declaration

    - match: (?=\S)
      set: expression-statement

  expect-semicolon:
    - match: \;
      scope: punctuation.terminator.statement.scr
      pop: true
    - include: else-pop

  thread-declaration:
    - match: ''
      set:
        - thread-declaration-meta
        - thread-declaration-expect-parameters
        - thread-declaration-expect-name

  thread-declaration-expect-name:
    - match: '{{identifier_label}}'
      scope: entity.name.function.scr markup.bold
      pop: true

    - include: else-pop

  thread-declaration-expect-parameters:
    - match: ':'
      scope: punctuation.separator.scr
      pop: true

    - include: line-continuation

    - match: '\b(?:local|group)\.{{identifier}}\b'
      scope: variable.parameter.function.scr

    - include: else-pop

  thread-declaration-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function.declaration.scr
    - include: immediately-pop

  conditional:
    - match: \bswitch\b
      scope: keyword.control.switch.scr
      set:
        - switch-meta
        - switch-block
        - expect-parenthesized-expression

    - match: \bfor\b
      scope: keyword.control.loop.scr
      set:
        - for-meta
        - block-scope
        - for-condition

    - match: \bwhile\b
      scope: keyword.control.loop.scr
      set:
        - while-meta
        - block-scope
        - expect-parenthesized-expression

    - match: \b(?:else\s+if|if)\b
      scope: keyword.control.conditional.scr
      set:
        - conditional-meta
        - block-scope
        - expect-parenthesized-expression

    - match: \belse\b
      scope: keyword.control.conditional.scr
      set:
        - conditional-meta
        - block-scope

    - match: \btry\b
      scope: keyword.control.trycatch.scr
      set:
        - try-meta
        - block-scope

    - match: \bcatch\b
      scope: keyword.control.trycatch.scr
      set:
        - catch-meta
        - block-scope

    - match: \b(?:case|default)\b
      scope: keyword.control.switch.scr

  expect-parenthesized-expression:
    - include: parenthesized-expression
    - include: else-pop

  parenthesized-expression:
    - match: \(
      scope: punctuation.section.group.begin.scr
      set:
        - meta_scope: meta.group.scr

        - match: \)
          scope: punctuation.section.group.end.scr
          pop: true

        - match: (?=\S)
          push: expression

  property-access:
    - match: '\['
      scope: punctuation.section.brackets.begin.scr
      push:
        - meta_scope: meta.brackets.scr

        - match: '\]'
          scope: punctuation.section.brackets.end.scr
          pop: true

        - match: (?=\S)
          push: expression

    - match: \.(?!\d+\b)
      scope: punctuation.accessor.dot.scr
      push:
        - include: eol-pop

        - match: '{{builtin_props}}'
          scope: meta.property.object.scr support.function.builtin.scr
          pop: true

        - match: '{{identifier}}'
          scope: meta.property.object.scr
          pop: true

        - include: else-pop

  switch-meta:
    - meta_scope: meta.switch.scr
    - include: immediately-pop

  for-meta:
    - meta_scope: meta.for.scr
    - include: immediately-pop

  while-meta:
    - meta_scope: meta.while.scr
    - include: immediately-pop

  conditional-meta:
    - meta_scope: meta.conditional.scr
    - include: immediately-pop

  try-meta:
    - meta_scope: meta.try.scr
    - include: immediately-pop

  catch-meta:
    - meta_scope: meta.catch.scr
    - include: immediately-pop

  block-scope:
    - include: block
    - include: else-pop

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.scr
      set:
        - meta_scope: meta.block.scr
        - match: '\}'
          scope: punctuation.section.block.end.scr
          pop: true
        - include: statements

  for-condition:
    - match: '\('
      scope: punctuation.section.group.begin.scr
      set:
        - for-condition-end
        - for-condition-contents
    - include: else-pop

  for-condition-end:
    - meta_scope: meta.group.scr
    - match: '\)'
      scope: punctuation.section.group.end.scr
      pop: true

  for-condition-contents:
    - match: (?=\S)
      set:
        - - match: (?=\S)
            set: for-rest
        - expression-begin

  for-rest:
    - match: (?=\))
      pop: true
    - match: ;
      scope: punctuation.separator.expression.scr
    - match: (?=\S)
      push: expression

  switch-block:
    - match: '\{'
      scope: punctuation.section.block.begin.scr
      set: switch-block-contents
    - include: else-pop

  switch-block-contents:
    - meta_scope: meta.block.scr

    - match: '\}'
      scope: punctuation.section.block.end.scr
      pop: true

    - match: \bcase\b
      scope: keyword.control.switch.scr
      push:
        - expect-case-colon
        - expression

    - match: \bdefault\b
      scope: keyword.control.switch.scr
      push: expect-case-colon

    - include: statements

  expect-case-colon:
    - match: ':'
      scope: punctuation.separator.scr
      pop: true
    - include: else-pop

  line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.scr
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.scr

  expression-break:
    - match: (?=[;})\]])
      pop: true

  expression:
    - match: (?=\S)
      set: [ expression-end, expression-begin ]

  left-expression-end:
    - include: expression-break
    - include: property-access
    - include: else-pop

  expression-end:
    - include: postfix-operators
    - include: binary-operators
    - include: left-expression-end

  expression-begin:
    - include: expression-break
    - include: line-continuation
    - include: file-path
    - include: literal-string
    - include: literal-number
    - include: prefix-operators
    - include: constants
    - include: parenthesized-expression
    - include: literal-variable
    - include: type
    - include: built-in-functions
    - include: unquoted-string
    - include: else-pop

  expression-statement:
    - match: (?=\S)
      set:
        - expect-semicolon
        - expression-statement-end
        - expression-begin

  expression-statement-end:
    - match: \n
      set:
        - match: '{{line_continuation_lookahead}}'
          set: expression-statement-end
        - include: else-pop
    - include: expression-end

  type:
    - match: \b{{storage}}\b
      scope: storage.type.scr
      pop: true

  built-in-functions:
    - match: '\b(?i:thread|waitthread|setthread|goto|throw)\b'
      scope: keyword.control.scr
      set: expect-label

    - match: '\b(?i:exec|waitexec)\b'
      scope: keyword.control.scr
      pop: true


    - match: '\b{{builtin_funcs}}\b'
      scope: support.function.builtin.scr
      pop: true

  unquoted-string:
    - match: '(?!{{reserved_keywords}})[\w@#''-]+\b(?!\.)'
      scope: string.unquoted.scr
      pop: true

    #- include: else-pop

  file-path:
    - match: (?:[\w-]+/)+(?:[\w-]+\.\w+\b)
      scope: meta.file-path.scr string.unquoted.scr
      pop: true

  expect-label:
    - include: eol-pop
    - include: file-path

    - match: '{{identifier_label}}'
      scope: meta.function-call.scr support.function.scr markup.bold
      pop: true

    - include: else-pop