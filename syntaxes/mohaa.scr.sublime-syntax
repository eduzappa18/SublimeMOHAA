%YAML 1.2
---
name: Morpheus Script [.scr]
file_extensions:
  - scr
scope: source.scr

variables:
  identifier: '(?:[\w@#'']+\b)'
  identifier_label: '(?!{{reserved_keywords}})[\w@#''-]+\b(?!\.)'
  numbers: (?:\b\d*\.?\d+|\B\.\d+)\b
  reserved_keywords: |-
    \b(?x:
      game|level|local|group|parm|owner|self|
      if|else|for|while|
      switch|case|default|
      try|catch|throw|
      continue|break|goto|end
    )\b
  storage: '(?:bool|entity|float|int|string)'
  level_props: |-
    (?xi:
      alarm|bombs_planted|clockside|dmrespawning|dmroundlimit|found_secrets|loop_protection|nodrophealth|
      nodropweapons|objectivebased|papers|planting_team|rain_density|rain_length|rain_min_dist|rain_numshaders|
      rain_shader|rain_slant|rain_speed|rain_speed_vary|rain_width|roundbased|roundstarted|targets_destroyed|
      targets_to_destroy|time|total_secrets
    )\b
  builtin_props: |-
    (?xi:
      accuracy|adminrights|alarmnode|alarmthread|ammo_grenade|angle|angles|animname|attackhandler|avelocity|
      avoidplayer|balconyheight|blendtime|brushmodel|centroid|classname|collisionent|deathhandler|
      disguise_accept_thread|disguise_level|disguise_period|disguise_range|distancetoenemy|dmteam|dontdrophealth|
      dontdropweapons|emotion|enableEnemy|enablePain|enemy|enemy_visible_change_time|enemyname|enemysharerange|
      entnum|fallheight|farplane|farplane_bias|farplane_color|favoriteenemy|fireheld|fixedleash|forcedrophealth|
      forcedropweapon|forwardvector|fov|get_render_terrain|getmaxs|getmins|gren_awareness|gun|has_disguise|
      hascompletelookahead|headmodel|headskin|health|hearing|ignorebadplaces|injail|inreload|interval|intervaldir|
      inventory|is_disguised|isEscaping|isOpen|isSpectator|kickdir|last_enemy_visible_time|leanleftheld|leanrightheld|
      leash|leftvector|lookaroundangle|max_health|maxdist|mindist|model|mood|movedir|movedoneradius|moving_from_anim|
      mumble|nationality|nationalityprefix|netname|no_idle|nolongpain|nonvislevel|normal_health|nosurprise|
      noticescale|origin|owner|painhandler|pathdist|patrolpath|position|prealarmthread|primaryfireheld|radnum|
      rightvector|rotatedbbox|runanimrate|runheld|scale|secfireheld|secondaryfireheld|sight|silent|size|
      skybox_farplane|skybox_speed|sound_awareness|suppresschance|target|targetname|team|thinkstate|threatbias|
      turndoneerror|turnspeed|turret|type_attack|type_disguise|type_grenade|type_idle|upvector|useheld|userinfo|
      vehicle|velocity|viewangles|voicetype|waittrigger|weapon|weapongroup|weapontype|yaw
    )\b
  parm_props: (?i:motionfail|movedone|movefail|other|owner|previousthread|sayfail|upperfail)\b
  game_props: (?i:detail|skill)\b
  level_phases: (?i:prespawn|spawn|postthink|playerspawn|roundstart|allieswin|axiswin|draw)
  thread_lookahead: |-
    (?x:
      {{identifier_label}}
      (?:
        \s+
        (?:local|group)\.{{identifier}}
      )*
      \s*
      (?:\\$|:(?!:))
    )
  builtin_funcs: (?:{{reborn_funcs}}|{{moh_funcs}})
  reborn_funcs: |-
    (?xi:
      adddeaths|addkills|bindweap|charToInt|conprintf|getactiveweap|getclientnum|
      getconnstate|getdate|getdeaths|getentity|getip|getkills|getping|getproperty|gettime|
      gettimezone|isadmin|md5file|md5string|netname|registerev|setproperty|stuffsrv|
      teamswitchdelay|traced|typeof|unregisterev|
      # file
      fclose|fcopy|feof|ferror|fexists|fflush|fgetc|fgets|flist|fnewdir|fopen|fputc|
      fputs|freadall|freadpak|fremove|fremovedir|frename|frewind|fsaveall|fseek|ftell|
      # math
      cos|sin|tan|acos|asin|atan|atan2|cosh|sinh|tanh|exp|
      frexp|ldexp|log|log10|modf|pow|sqrt|ceil|floor|fmod|
      # ihuddraw_
      ihuddraw_align|ihuddraw_alpha|ihuddraw_color|ihuddraw_font|
      ihuddraw_rect|ihuddraw_shader|ihuddraw_string|ihuddraw_virtualsize
    )
  moh_funcs: |-
    (?xi:
      #A
      abs|accuracy|actionanimend|activate|activateitem|activatenewweapon|activatepapers|ActivateSound|activatetrigger|
      activator|active|actor|actorinfo|add|additionalstartammo|addkills|addmusictrigger|addobjective|addownervelocity|
      addrandomspeaker|addreverbtrigger|addspeaker|addvelocity|ai_event|ai_off|ai_on|ai_visiondistance|aibulletspread|
      aimat|aimoffset|aimtarget|aimtolerance|airange|alarmnode|alarmthread|alias|aliascache|all_ai_off|all_ai_on|
      AlliesObjNum|alpha|altcurrent|altfallback|altreverblevel|altreverbtype|alwaysaway|alwaysdraw|american|ammo|
      ammo_grenade|ammo_in_clip|ammoentity_postspawn|ammopickupsound|ammorequired|ammotype|amount|angle|angles|
      angles_pointat|angles_toforward|angles_toleft|angles_toup|anglespeed|anim|anim_attached|anim_noclip|anim_scripted|
      animated_farplane|animated_farplane_bias|animated_farplane_color|AnimationSet|animdone|animfinal|animloop|
      animloop_legs|animloop_pain|animloop_torso|animscript|animscript_attached|animscript_noclip|
      animscript_scripted|arc|arctotarget|arena|armor|armwithweapons|assert|attach|AttachDriverSlot|attachedmodelanim|
      attachgrenade|attachmodel|AttachPassengerSlot|attachtohand|attachtoladder|AttachTurretSlot|
      attackmode|attackplayer|auto_active|auto_join_team|auto_maxfov|auto_radius|auto_starttime|auto_state|
      auto_stoptime|autoaim|autoputaway|avelocity|avoidplayer|AxisObjNum|
      #B
      back_mass|badplace|balconyheight|barreltype|base_velocity|beam|becomebomb|bedead|BeginCycle|bind|
      blockend|blockstart|bloodmodel|BlowUp|bombs_planted|bool|bounce|bounceBackwardsVelocity|bouncefactor|
      bounceForwardsVelocity|bouncesound|bouncesound_hard|bouncesound_metal|bouncesound_water|bouncesoundchance|
      bouncetouch|breakspecial|bsptransition|bulletcount|bulletdamage|bulletknockback|bulletlarge|bulletrange|
      bulletspread|burstFireSettings|
      #C
      cache|calcgrenadetoss|calcgrenadetoss2|callvote|cam|camera|camera_think|cancelFor|canhitowner|canjump|canmoveto|
      cansee|canseenoents|canshoot|canshootenemyfrom|cantpartialreload|canuse|censor|centerprint|chance|
      channel|charge|chargelife|chargespeed|checkanims|checkonground|cinematic|classname|claypidgeon|
      clear_objective_pos|clearAimTarget|clearfade|clearletterbox|clearowner|clip_add|clip_empty|clip_fill|clipsize|
      clockside|close|closeportal|cnt|collisionent|color|commanddelay|Complete|cone|connect_paths|constantdamage|
      continue|controlledBy|convergeTime|cooktime|coord|correctweaponattachments|count|crawlto|CreateListener|
      crosshair|crouchto|cuecamera|cueplayer|curiousoff|curiouson|current|cut|cycles|
      #D
      damage|damage_multiplier|damage_type|damageable|damageagain|damageeveryframe|damagemult|damagepuff|damagesounds|
      damagetype|dampening|deactivate|deactivateweapon|dead|deadbody|deathembalm|deathsinkeachframe|
      deathsinkstart|debrismodel|debristype|debug_int3|debugline|defaultnonvislevel|delay|delaythrow|delete|
      DestroyModel|detach|detachallchildren|DetachDriverSlot|detachgrenade|detachPassengerSlot|DetachTurretSlot|
      dialogneeded|dieinwater|disablespawn|disconnect_paths|disguise_accept_thread|disguise_level|disguise_period|
      disguise_range|dlight|dm|dmammorequired|dmamount|dmbulletcount|dmbulletdamage|dmbulletrange|
      dmbulletspread|dmcantpartialreload|dmcrosshair|dmdeathdrop|dmfiredelay|dmfirespreadmult|dmg|dmlife|dmmaxamount|
      dmmessage|dmmovementspeed|dmprojectile|dmrealism|dmrespawning|dmroundlimit|dmstartammo|dmzoomspreadmult|
      doActivate|doBlocked|doclose|dog|doinit|dojitter|donedeath|donefiring|donereloading|dontdropweapons|doopen|
      door_triggerfield|doorclosed|dooropened|doortype|doroundtransition|doTouch|doUse|dprintln|drawhud|drivable|
      drive|driveNoWait|dropitems|droptofloor|dropturret|drunk|duckableglue|dumb|duration|
      #E
      earthquake|edgeeffect|edgetriggered|effects|emitter|enablespawn|endactionanim|
      endalpha|endArray|EndCycle|endlevel|endpath|endpoint|enemy_visible_change_time|enemyname|enemysharerange|
      enemyswitchdisable|enemyswitchenable|ensureforwardoffladder|ensureoverladder|enter|entity|entitystart|
      error|exec|exit|explode|explodeontouch|explosionattack|explosioneffect|explosionmodel|explosionoffset|
      explosions|ExplosionSound|eyeslookat|
      #F
      face|fade|fadedelay|fadein|fadeout|fadesound|fadetime|fakebullets|fallback|fallheight|fallingangleadjust|
      farclipoverride|farplane|farplane_bias|farplane_color|farplane_cull|farplaneclipcolor|favoriteenemy|findendpoint|
      findenemy|finishroundtransition|finishuseanim|finishuseobject|fire|fire_grenade|firedelay|FireOnStartUp|
      firespreadmult|firetype|firewarmupdelay|fixedleash|flags|flash|float|flypath|follow|follow_distance|follow_yaw|
      follow_yaw_absolute|follow_yaw_relative|followpath|forceactivate|forcedrophealth|forcedropweapon|
      forcelandminemeasure|forcelegsstate|forcemusic|forcetorsostate|fov|freezeplayer|front_mass|
      fullheal|fullstop|fuse|
      #G
      gameversion|german|getboundkey1|getboundkey2|getcontrollerangles|getcurrentdmweapontype|
      getcvar|getentbyentnum|GetLocalYawFromVector|getmovement|getposition|GetRunAnim|gettagangles|
      gettagposition|gettargetentity|GetWalkAnim|ghost|give|givedynitem|giveweapon|globaltranslate|glue|gotkill|
      gravity|gren_awareness|gun|gvo|
      #H
      handlespawn|headmodel|headskin|heal|health|health_postspawn|healthonly|hearing|
      heatseek|hide|hidemenu|hidemouse|hitdamage|hiteffect|holster|holsterangles|holsteroffset|holsterscale|holstertag|
      huddraw_align|huddraw_alpha|huddraw_color|huddraw_font|huddraw_rect|huddraw_shader|huddraw_string|
      huddraw_virtualsize|hurt|
      #I
      ID|idle|idleCheckOffset|idleinit|idlesay|ignorebadplaces|ignoreclock|immediateremove|immune|impactmarkorientation|
      impactmarkradius|impactmarkshader|initialize|inpvs|int|interrupt_point|interval|
      invnext|invprev|iprint|iprintln|iprintln_noloc|iprintlnbold|iprintlnbold_noloc|is_enemy_visible|
      isabandoned|isAlive|isdonut|isimmune|isinside|isloopinganim|istouching|isturnedon|
      item|item_droptofloor|item_pickup|
      #J
      jailassistescape|jailescape|jailescapestop|jitteramount|join_team|joinTeam|jump|jumpto|jumpxy|
      #K
      key|kill|kill_axis|killattach|killclass|killed|killedeffect|killent|killtarget|killthread|killtrace|
      knockback|
      #L
      land_angles|land_radius|landmark_name|landminedamage|launchsound|lavaalpha|lavacolor|
      leash|leave_team|letterbox|leveltransition|life|light|lightBlue|lightGreen|lightOff|lightOn|
      lightRadius|lightRed|lightStyle|limit|linkdoor|linkturret|lip|listinventory|load|loaded|loc_convert_string|
      locatecamera|lock|lockmovement|locprint|lod_angles|lod_discard|lod_model|lod_roll|lod_spawn|lod_think|lod_yaw|
      logstats|lookaroundangle|lookat|loop|loopfire|loopsound|low_wall_arc|
      #M
      mainattachtotag|makeArray|makenoise|map|maps|mass|max_health|max_time|maxalpha|maxamount|maxchargetime|
      maxdelay|maxdist|maxdonut|MaxDuration|maxfiremovement|maxgibs|maxIdlePitch|maxIdleYaw|maxmouthangle|
      maxmovementsound|MaxNumShots|maxoffset|maxrange|maxs|maxuseangle|maxYawOffset|meansofdeath|meleeattackend|
      meleeattackstart|message|min_dist|min_time|minchargetime|mindelay|mindist|mindonut|MinDuration|minlife|
      MinNumShots|minoffset|minrange|mins|minspeed|missionfailed|missiontransition|model|modelname|modheight|
      modheightfloat|modifydrive|modifyflypath|move|moveanim|moveBackward|movedone|
      moveDown|moveEast|moveForward|moveLeft|movementspeed|movementstealth|moveNorth|
      moveOffset|moveplayer|moveposflags|moveRight|movesound|moveSouth|moveto|movetopos|moveUp|moveWest|
      mprint|mprintln|multifaceted|mumble|music|musicvolume|
      #N
      name|nationality|neverdraw|new|next|nextcamera|nextdrive|nextmap|nextpaintime|nextpath|
      no_remove|noammosound|noanimlerp|noclip|nodamage|noise|nolongpain|noncinematic|nonvislevel|normal_damage|
      normalangles|normaldraw|northyaw|noshadow|nosurprise|notactive|notarget|notdroppable|noticescale|
      notouchdamage|notready|notshootable|notsolid|nottriggerable|nowatch|num_loops|numarenas|numfireanims|
      numsegments|numspherebeams|
      #O
      objectivecount|ObjectiveNbr|off|offhandattachtotag|offset|on|oneshot|onfire|open|openangle|opendot|openportal|
      orbit|orbit_height|orientedbbox|origin|overcooked|overcooked_warning|overlap|
      #P
      pain|path_relativeyaw|pathDrivable|patrolpath|pause|pauseanims|perferredweapon|persist|
      physics_off|physics_on|physics_velocity|pickup|pickup_done|pickup_thread|pickupoffset|pickupsound|pickweapon|
      pingformines|pitchCaps|pitchSpeed|placeturret|planting_team|play|playerspawn|PlayMovie|playpreimpact|
      playreloadsound|playsound|pointat|pophelmet|popmenu|powerupname|poweruptimer|prealarmthread|
      preimpactsound|preimpactsoundprob|preimpactsoundtime|prespawnsentient|prethink|prev|previewreverb|
      prevpath|primarydmweapon|print|print3d|println|projectile|projectilevulnerable|
      psetviewangles|pusher|pushmenu|pushsound|putawayweapon|
      #Q
      QueryDriverSlotAngles|QueryDriverSlotEntity|QueryDriverSlotPosition|QueryDriverSlotStatus|QueryFreeDriverSlot|
      QueryFreePassengerSlot|QueryFreeTurretSlot|QueryPassengerSlotEntity|QueryPassengerSlotPosition|
      QueryPassengerSlotStatus|QuerySpeed|QueryTurretSlotEntity|QueryTurretSlotPosition|QueryTurretSlotStatus|
      quiet|quitTeam|
      #R
      radius|Radius|radiusdamage|random|random_velocity|randomfloat|randomint|range|rank|ready|ReadyToFire|
      realism|releasefire|releaseplayer|reload|reload_mg42|reloaddelay|reloadshots|reloadweapon|remove|
      removeattachedmodel|removebadplace|removeclass|removeent|removeimmune|removeondeath|removewhenstopped|
      renamepath|render_terrain|rendereffects|replace|reset|reset_time|resetdelay|resethaveitem|resetleash|
      resetreverb|resetsound|resetspeed|resetstate|respawn|respawn_done|respawnsound|restoremusicvolume|
      restoresoundtrack|reverblevel|reverbtype|revive|roll|rotate|rotateaxis|rotateaxisdown|rotateaxisdownto|
      rotateaxisup|rotateaxisupto|rotatedownto|rotateto|rotateupto|rotateX|rotateXdown|rotateXdownto|rotateXup|
      rotateXupto|rotateY|rotateYdown|rotateYdownto|rotateYup|rotateYupto|rotateZ|rotateZdown|rotateZdownto|
      rotateZup|rotateZupto|runanimrate|runsounds|runto|
      #S
      safeholster|safesolid|safezoom|save|savemap|savename|say|saydone|scale|scalerate|score|scriptshader|
      scriptslave_followingpath|scriptslave_movedone|seatanglesoffset|seatoffset|secondary|secondaryammoinhud|self|
      semiauto|server|set_objective_pos|set_respawn|set_respawn_time|setactionanim|setaimanim|setaimmotionanim|
      setAimOffset|setAimTarget|setanim|setanimlength|setbaseentity|setcollisionentity|setcontrollerangles|
      SetCurrent|setcurrentfireanim|setcurrentobjective|setcvar|SetDamage|setdamage|setfadetime|setfov|sethelmet|
      setlightstyle|setmeansofdeath|setmotionanim|setpath|setPlayerUsable|setreloadcover|setsay|setscoreboardtoggle|
      setshaderdata|setshadertime|setsize|setsoundparameters|setspeed|setswitchthread|setsynctime|settarget|
      settargetentity|settargetname|setthread|setupperanim|setusable|setusethread|setvolumeparameters|setweapon|
      setweaponidlestate|setyawfrombone|severity|shader|shadow|share_enemy|share_grenade|shareclip|shoot|shootableonly|
      shootradius|show|showmenu|showquakes|showweapon|sight|sighttrace|silent|sinksound|skidding|skipcinematic|
      skyalpha|skybox_farplane|skybox_speed|skyportal|smashthroughglass|solid|sound|sound_awareness|sound_close_end|
      sound_close_start|sound_locked|sound_message|sound_open_end|sound_open_start|soundparms|SoundSet|soundtrack|sp|
      spawn|spawnbloodygibs|spawnchance|spawnflags|spawnitem|spawnlife|spawnmodel|spawnrate|spawnspot|spawntarget|
      spawntargetname|spawnturret|spectator|speed|spin|SplinePath_create|sprealism|start|startammo|startangles|
      startfiring|startFiring|startingammotoowner|startitem|startorigin|startuseobject|startyaw|state|state_backwards|
      stationary|stats|steerinplace|stickybombwet|stop|stopatend|StopBackwardsVelocity|stopfire|stopFiring|
      StopForwardsVelocity|stoploopsound|stoponfire|stopped|stoprotating|stopsound|stopteamrespawn|stopwatch|
      StopWatchDuration|stopwatchingactor|string|stuffcmd|stufftext|stunend|stunstart|suppresschance|suppressHeight|
      suppressTime|suppressWaitTime|suppressWidth|surface|svflags|switchfacet|
      #T
      take|takeall|takedamage|TakeOver|takepain|target|targetname|targets_destroyed|targets_to_destroy|targettype|
      team|teamwin|tele|testmojo|testplayeranim|testthread|tether|text|thread|threadmove|threatbias|
      throughmetal|throughwood|throw|throwgib|throwsound|TickCycle|TickSound|tileshader|time|timedecay|timeout|
      toggledelay|toggledoor|toggleitem|toss|touchtriggers|trace|tracerfreq|tracerfrequency|tracerspeed|trigger|
      triggerable|triggered|triggereffect|triggereffectalt|triggername|triggertarget|triggerthread|trysolid|
      tryToOpen|turn|turndoneerror|turnlegs|TurnOff|TurnOn|turnrate|turnspeed|turnto|turnupdate|turret|
      turretenter|turretexit|turrettik|tweakladderpos|type_attack|type_disguise|type_grenade|type_idle|
      #U
      unattachfromladder|unbind|undrivable|unglue|unholster|unlock|unlockmovement|unregister|updatebeam|updateendpoint|
      updateinput|updateorigin|updatepoweruptime|upperanim|use|usebbox|UsedModel|uselast|usematerial|
      usenoammo|userdistance|usestuff|useweaponclass|
      #V
      vector_add|vector_closer|vector_cross|vector_dot|vector_length|vector_normalize|vector_scale|vector_subtract|
      vector_toangles|vector_within|vehicleanim|vehiclebouncy|vehicledestroyed|vehicledrag|vehicleinit|
      vehiclemass|vehicleradius|vehicleRoll|vehiclerollingresistance|vehiclesoudnentity_updatetraces|
      vehiclesoundentity_postspawn|vehiclespeed|vehiclespringy|vehicletread|VehicleWheelCorners|vehicleYaw|vehicleZ|
      viewangles|viewanimate|viewattach|viewdelete|viewdeleteall|viewdetach|viewdetachall|viewjitter|
      viewkick|viewlastframe|viewmodel|viewmodelanim|viewnext|viewnextanim|viewOffset|vieworigin|viewpitch|viewprev|
      viewprevanim|viewroll|viewsavesurfaces|viewscale|viewscaledown|viewscaleup|viewscrub|viewsetanim|viewsetanim2|
      viewsetanimslot|viewspawn|viewthing_think|viewthingnext|viewthingprev|viewyaw|voicetype|volume|volumedamage|vote|
      #W
      wait|waitexec|waitForState|waitframe|waitmove|waitthread|waittill|waittrigger|walkto|warmupdelay|watch|watchactor|
      watchnode|watchpath|watchstring|wateralpha|watercolor|weapdrop|weapnext|weapon|weapon_internal|weaponcommand|
      weapongroup|weaponsubtype|weapontype|weapprev|whatis|worldhitspawn|writestats|wuss|
      #Y
      yaw_offset|yawCenter|
      #Z
      zoom|zoommovement|zoomoff|zoomspreadmult
    )

  line_continuation_lookahead: >-
    (?x:(?=
      \s*
      (?! \+\+ | -- )
      (?=
        != |
        [-+*/%><=&|^\[(;.]
      )
    ))

contexts:
  main:
    - match: '\)|\}|\]'
      scope: invalid.illegal.stray-bracket-end.scr

    - match: (?=\S)
      push: statement

  prototype:
    - include: comments

  immediately-pop:
    - match: ''
      pop: true

  eol-pop:
    - match: $\n?
      pop: true

  else-pop:
    - match: (?=\S)
      pop: true

  comments:
    - match: /\*\*(?!/)
      scope: punctuation.definition.comment.begin.scr
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.documentation.scr

        - match: \*/
          scope: punctuation.definition.comment.end.scr
          pop: true

        - match: '\B\@param\b'
          scope: entity.name.tag.documentation.scr
          push:
            - match: '(\{)([\w@#:/''\.]+)(\})'
              scope: entity.other.attribute-name.scr
              push:
                - match: '(\[)(\b[\w@#''\.]+\b)(\])|(\b[\w@#''\.]+\b)'
                  scope: variable.parameter.scr
                  pop: true
                - include: else-pop
                - include: eol-pop
            - include: else-pop
            - include: eol-pop

        - match: '\B\@returns?\b'
          scope: entity.name.tag.documentation.scr
          push:
            - match: '\{[\w@#:/''\.]+\}'
              scope: entity.other.attribute-name.scr
              pop: true
            - include: else-pop
            - include: eol-pop

        - match: \B\@([-\w]+)\b
          scope: entity.name.tag.documentation.scr

    - match: /\*
      scope: punctuation.definition.comment.begin.scr
      push:
        - meta_include_prototype: false
        - meta_scope: comment.block.scr

        - match: \*/
          scope: punctuation.definition.comment.end.scr
          pop: true

    - match: //
      scope: punctuation.definition.comment.scr
      push:
        - meta_include_prototype: false
        - meta_scope: comment.line.double-slash.scr

        - include: eol-pop

  literal-string:
    - match: '"'
      scope: punctuation.definition.string.begin.scr
      set:
        - meta_include_prototype: false
        - meta_scope: string.quoted.double.scr
        - match: (\")|(\n)
          captures:
            1: punctuation.definition.string.end.scr
            2: invalid.illegal.newline.scr
          pop: true
        - match: '\\[nt"\\]'
          scope: constant.character.escape.scr

  literal-number:
    - match: '{{numbers}}'
      scope: constant.numeric.scr
      pop: true

  prefix-operators:
    - match: '~'
      scope: keyword.operator.bitwise.scr

    - match: '!(?!=)'
      scope: keyword.operator.logical.scr

    - match: \+|\-
      scope: keyword.operator.arithmetic.scr

  postfix-operators:
    - match: '--'
      scope: keyword.operator.arithmetic.scr

    - match: '\+\+'
      scope: keyword.operator.arithmetic.scr

  binary-operators:
    - match: '::'
      scope: keyword.operator.const-array.scr
      #push: expression-begin
      push:
        - include: expression-break
        - include: line-continuation
        - include: file-path
        - include: literal-string
        - include: literal-number
        - include: prefix-operators
        - include: constants
        - include: parenthesized-expression
        - include: literal-variable
        #- include: type
        #- include: built-in-functions
        - include: unquoted-string
        - include: else-pop

    - match: '&&|\|\|'
      scope: keyword.operator.logical.scr
      push: expression-begin

    - match: '=(?![=>])'
      scope: keyword.operator.assignment.scr
      push: expression-begin

    - match: |-
        (?x:
          \+=  | # assignment      right-to-left   both
          -=     # assignment      right-to-left   both
        )
      scope: keyword.operator.assignment.augmented.scr
      push: expression-begin

    - match: |-
        (?x:
          &    | # bitwise-and     left-to-right   both
          \^   | # bitwise-xor     left-to-right   both
          \|     # bitwise-or      left-to-right   both
        )
      scope: keyword.operator.bitwise.scr
      push: expression-begin

    - match: |-
        (?x:
          <=   | # relational      left-to-right   both
          >=   | # relational      left-to-right   both
          <    | # relational      left-to-right   both
          >      # relational      left-to-right   both
        )
      scope: keyword.operator.relational.scr
      push: expression-begin

    - match: |-
        (?x:
          ==   | # equality        left-to-right   both
          !=     # equality        left-to-right   both
        )
      scope: keyword.operator.comparison.scr
      push: expression-begin

    - match: |-
        (?x:
          /    | # division        left-to-right   both
          %    | # modulus         left-to-right   both
          \*   | # multiplication  left-to-right   both
          \+   | # addition        left-to-right   both
          -      # subtraction     left-to-right   both
        )
      scope: keyword.operator.arithmetic.scr
      push: expression-begin

  constants:
    - match: '(?i)\b(?:NULL|NIL)\b'
      scope: constant.language.null.scr
      pop: true

  literal-variable:
    - match: \bself\b
      scope: variable.language.this.scr
      pop: true

    - match: (?i:\b(game)(\.))({{game_props}})
      captures:
        1: variable.language.scr
        2: punctuation.accessor.dot.scr
        3: meta.property.object.scr support.function.builtin.scr
      pop: true

    - match: (?i:\b(parm)(\.)({{parm_props}}))
      captures:
        1: variable.language.scr
        2: punctuation.accessor.dot.scr
        3: meta.property.object.scr support.function.builtin.scr
      pop: true

    - match: (?i:\blevel\b(?=\s+waittill\b))
      scope: variable.language.scr
      set: waittill-level-phases

    - match: (?i:\b(level)(\.)({{level_props}}))
      captures:
        1: variable.language.scr
        2: punctuation.accessor.dot.scr
        3: meta.property.object.scr support.function.builtin.scr
      pop: true

    - match: (?i:\b(game|level|local|group)(\.))({{builtin_props}})
      captures:
        1: variable.language.scr
        2: punctuation.accessor.dot.scr
        3: meta.property.object.scr
      pop: true

    - match: '\b(?:game|level|local|group|parm|owner)\b'
      scope: variable.language.scr
      pop: true

    - match: \B((\$){{identifier}})\b
      captures:
        1: variable.language.scr
        2: keyword.operator.targetname.scr
      pop: true

    - match: \B\$
      scope: keyword.operator.targetname.scr
      pop: true

  waittill-level-phases:
    - match: (?i:\bwaittill\b)
      scope: support.function.builtin.scr
      push:
        - meta_scope: meta.waittill-levelphase.scr

        - match: '\b{{level_phases}}\b'
          scope: keyword.other.scr
          pop: true

        - match: \b\w+\b
          scope: invalid.illegal.scr
          pop: true

        - match: \n
          pop: true

    - include: else-pop

  statements:
    - match: '\)|\}|\]'
      scope: invalid.illegal.stray-bracket-end.scr
      pop: true

    - match: (?=\S)
      push: statement

  statement:
    - match: \;
      scope: punctuation.terminator.statement.empty.scr
      pop: true

    - include: conditional
    - include: block

    - match: \b(?:break|continue)\b
      scope: keyword.control.loop.scr
      set: expect-semicolon

    - match: \b(?i:end)\b
      scope: keyword.control.flow.scr
      set: expect-semicolon

    - match: (?={{thread_lookahead}})
      set: thread-declaration

    - match: (?=\S)
      set: expression-statement

  expect-semicolon:
    - match: \;
      scope: punctuation.terminator.statement.scr
      pop: true
    - include: else-pop

  thread-declaration:
    - match: ''
      set:
        - thread-declaration-meta
        - thread-declaration-expect-parameters
        - thread-declaration-expect-name

  thread-declaration-expect-name:
    - match: '{{identifier_label}}'
      scope: entity.name.function.scr markup.bold
      pop: true

    - include: else-pop

  thread-declaration-expect-parameters:
    - match: ':'
      scope: punctuation.separator.scr
      pop: true

    - include: line-continuation

    - match: '\b(?:local|group)\.{{identifier}}\b'
      scope: variable.parameter.function.scr

    - include: else-pop

  thread-declaration-meta:
    - meta_include_prototype: false
    - meta_scope: meta.function.declaration.scr
    - include: immediately-pop

  conditional:
    - match: \bswitch\b
      scope: keyword.control.switch.scr
      set:
        - switch-meta
        - switch-block
        - expect-parenthesized-expression

    - match: \bfor\b
      scope: keyword.control.loop.scr
      set:
        - for-meta
        - block-scope
        - for-condition

    - match: \bwhile\b
      scope: keyword.control.loop.scr
      set:
        - while-meta
        - block-scope
        - expect-parenthesized-expression

    - match: \b(?:else\s+if|if)\b
      scope: keyword.control.conditional.scr
      set:
        - conditional-meta
        - block-scope
        - expect-parenthesized-expression

    - match: \belse\b
      scope: keyword.control.conditional.scr
      set:
        - conditional-meta
        - block-scope

    - match: \btry\b
      scope: keyword.control.trycatch.scr
      set:
        - try-meta
        - block-scope

    - match: \bcatch\b
      scope: keyword.control.trycatch.scr
      set:
        - catch-meta
        - block-scope

    - match: \b(?:case|default)\b
      scope: keyword.control.switch.scr

  expect-parenthesized-expression:
    - include: parenthesized-expression
    - include: else-pop

  parenthesized-expression:
    - match: \(
      scope: punctuation.section.group.begin.scr
      set:
        - meta_scope: meta.group.scr

        - match: \)
          scope: punctuation.section.group.end.scr
          pop: true

        - match: (?=\S)
          push: expression

  property-access:
    - match: '\['
      scope: punctuation.section.brackets.begin.scr
      push:
        - meta_scope: meta.brackets.scr

        - match: '\]'
          scope: punctuation.section.brackets.end.scr
          pop: true

        - match: (?=\S)
          push: expression

    - match: \.(?!\d+\b)
      scope: punctuation.accessor.dot.scr
      push:
        - include: eol-pop

        - match: '{{builtin_props}}'
          scope: meta.property.object.scr support.function.builtin.scr
          pop: true

        - match: '{{identifier}}'
          scope: meta.property.object.scr
          pop: true

        - include: else-pop

  switch-meta:
    - meta_scope: meta.switch.scr
    - include: immediately-pop

  for-meta:
    - meta_scope: meta.for.scr
    - include: immediately-pop

  while-meta:
    - meta_scope: meta.while.scr
    - include: immediately-pop

  conditional-meta:
    - meta_scope: meta.conditional.scr
    - include: immediately-pop

  try-meta:
    - meta_scope: meta.try.scr
    - include: immediately-pop

  catch-meta:
    - meta_scope: meta.catch.scr
    - include: immediately-pop

  block-scope:
    - include: block
    - include: else-pop

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.scr
      set:
        - meta_scope: meta.block.scr
        - match: '\}'
          scope: punctuation.section.block.end.scr
          pop: true
        - include: statements

  for-condition:
    - match: '\('
      scope: punctuation.section.group.begin.scr
      set:
        - for-condition-end
        - for-condition-contents
    - include: else-pop

  for-condition-end:
    - meta_scope: meta.group.scr
    - match: '\)'
      scope: punctuation.section.group.end.scr
      pop: true

  for-condition-contents:
    - match: (?=\S)
      set:
        - - match: (?=\S)
            set: for-rest
        - expression-begin

  for-rest:
    - match: (?=\))
      pop: true
    - match: ;
      scope: punctuation.separator.expression.scr
    - match: (?=\S)
      push: expression

  switch-block:
    - match: '\{'
      scope: punctuation.section.block.begin.scr
      set: switch-block-contents
    - include: else-pop

  switch-block-contents:
    - meta_scope: meta.block.scr

    - match: '\}'
      scope: punctuation.section.block.end.scr
      pop: true

    - match: \bcase\b
      scope: keyword.control.switch.scr
      push:
        - expect-case-colon
        - expression

    - match: \bdefault\b
      scope: keyword.control.switch.scr
      push: expect-case-colon

    - match: '\b{{identifier}}(?=:)'
      scope: string.unquoted.case.scr
      push: expect-case-colon

    - include: statements

  expect-case-colon:
    - match: ':'
      scope: punctuation.separator.scr
      pop: true
    - include: else-pop

  line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.scr
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.scr

  expression-break:
    - match: (?=[;})\]])
      pop: true

  expression:
    - match: (?=\S)
      set: [ expression-end, expression-begin ]

  left-expression-end:
    - match: \b(wait|continue)\b
      scope: support.function.builtin.scr

    - include: expression-break
    - include: property-access
    - include: else-pop

  expression-end:
    - include: eol-pop
    - include: postfix-operators
    - include: binary-operators
    - include: left-expression-end

  expression-begin:
    - include: expression-break
    - include: line-continuation
    - include: file-path
    - include: literal-string
    - include: literal-number
    - include: prefix-operators
    - include: constants
    - include: parenthesized-expression
    - include: literal-variable
    - include: type
    - include: built-in-functions
    - include: unquoted-string
    - include: else-pop

  expression-statement:
    - match: (?=\S)
      set:
        - expect-semicolon
        - expression-statement-end
        - expression-begin

  expression-statement-end:
    - match: \n
      set:
        - match: '{{line_continuation_lookahead}}'
          set: expression-statement-end
        - include: else-pop
    - include: expression-end

  type:
    - match: \b{{storage}}\b
      scope: storage.type.scr support.function.builtin.scr
      pop: true

  built-in-functions:
    - match: '\b(?i:thread|waitthread|setthread|goto|throw)\b'
      scope: keyword.control.scr
      set: expect-label

    - match: '\b(?i:exec|waitexec)\b'
      scope: keyword.control.scr
      pop: true

    - match: '\b(?i:wait|waitframe)\b'
      scope: keyword.control.scr
      pop: true

    - match: '\b{{builtin_funcs}}\b'
      scope: support.function.builtin.scr
      pop: true

  unquoted-string:
    # - match: '(?!{{reserved_keywords}})[\w@#''-]+\b(?!\.)'
    - match: '(?!{{reserved_keywords}})[\w@#''-]+(?:\.\w+)*'
      scope: string.unquoted.scr
      pop: true

    #- include: else-pop

  file-path:
    - match: (?:[\w-]+/)+(?:[\w-]+(?:\.\w+)?\b)
      scope: meta.file-path.scr string.unquoted.scr
      pop: true

  expect-label:
    - include: eol-pop
    - include: file-path

    - match: '{{identifier_label}}'
      scope: meta.function-call.scr support.function.scr markup.bold
      pop: true

    - include: else-pop
