%YAML 1.2
---
name: State file [.st]
file_extensions:
  - st
scope: source.st

variables:
  identifier: \b([[:upper:][:digit:]_]+)\b
  cmds: \b(movetype|camera)\b
  conditions: (?:{{player_conditions}}|{{weapon_conditions}})
  player_conditions: |-
    (?x:
      ANIMDONE_LEGS|ANIMDONE_TORSO|AT_DOOR|AT_LADDER|AT_TOP_OF_LADDER|AT_USEANIM|AT_USEOBJECT|BACKWARD|BLOCKED|
      CAN_CLIMB_DOWN_LADDER|CAN_CLIMB_UP_LADDER|CAN_FALL|CAN_GET_OFF_LADDER_BOTTOM|CAN_GET_OFF_LADDER_TOP|
      CAN_MOVE_BACKWARD|CAN_MOVE_FORWARD|CAN_MOVE_LEFT|CAN_MOVE_RIGHT|CAN_PLACE_LANDMINE|CAN_PULL|CAN_PUSH|
      CAN_STAND|CAN_TURN|CAN_WALL_HUG|CHANCE|CHECK_HEIGHT|CROUCH|DO_JUMP_FLIP|DUCKED_VIEW_IN_WATER|
      FACING_DOWN_SLOPE|FACING_UP_SLOPE|FALLING|FEET_AT_LADDER|FINISHEDUSEANIM|FORWARD|FORWARD_VELOCITY|
      GROUNDENTITY|HARD_IMPACT|HAS_VELOCITY|HEALTH|HOLSTERWEAPON|IS_USING_TURRET|IS_USING_VEHICLE|JUMP|KILLED|
      KNOCKDOWN|LEFT|LEFT_LEG_HIGH|LEGS|LOOKING_UP|LOOP_USEOBJECT|MEDIUM_IMPACT|MOVEMENT_TYPE|NEAR_LANDMINE|
      ON_LADDER|ON_LANDMINE|ONGROUND|PAIN|PAIN_DIRECTION|PAIN_LOCATION|PAIN_THRESHOLD|PAIN_TYPE|POSITION_TYPE|
      RIGHT|RIGHT_LEG_HIGH|RISE|RUN|SLOPE_22|SLOPE_45|SNEAK|SOLID_FORWARD|STRAFE_LEFT|STRAFE_RIGHT|TORSO|
      TOUCHEDUSEANIM|TURRET_TYPE|USE|VEHICLE_TYPE|VIEW_IN_WATER
    )
  weapon_conditions: |-
    (?x:
      ABLE_TO_DEFUSE|ANIMDONE_VM|ANY_WEAPON_ACTIVE|ATTACK_BLOCKED|ATTACK_PRIMARY|ATTACK_PRIMARY_BUTTON|
      ATTACK_SECONDARY|ATTACK_SECONDARY_BUTTON|BLOCK_DELAY|CHECK_MOVEMENT_SPEED|CLIENT_COMMAND|HAS_AMMO|
      HAS_AMMO_IN_CLIP|HAS_WEAPON|IMMEDIATE_SWITCH|IS_NEW_WEAPON|IS_NEW_WEAPONCLASS|IS_VM_ANIM|IS_WEAPON_ACTIVE|
      IS_WEAPON_READY_TO_FIRE|IS_WEAPON_READY_TO_FIRE_NOSOUND|IS_WEAPON_SEMIAUTO|IS_WEAPONCLASS_ACTIVE|
      IS_WEAPONCLASS_READY_TO_FIRE|MAX_CHARGE_TIME_MET|MIN_CHARGE_TIME_MET|MUZZLE_CLEAR|NEW_WEAPON|NULL|
      PUTAWAYLEFT|PUTAWAYMAIN|RELOAD|STATE_ACTIVE|VAR_OPERATOR|WEAPON_CURRENT_FIRE_ANIM|WEAPONS_HOLSTERED
    )

contexts:
  main:
    - match: (?=^\s*\bstate\b\s+{{identifier}})
      push: state

    - match: \S+
      scope: invalid.illegal.st

  prototype:
    - include: comments

  immediately-pop:
    - match: ''
      pop: true

  else-pop:
    - match: (?=\S)
      pop: true

  definitions:
    - include: keywords
    - include: conditions
    - include: strings

  comments:
    - match: //
      scope: punctuation.definition.comment.st
      push:
        - meta_scope: comment.line.double-slash.st
        - match: $\n?
          pop: true

  keywords:
    - match: '!|-|\+|\bdefault\b'
      scope: keyword.operator.st

    - match: ':'
      scope: punctuation.separator.st

  conditions:
    - match: \b{{conditions}}\b
      scope: constant.language.st

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.st
      push:
        - meta_scope: string.quoted.st
        - match: (\")|(\n)
          captures:
            1: punctuation.definition.string.end.st
            2: invalid.illegal.newline.st
          pop: true
        - match: '\\[nrt"\\]'
          scope: constant.character.escape.st

  commands:
    - match: '{{cmds}}'
      scope: support.function.st
      push:
        - match: '$'
          pop: true
        - match: '[\w]+\b'
          scope: string.unquoted.st
          pop: true

  state:
    - match: \b(state)\b
      captures:
        1: storage.type.st
      push:
        - meta_scope: meta.state.declaration.st
        - match: '$'
          pop: true
        - match: '{{identifier}}'
          scope: entity.name.function.st
          set:
            - match: '\{'
              scope: punctuation.definition.block.begin.st
              push: state-body
            - include: else-pop

  state-body:
    - meta_scope: meta.state.body.st
    - match: '\}'
      scope: punctuation.definition.block.end.st
      pop: true
    - include: commands
    - include: entry-exit-commands
    - include: states
    - include: anims

  entry-exit-commands:
    - match: '\b(entrycommands|exitcommands)\b'
      scope: keyword.other.st
      push:
        - match: '\}'
          scope: punctuation.section.block.end.st
          pop: true
        - match: '\{'
          scope: punctuation.section.block.begin.st
          embed: scope:source.scr
          embed_scope: source.scr.embedded.st
          escape: '(?=\})'

  states:
    - match: ^\s*\b(states)\b
      captures:
        1: keyword.other.st
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.st
          set:
            - meta_scope: meta.block.st

            - match: '\}'
              scope: punctuation.section.block.end.st
              pop: true

            - match: '^\s*({{identifier}})(?=\s+:)'
              captures:
                1: variable.function.st

            - include: definitions
        - include: else-pop

  anims:
    - match: ^\s*\b(action|legs|torso)\b
      captures:
        1: keyword.other.st
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.st
          set:
            - meta_scope: meta.block.st
            - match: '\}'
              scope: punctuation.section.block.end.st
              pop: true
            - match: '^\s*(?:(none)|([\w]+))(?=\s+:)'
              captures:
                1: constant.language.nil.st
                2: string.unquoted.st
            - include: definitions
        #- include: else-pop
