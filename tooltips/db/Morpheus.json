{
	"abs": {
		"syntax": "abs( Float arg )",
		"description": "Returns the absolute value of int or float.\n(effectively removes any negative sign)",
		"example": "local.absolute = abs -4.5\nprintln local.absolute // Prints: 4.500",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"accuracy": {
		"syntax": "accuracy( Float value )",
		"description": "Set percent to hit.",
		"example": "local.actor accuracy 100\n// Or\nlocal.actor.accuracy = 100\nlocal.accuracy = local.actor.accuracy",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"actionanimend": {
		"syntax": "actionanimend",
		"description": "Called when the action animation has finished.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA"]
	},
	"activate": {
		"syntax": "activate",
		"description": "FuncBeam: Activate the beam.\nUseObject: Allow the useobject to be used.",
		"example": "local.beam activate",
		"class": ["FuncBeam", "UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"activateitem": {
		"syntax": "activateitem( [String mode] )",
		"description": "Activates the item.",
		"example": "local.binoculars activateitem",
		"class": ["InventoryItem"],
		"gamever": ["AA", "SH", "BT"]
	},
	"activatenewweapon": {
		"syntax": "activatenewweapon( [ String handsurf ] )",
		"description": "Activate the new weapon specified by useWeapon.\n'handsurf' allows specifying which hand to use for the player.",
		"example": "local.player activatenewweapon",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"activatepapers": {
		"syntax": "activatepapers",
		"description": "The activation of the papers item.\nUsed in <i>models/items/papers.tik</i>.",
		"example": "local.papers activatepapers",
		"class": ["InventoryItem"],
		"gamever": ["AA", "SH", "BT"]
	},
	"activatesound": {
		"syntax": "ActivateSound( String ActivateSound )",
		"description": "",
		"example": "",
		"class": ["ThrobbingBox_Explosive"],
		"gamever": ["SH", "BT"]
	},
	"activatetrigger": {
		"syntax": "activatetrigger( Entity triggering_entity )",
		"description": "Activates all of the targets for this trigger.",
		"example": "",
		"class": ["Trigger"],
		"gamever": ["AA", "SH", "BT"]
	},
	"activator": {
		"syntax": "activator",
		"description": "Get's entity who last activated this trigger.",
		"example": "",
		"class": ["Trigger"],
		"gamever": ["BT"]
	},
	"active": {
		"syntax": "active",
		"description": "Make the SinkObject active, so that it will respond to players touching it.",
		"example": "",
		"class": ["SinkObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"actor": {
		"syntax": "actor( String modelname, [ String keyname1 ], [ String value1 ], [ String keyname2 ],\n[ String value2 ], [ String keyname3 ], [ String value3 ], [ String keyname4 ], [ String value4 ] )",
		"description": "Spawns an actor in front of the player.",
		"example": "local.player actor \"models/human/allied_pilot.tik\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"actorinfo": {
		"syntax": "actorinfo( Integer actor_entnum )",
		"description": "Prints info on the specified actor.",
		"example": "local.player actorinfo $actor.entnum",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"add": {
		"syntax": "add",
		"description": "Add a new point to the camera path where the player is standing.\nUsed in the \"camera\" menu.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"additionalstartammo": {
		"syntax": "additionalstartammo( String ammotype, Integer amount )",
		"description": "Gives some additional start ammo of the specified type.",
		"example": "local.weapon dm additionalstartammo \"grenade\" 4",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"addkills": {
		"syntax": "addkills( Integer num_kills )",
		"description": "Give or take kills from the player.",
		"example": "// Add 5 kills to player\nlocal.player addkills 5\n// Remove 5 kills from player\nlocal.player addkills -5",
		"class": ["Player"],
		"gamever": ["SH", "BT", "REBORN"]
	},
	"addmusictrigger": {
		"syntax": "addmusictrigger",
		"description": "Add a new music trigger where the player is standing.\nUsed in the \"zound\" menu.",
		"example": "",
		"class": ["SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"addobjective": {
		"syntax": "addobjective( Integer objective_number, Integer status, [ String text ], [ Vector location ] )",
		"description": "Adds/Changes an Objective.",
		"example": "addobjective 2 1 \"Check the door.\" $door.origin\nsetcurrentobjective 2 \"allies\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"addownervelocity": {
		"syntax": "addownervelocity( Boolean bool )",
		"description": "Set whether or not the owner's velocity is added to the projectile's velocity.",
		"example": "local.projectile addownervelocity 0",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"addrandomspeaker": {
		"syntax": "addrandomspeaker",
		"description": "Add a new sound where the player is standing.\nUsed in the \"zound\" menu.",
		"example": "",
		"class": ["SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"addreverbtrigger": {
		"syntax": "addreverbtrigger",
		"description": "Add a new reverb trigger where the player is standing.\nUsed in the \"zound\" menu.",
		"example": "",
		"class": ["SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"addspeaker": {
		"syntax": "addspeaker",
		"description": "Add a new sound where the player is standing.\nUsed in the \"zound\" menu.",
		"example": "",
		"class": ["SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"addvelocity": {
		"syntax": "addvelocity( Float velocity_x, Float velocity_y, Float velocity_z )",
		"description": "Set a velocity to be added to the projectile when it is created.",
		"example": "local.projectile addvelocity 0 0 250",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ai_event": {
		"syntax": "ai_event( [ String type ], [ Float radius ] )",
		"description": "Let the AI know that this entity made a sound.\n'type' is a string specifying what type of sound it is.\n'radius' determines how far the sound reaches.",
		"example": "local.entity ai_event \"grenade\" 384",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ai_off": {
		"syntax": "ai_off",
		"description": "Turns the AI off for this actor.",
		"example": "local.actor ai_off",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ai_on": {
		"syntax": "ai_on",
		"description": "Turns the AI on for this actor.",
		"example": "local.actor ai_on",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ai_visiondistance": {
		"syntax": "ai_visiondistance( Float vision_distance )",
		"description": "Sets the default AI Vision Distance.",
		"example": "$world ai_visiondistance 500",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"aibulletspread": {
		"syntax": "aibulletspread( Float bulletSpreadX, Float bulletSpreadY )",
		"description": "Set the spread of the bullets in the X and Y axis.",
		"example": "local.mg42 aibulletspread 450 275",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"aimat": {
		"syntax": "aimat( String target )",
		"description": "Specify the target to aim at.\n'target' can be anything which has an origin.",
		"example": "local.actor aimat local.target",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"aimoffset": {
		"syntax": "aimoffset( Vector value )",
		"description": "Adjust aiming angles by offset.",
		"example": "local.vehicleTurretGun aimoffset ( 10 0 0 )",
		"class": ["VehicleTurretGun"],
		"gamever": ["SH", "BT"]
	},
	"aimtarget": {
		"syntax": "aimtarget( Entity target )",
		"description": "Set the aim target.",
		"example": "local.strafing_gunfire = spawn script_aimedstrafinggunfire\nlocal.strafing_gunfire aimtarget local.target",
		"class": ["ScriptAimedStrafingGunfire"],
		"gamever": ["SH", "BT"]
	},
	"aimtolerance": {
		"syntax": "aimtolerance( Vector caps )",
		"description": "Sets a tolerance for the angles.",
		"example": "local.vehicleTurretGun aimtolerance ( 0 0 0 )",
		"class": ["VehicleTurretGun"],
		"gamever": ["SH", "BT"]
	},
	"airange": {
		"syntax": "airange( String airange )",
		"description": "Set the range of this gun for the AI: short, medium, long, sniper.",
		"example": "local.weapon airange \"long\"",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"alarm": {
		"syntax": "alarm( Integer alarm_status )",
		"description": "Sets/Gets the global level alarm.\nzero = global level alarm off.\nnon-zero = alarm on.",
		"example": "level.alarm = 1 // alarm on\nprintln level.alarm // Prints: 1",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"alarmnode": {
		"syntax": "alarmnode( [ String value ] )",
		"description": "Sets/Gets the name of the alarm node for the actor (must have type set to alarm for effect).",
		"example": "local.actor alarmnode \"runwayspot\"\n// Or\nlocal.actor.alarmnode = \"runwayspot\"\nlocal.alarmnode = local.actor.alarmnode",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"alarmthread": {
		"syntax": "alarmthread( [ String value ] )",
		"description": "Sets/Gets the name of the alarm thread for the actor (must have type set to alarm for effect).",
		"example": "local.actor alarmthread \"ai_alarm_fired\"\n// Or\nlocal.actor.alarmthread = \"ai_alarm_fired\"\nlocal.alarmthread = local.actor.alarmthread",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"alias": {
		"syntax": "alias( String alias, String realPath, [ String arg1 ], [ String arg2 ],\n[ String arg3 ], [ String arg4 ], [ String arg5 ], [ String arg6 ] )",
		"description": "Create an alias to the specified path.",
		"example": "local.master = spawn \"ScriptMaster\"\nlocal.master alias \"snd_teleport\" \"sound/teleport.wav\"",
		"class": ["ScriptMaster"],
		"gamever": ["AA", "SH", "BT"]
	},
	"aliascache": {
		"syntax": "aliascache( String alias, String realPath, [ String arg1 ], [ String arg2 ], [ String arg3 ], [ String arg4 ],\n[ String arg5 ], [ String arg6 ] )",
		"description": "Create an alias to the specified path and cache the resource.",
		"example": "local.master = spawn \"ScriptMaster\"\nlocal.master aliascache \"headshot\" \"sound/headshot.wav\" soundparms 1.2 0.0 1.0 0.0 300 1000 voice loaded maps \"m dm obj\"",
		"class": ["ScriptMaster"],
		"gamever": ["AA", "SH", "BT"]
	},
	"all_ai_off": {
		"syntax": "all_ai_off",
		"description": "Turns all AI off.",
		"example": "all_ai_off",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"all_ai_on": {
		"syntax": "all_ai_on",
		"description": "Turns all AI back on.",
		"example": "all_ai_on",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"alliesobjnum": {
		"syntax": "alliesObjNum( Integer alliesObjNum )",
		"description": "Sets the objective number for the allies team.",
		"example": "$obj_antenna alliesObjNum 2",
		"class": ["TOWObjective"],
		"gamever": ["SH", "BT"]
	},
	"alpha": {
		"syntax": "alpha( Float newAlpha )",
		"description": "Set the alpha of the entity to newAlpha.\nNOTE: In order to use this command, the entity's shader must have the 'alphaGen entity' statement in it.",
		"example": "local.entity alpha 0.5",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"altcurrent": {
		"syntax": "altcurrent( String alternate_current_mood )",
		"description": "Sets the alternate current mood to use when triggered.",
		"example": "local.triggerMusic altcurrent \"aux1\"",
		"class": ["TriggerMusic"],
		"gamever": ["AA", "SH", "BT"]
	},
	"altfallback": {
		"syntax": "altfallback( String alterante_fallback_mood )",
		"description": "Sets the alternate fallback mood to use when triggered.",
		"example": "local.triggerMusic altfallback \"aux1\"",
		"class": ["TriggerMusic"],
		"gamever": ["AA", "SH", "BT"]
	},
	"altreverblevel": {
		"syntax": "altreverblevel( Float reverbLevel )",
		"description": "Sets the reverb level to be used when triggered.",
		"example": "local.triggerReverb altreverblevel 0.25",
		"class": ["TriggerReverb"],
		"gamever": ["AA", "SH", "BT"]
	},
	"altreverbtype": {
		"syntax": "altreverbtype( Integer reverbType )",
		"description": "Sets the reverb type.",
		"example": "local.triggerReverb altreverbtype 8",
		"class": ["TriggerReverb"],
		"gamever": ["AA", "SH", "BT"]
	},
	"alwaysaway": {
		"syntax": "alwaysaway",
		"description": "Makes the door always open away from the person opening it.",
		"example": "local.door alwaysaway",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"alwaysdraw": {
		"syntax": "alwaysdraw",
		"description": "Sets this entity to always draw.",
		"example": "local.entity alwaysdraw",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"american": {
		"syntax": "american",
		"description": "Makes the sentient an American.",
		"example": "local.sentient american",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ammo": {
		"syntax": "ammo( String type, Integer amount )",
		"description": "Gives the sentient some ammo.\n'type' can be: pistol, rifle, smg, mg, grenade, agrenade, heavy or shotgun.",
		"example": "local.sentient ammo \"grenade\" 5",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ammo_grenade": {
		"syntax": "ammo_grenade( [ Integer grenade_count ] )",
		"description": "Gives the AI some grenades.\nor\nReturns how many grenades an AI has.",
		"example": "local.actor ammo_grenade 3\n// Or\nlocal.actor.ammo_grenade = 3\nlocal.ammo_grenade = local.actor.ammo_grenade",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ammo_in_clip": {
		"syntax": "ammo_in_clip( Integer ammoInClip )",
		"description": "Set the amount of ammo in the clip.",
		"example": "local.weapon ammo_in_clip 10",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ammoentity_postspawn": {
		"syntax": "ammoentity_postspawn",
		"description": "Ammo Entity Post Spawn.",
		"example": "",
		"class": ["AmmoEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ammopickupsound": {
		"syntax": "ammopickupsound( String name )",
		"description": "Sets the weapon's ammo pickup sound alias.",
		"example": "local.weapon ammopickupsound \"snd_pickup_ammo\"",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ammorequired": {
		"syntax": "ammorequired( Integer amount )",
		"description": "Set the amount of ammo this weapon requires to fire.",
		"example": "local.weapon ammorequired 1",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ammotype": {
		"syntax": "ammotype( String name )",
		"description": "Set the type of ammo this weapon uses.",
		"example": "local.weapon ammotype \"rifle\"",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"amount": {
		"syntax": "amount( Integer amount )",
		"description": "Sets the amount of the item.",
		"example": "local.ammo_box amount 24",
		"class": ["Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"angle": {
		"syntax": "angle( Float newAngle )",
		"description": "Sets/Gets the angles of the entity using just one value.\nSets/Gets the yaw of the entity or an up and down direction if 'newAngle' is [0-359] or -1 or -2",
		"example": "local.entity angle 90\n// Or\nlocal.entity.angle = 90\n\nprintln local.entity.angle // Prints: 90.000",
		"class": ["SimpleEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"angles": {
		"syntax": "angles( Vector newAngles )",
		"description": "Sets/Gets the angles of the entity.",
		"example": "local.entity angles ( 0 90 0 )\n// Or\nlocal.entity.angles = ( 0 90 0 )\n\nprintln local.entity.angles // Prints: (0.000000, 90.000000, 0.000000)",
		"class": ["Entity", "SimpleEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"angles_pointat": {
		"syntax": "angles_pointat( Entity parent_entity, Entity entity, Entity target_entity )",
		"description": "Returns the angles that points at the target_entity given\nthe base orientation of the parent_entity and the position of the entity.",
		"example": "local.angles = (angles_pointat NULL local.entity local.target)",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"angles_toforward": {
		"syntax": "angles_toforward( Vector angles )",
		"description": "Returns the forward vector of the specified angles.",
		"example": "local.forward = angles_toforward $player.angles",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"angles_toleft": {
		"syntax": "angles_toleft( Vector angles )",
		"description": "Returns the left vector of the specified angles.",
		"example": "local.left = angles_toleft $player.angles",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"angles_toup": {
		"syntax": "angles_toup( Vector angles )",
		"description": "Returns the up vector of the specified angles.",
		"example": "local.up = angles_toup $player.angles",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"anglespeed": {
		"syntax": "anglespeed( Float speed )",
		"description": "Set the angle speed.",
		"example": "",
		"class": ["ExplodingWall"],
		"gamever": ["AA", "SH", "BT"]
	},
	"anim": {
		"syntax": "anim( String name )",
		"description": "Sets/Play the entity's animation.",
		"example": "local.entity anim \"some_animation\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"anim_attached": {
		"syntax": "anim_attached( String name )",
		"description": "Play attached animation.",
		"example": "local.actor anim_attached \"chair_write\"",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"anim_noclip": {
		"syntax": "anim_noclip( String name )",
		"description": "Play noclip animation.\n\nNOTE: anim_noclip will translate the origin but will not hold onto rotations made in the animation.\nThus, anims using anim_noclip need to start and end with the same set of angles.",
		"example": "local.actor anim_noclip \"death_balcony_intro\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"anim_scripted": {
		"syntax": "anim_scripted( String name )",
		"description": "Play scripted animation.",
		"example": "local.actor anim_scripted \"opel_driver\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"animated_farplane": {
		"syntax": "animated_farplane( Float farplaneStart, Float farplaneEnd, Float ZStart, Float ZEnd )",
		"description": "Set the distance of the far clipping plane based on a farplane range and a Z range.",
		"example": "$world animated_farplane 3500 5000 1650 1888",
		"class": ["World"],
		"gamever": ["SH", "BT"]
	},
	"animated_farplane_bias": {
		"syntax": "animated_farplane_bias( Float biasStart, Float biasEnd, Float ZStart, Float ZEnd )",
		"description": "Set the bias of the far clipping plane based on a bias range and a Z range.",
		"example": "$world animated_farplane_bias -1500 0 1650 1888",
		"class": ["World"],
		"gamever": ["SH", "BT"]
	},
	"animated_farplane_color": {
		"syntax": "animated_farplane_color( Vector colorStart, Vector colorEnd, Float ZStart, Float ZEnd )",
		"description": "Set the color of the far clipping plane based on a color range and a Z range.",
		"example": "$world animated_farplane_color ( 0.6 0.6 0.64 ) ( 0.5 0.5 0.54 ) 1200 1888",
		"class": ["World"],
		"gamever": ["SH", "BT"]
	},
	"animationset": {
		"syntax": "animationSet( String animset )",
		"description": "Sets the Animation Set to use.",
		"example": "local.kingcannon animationSet \"king_\"",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"animdone": {
		"syntax": "animdone",
		"description": "Script model animation has finished.",
		"example": "local.scriptModel waitTill animdone",
		"class": ["ScriptModel"],
		"gamever": ["SH", "BT"]
	},
	"animfinal": {
		"syntax": "animfinal",
		"description": "Whether the animation was succesfully finished.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"animloop": {
		"syntax": "animloop( String name )",
		"description": "Loop animation.",
		"example": "local.actor animloop \"animation_name\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"animloop_legs": {
		"syntax": "animloop_legs",
		"description": "Called when the legs animation has finished.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"animloop_pain": {
		"syntax": "animloop_pain",
		"description": "Called when the pain animation has finished.",
		"example": "",
		"class": ["Player"],
		"gamever": ["SH", "BT"]
	},
	"animloop_torso": {
		"syntax": "animloop_torso",
		"description": "Called when the torso animation has finished.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"animname": {
		"syntax": "animname",
		"description": "Sets/Gets the animname.",
		"example": "local.actor.animname = \"animation_name\"\nlocal.animname = local.actor.animname",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"animscript": {
		"syntax": "animscript( String name )",
		"description": "Play the animation script.",
		"example": "local.actor animscript \"anim/anim.scr\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"animscript_attached": {
		"syntax": "animscript_attached( String name )",
		"description": "Play a noclip animation even when attached.",
		"example": "local.actor animscript_attached \"anim/anim.scr\"",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"animscript_noclip": {
		"syntax": "animscript_noclip( String name )",
		"description": "Play the noclip animation script.",
		"example": "local.actor animscript_noclip \"anim/anim.scr\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"animscript_scripted": {
		"syntax": "animscript_scripted( String name )",
		"description": "Play the scripted animation script.",
		"example": "local.actor animscript_scripted \"anim/anim.scr\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"arc": {
		"syntax": "arc( Float arc )",
		"description": "arc in front of the player",
		"example": "",
		"class": ["ProjectileGenerator_Projectile"],
		"gamever": ["SH", "BT"]
	},
	"arctotarget": {
		"syntax": "arctotarget",
		"description": "Make the projectile follow a normal arc on its way to its target.",
		"example": "local.projectile arctotarget",
		"class": ["Projectile"],
		"gamever": ["SH", "BT"]
	},
	"arena": {
		"syntax": "arena( Integer arena_number )",
		"description": "Set the arena number for this starting position.",
		"example": "",
		"class": ["PlayerDeathmatchStart"],
		"gamever": ["AA", "SH", "BT"]
	},
	"armor": {
		"syntax": "armor( String type, Integer amount )",
		"description": "Gives the sentient some armor.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"armwithweapons": {
		"syntax": "armwithweapons",
		"description": "Give player their primary and secondary weapons.",
		"example": "local.player armwithweapons",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"assert": {
		"syntax": "assert( Float value )",
		"description": "Assert if value is 0.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"atan": {
		"syntax": "atan( Float arg, [ Float arg2 ] )",
		"description": "<b>Reborn</b>: Returns the principal value of the arc tangent of y/x, expressed in radians.\n\n<b>Breakthrough</b>: ArcTangent of float (in degrees, not radians).",
		"example": "// Breakthrough\nlocal.result = atan local.y local.x\n\n// Reborn\nlocal.result = atan local.x\n// Result: Principal arc tangent of x, in the interval [-pi/2,+pi/2] radians.",
		"class": ["ScriptThread"],
		"gamever": ["BT", "REBORN"]
	},
	"attach": {
		"syntax": "attach( Entity parent, String tagname, [ Integer use_angles ] )",
		"description": "Attach this entity to the parent's legs tag called tagname.",
		"example": "local.entity attach local.parent_entity \"origin\" 1",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attachdriverslot": {
		"syntax": "attachDriverSlot( Integer slot, Entity entity )",
		"description": "Attaches an entity to the specified slot.",
		"example": "local.vehicle attachdriverslot 0 local.player",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attachedmodelanim": {
		"syntax": "attachedmodelanim( String tagname, String anim_name, Float crossblend_time, String model_name )",
		"description": "Tells models (or specified model) attached to specified tag to play specified animation.\nCrossblend time doesn't work yet.",
		"example": "local.entity attachedmodelanim \"tag_weapon_left\" \"anim_name\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attachgrenade": {
		"syntax": "attachgrenade",
		"description": "Used only by grenade return animations to tell the code when to attach the grenade to the actor.",
		"example": "local.actor attachgrenade",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attachmodel": {
		"syntax": "attachmodel( String modelname, String tagname, [ Float scale ], [ String targetname ], [ Boolean detach_at_death ],\n[ Float removetime ], [ Float fadeintime ], [ Float fadeoutdelay ], [ Float fadetime ], [ Vector offset ] )",
		"description": "Attach a entity with modelname to this entity to tag called tagname.\nscale - scale of attached entities.\ntargetname - targetname for attached entities.\ndetach_at_death - when entity dies, should this model be detached.\nremovetime - when the entity should be removed, if not specified, never.\nfadeintime - time to fade the model in over.\nfadeoutdelay - time to wait until we fade the attached model out.\nfadeoutspeed - time the model fades out over.\noffset - vector offset for the model from the specified tag.",
		"example": "local.player attachmodel \"models/miscobj/wrench.tik\" \"tag_weapon_right\" 0.75 \"targetname\" 1 -1 -1 -1 -1 ( 1.0 -0.5 0.0 )",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attachpassengerslot": {
		"syntax": "attachPassengerSlot( Integer slot, Entity entity )",
		"description": "Attaches an entity to the specified slot.",
		"example": "local.vehicle attachPassengerSlot 1 local.actor",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attachtohand": {
		"syntax": "attachtohand( String hand )",
		"description": "Attaches an active weapon to the specified hand.",
		"example": "local.actor weaponcommand \"mainhand\" attachtohand \"mainhand\"",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attachtoladder": {
		"syntax": "attachtoladder",
		"description": "Attaches the sentient to a ladder.",
		"example": "local.player attachtoladder",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attachturretslot": {
		"syntax": "attachTurretSlot( Integer slot, Entity entity )",
		"description": "Attaches an entity to the specified slot.",
		"example": "local.vehicle attachturretslot 0 local.player",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attackhandler": {
		"syntax": "attackhandler",
		"description": "Sets/Gets the current script that will handle attack events.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attackmode": {
		"syntax": "attackmode( Integer attackmode )",
		"description": "Sets the attackmode for this spawn entity.",
		"example": "",
		"class": ["Spawn"],
		"gamever": ["AA", "SH", "BT"]
	},
	"attackplayer": {
		"syntax": "attackplayer",
		"description": "Force Actor to attack the player.",
		"example": "local.actor attackplayer",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"auto_active": {
		"syntax": "auto_active( Boolean newActiveState )",
		"description": "Whether or not the auto camera is active.",
		"example": "local.camera auto_active 0",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"auto_join_team": {
		"syntax": "auto_join_team",
		"description": "Join the team with fewer players.",
		"example": "local.player auto_join_team",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"auto_maxfov": {
		"syntax": "auto_maxfov( Float maxFOV )",
		"description": "Sets the maximum FOV that should be used when automatically calculating FOV.",
		"example": "local.camera auto_maxfov 160",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"auto_radius": {
		"syntax": "auto_radius( Float newRadius )",
		"description": "Sets the radius of the automatic camera. (default 512).",
		"example": "local.camera auto_radius 300",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"auto_starttime": {
		"syntax": "auto_starttime( Float newTime )",
		"description": "Sets how long it takes for the camera to be switched to. (default 0.2).",
		"example": "local.camera auto_starttime 1.5",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"auto_state": {
		"syntax": "auto_state( String state1, [ String state2 ], [ String state3 ], [ String state4 ], [ String state5 ], [ String state6 ] )",
		"description": "Sets the states the player needs to be in for this camera to activate.\nAny number of states can be specified and only the first few letters need be specified as well.\nA state of 'pipe' would mean that any player state that started with 'pipe' would trigger this camera.",
		"example": "local.camera auto_state \"STAND\" \"CROUCH_IDLE\"",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"auto_stoptime": {
		"syntax": "auto_stoptime( Float newTime )",
		"description": "Sets how long it takes for the camera switch back to the player. (default 0.2).",
		"example": "local.camera auto_stoptime 1.5",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"autoaim": {
		"syntax": "autoaim",
		"description": "Turn on auto aiming for the weapon",
		"example": "local.weapon autoaim",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"autoputaway": {
		"syntax": "autoputaway( Boolean bool )",
		"description": "Set the weapon to be automatically put away when out of ammo.",
		"example": "local.weapon autoputaway 1",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"avelocity": {
		"syntax": "avelocity( [ String [random|crandom] ], [ Float yaw ], [ String [random|crandom] ],\n[ Float pitch ], [ String [random|crandom] ], [ Float roll ] )",
		"description": "<b>Entity</b>: Gets the angular velocity for this entity.\n<b>Projectile</b>: Set the angular velocity of the projectile.",
		"example": "// Entity\nlocal.angular_velocity = local.entity.avelocity\n\n// Projectile\nlocal.projectile avelocity \"random\" 90 \"random\" 90 60",
		"class": ["Entity", "Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"avoidplayer": {
		"syntax": "avoidplayer( Integer allowavoid )",
		"description": "Set to 0 if this AI shouldn't automatically get out of the way,\nnon-zero if he should.",
		"example": "local.actor avoidplayer 1\nlocal.avoidplayer = local.actor.avoidplayer",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"axisobjnum": {
		"syntax": "axisObjNum( Integer axisObjNum )",
		"description": "Sets the objective number for the axis team.",
		"example": "$obj_antenna axisobjnum 2",
		"class": ["TOWObjective"],
		"gamever": ["SH", "BT"]
	},
	"back_mass": {
		"syntax": "back_mass( Float weight )",
		"description": "Sets the mass of the back of the vehicle.",
		"example": "local.vehicle back_mass 800",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"badplace": {
		"syntax": "badplace( String name, Vector origin, Float radius, [ String team ], [ Float duration ] )",
		"description": "Enables a 'bad place' for AI of team \"american\", \"german\", or (default) \"both\" to avoid, and optionally gives it a duration.",
		"example": "level badplace \"fire\" ( 1300 750 60 ) 700 \"american\" 60.0",
		"class": ["Level"],
		"gamever": ["SH", "BT"]
	},
	"balconyheight": {
		"syntax": "balconyheight( Float height )",
		"description": "Sets/Gets the minimum height a balcony guy must fall to do special balcony death.",
		"example": "local.actor balconyheight 150.0\n// Or\nlocal.actor.balconyheight = 150.0\nlocal.balconyheight = local.actor.balconyheight",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"barreltype": {
		"syntax": "barreltype( String type )",
		"description": "Sets the barrel's type.\nValid settings are: \"water\", \"oil\", \"gas\" and \"empty\"",
		"example": "",
		"class": ["BarrelObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"base_velocity": {
		"syntax": "base_velocity( Vector velocity )",
		"description": "Set the base velocity.",
		"example": "",
		"class": ["ExplodingWall"],
		"gamever": ["AA", "SH", "BT"]
	},
	"beam": {
		"syntax": "beam( String command, [ String arg1 ], [ String arg2 ], [ String arg3 ], [ String arg4 ], [ String arg5 ], [ String arg6 ] )",
		"description": "Send a (FuncBeam) command to the beam of this projectile.",
		"example": "local.projectile beam color \"1 0 0\"\nlocal.projectile beam maxoffset 0.0",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"becomebomb": {
		"syntax": "becomebomb",
		"description": "Make the projectile into a bomb.",
		"example": "local.projectile becomebomb",
		"class": ["Projectile"],
		"gamever": ["SH", "BT"]
	},
	"bedead": {
		"syntax": "bedead",
		"description": "Forces the actor to be instantly and totally dead no death animation is played.",
		"example": "local.actor bedead",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"begincycle": {
		"syntax": "BeginCycle",
		"description": "Startup the cycle..",
		"example": "local.projectile_generator begincycle",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"bind": {
		"syntax": "bind( Entity parent )",
		"description": "Bind this entity to the specified entity.",
		"example": "local.entity bind local.parent_entity",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"blendtime": {
		"syntax": "blendtime",
		"description": "Sets the crossblend time to something other than the default, in seconds.\nGet the crossblend time.",
		"example": "local.actor.blendtime = 0.25\nlocal.blendtime = local.actor.blendtime",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"blockend": {
		"syntax": "blockend",
		"description": "Is the end of the sentient's block.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"blockstart": {
		"syntax": "blockstart",
		"description": "Is the start of the sentient's block.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bloodmodel": {
		"syntax": "bloodmodel( String bloodModel )",
		"description": "Set the model to be used when showing blood.",
		"example": "local.ent bloodmodel \"models/fx/blood_spurt.tik\"",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"blowup": {
		"syntax": "BlowUp",
		"description": "BlowUp…",
		"example": "",
		"class": ["ThrobbingBox_Explosive"],
		"gamever": ["SH", "BT"]
	},
	"bombs_planted": {
		"syntax": "bombs_planted( Integer num )",
		"description": "Sets/Gets the number of bombs that are set.",
		"example": "level bombs_planted 1\n// Or\nlevel.bombs_planted++\n// Or\nlevel.bombs_planted = 1\nlocal.bombs_planted = level.bombs_planted",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bool": {
		"syntax": "bool( Integer value )",
		"description": "Casts value to a bool.",
		"example": "local.boolean = bool local.value",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bounce": {
		"syntax": "bounce",
		"description": "Sent to entity when touched.",
		"example": "",
		"class": ["FallingRock"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bouncebackwardsvelocity": {
		"syntax": "BounceBackwardsVelocity( Integer bStayFullSpeed )",
		"description": "For vehicles on rails that are moving backwards, reverse our velocity.\n(Optionally pass bStayFullSpeed to keep vehicle at full speed after the bounce).",
		"example": "local.vehicle BounceBackwardsVelocity 1",
		"class": ["Vehicle"],
		"gamever": ["BT"]
	},
	"bouncefactor": {
		"syntax": "bouncefactor( Float factor )",
		"description": "Sets how far smoke volumes bounce when they collide with something.",
		"example": "local.smoke_grenade bouncefactor 0.8",
		"class": ["SmokeGrenade"],
		"gamever": ["SH", "BT"]
	},
	"bounceforwardsvelocity": {
		"syntax": "BounceForwardsVelocity( [ Integer NULL ] )",
		"description": "For vehicles on rails that are moving forwards, reverse our velocity.",
		"example": "local.vehicle BounceForwardsVelocity",
		"class": ["Vehicle"],
		"gamever": ["BT"]
	},
	"bouncesound": {
		"syntax": "bouncesound( String sound )",
		"description": "When bouncing, what sound to play on impact.",
		"example": "local.projectile bouncesound \"grenade_bounce_soft\"",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bouncesound_hard": {
		"syntax": "bouncesound_hard( String sound )",
		"description": "Set the name of the sound that is played when the projectile bounces off hard surfaces.",
		"example": "local.projectile bouncesound_hard \"grenade_bounce_hard\"",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bouncesound_metal": {
		"syntax": "bouncesound_metal( String sound )",
		"description": "Set the name of the sound that is played when the projectile bounces off metal.",
		"example": "local.projectile bouncesound_metal \"grenade_bounce_metal\"",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bouncesound_water": {
		"syntax": "bouncesound_water( String sound )",
		"description": "Set the name of the sound that is played when the projectile bounces in water.",
		"example": "local.projectile bouncesound_water \"grenade_bounce_water\"",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bouncesoundchance": {
		"syntax": "bouncesoundchance( Float chance[0.00-1.00] )",
		"description": "When bouncing, the chance that the bounce sound will be played.",
		"example": "",
		"class": ["TossObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bouncetouch": {
		"syntax": "bouncetouch",
		"description": "Make the projectile bounce when it hits a non-damageable solid.",
		"example": "local.projectile bouncetouch",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"breakspecial": {
		"syntax": "breakspecial",
		"description": "Tell AI to break special attack.",
		"example": "local.actor breakspecial",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"brushmodel": {
		"syntax": "brushmodel",
		"description": "Get the brush modelName.",
		"example": "local.brushmodel = local.entity.brushmodel",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bsptransition": {
		"syntax": "bsptransition( String next_map, [ Boolean skipFade ] )",
		"description": "Transitions to the next BSP. Keeps player data, and game data.\n'skipFade' is valid on Breakthrough only",
		"example": "bsptransition \"m2l1\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bulletcount": {
		"syntax": "bulletcount( Float bulletCount )",
		"description": "Set the number of bullets this weapon shoots when fired.",
		"example": "local.weapon bulletcount 1",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bulletdamage": {
		"syntax": "bulletdamage( Float bulletDamage )",
		"description": "Set the damage that the bullet causes.",
		"example": "local.weapon bulletdamage 20",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bulletknockback": {
		"syntax": "bulletknockback( Float bulletKnockback )",
		"description": "Set the knockback that the bullet causes.",
		"example": "local.weapon bulletknockback 50",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bulletlarge": {
		"syntax": "bulletlarge( Integer bulletType )",
		"description": "Set if the bullets fired are rifle bullets(1), artillery(2) or larger tracers(3).",
		"example": "local.weapon bulletlarge 1",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"bulletrange": {
		"syntax": "bulletrange( Float bulletRange )",
		"description": "Set the range of the bullets.",
		"example": "local.weapon bulletrange 4000",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"bulletspread": {
		"syntax": "bulletspread( Float bulletSpreadX, Float bulletSpreadY, [ Float bulletSpreadXmax ], [ Float bulletSpreadYmax ] )",
		"description": "Set the min & optional max spread of the bullet in the x and y axis.",
		"example": "local.weapon bulletspread 53 53 70 70",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"burstfiresettings": {
		"syntax": "burstFireSettings( Float mintime, Float maxtime, Float mindelay, Float maxdelay )",
		"description": "Sets the settings for burst mode firing.",
		"example": "local.turret burstFireSettings 10 15 4 5",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cache": {
		"syntax": "cache( String resourceName )",
		"description": "pre-cache the given resource.",
		"example": "cache \"models/vehicles/jeep.tik\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"calcgrenadetoss": {
		"syntax": "calcgrenadetoss( Vector target_position )",
		"description": "Called to calculate a grenade toss. Must be called before a grenade throwing animation.\nReturns the name of the script to call with animscript if the toss can succeed, or if the toss won't work.\nShould be called infrequently, and never during the middle of a grenade toss.",
		"example": "local.grenadescript = local.actor calcgrenadetoss local.destination",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"calcgrenadetoss2": {
		"syntax": "calcgrenadetoss2( Vector target_position, Float speed )",
		"description": "Called to calculate a grenade toss. Must be called before a grenade throwing animation.\nReturns the name of the script to call with animscript if the toss can succeed, or if the toss won't work.\nShould be called infrequently, and never during the middle of a grenade toss.\nThe speed parameter is optional. Pass a speed if you just want to override and throw no matter what...",
		"example": "",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"callvote": {
		"syntax": "callvote( String arg1, [ String arg2 ] )",
		"description": "Player calls a vote.",
		"example": "local.player callvote \"nextmap\" \"dm/mohdm7\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cam": {
		"syntax": "cam( String command, [ String arg1 ], [ String arg2 ], [ String arg3 ], [ String arg4 ], [ String arg5 ], [ String arg6 ] )",
		"description": "Processes a camera command.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"camera": {
		"syntax": "camera( String cameraPosition )",
		"description": "Set the camera to use when in this animation.\ntopdown, behind, front, side, behind_fixed, side_left, side_right.",
		"example": "",
		"class": ["UseAnim"],
		"gamever": ["AA", "SH", "BT"]
	},
	"camera_think": {
		"syntax": "camera_think",
		"description": "Called each frame to allow the camera to adjust its position.",
		"example": "",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cancelfor": {
		"syntax": "cancelFor( String name )",
		"description": "Cancel for event of type name.",
		"example": "",
		"class": ["Listener"],
		"gamever": ["AA", "SH", "BT"]
	},
	"canhitowner": {
		"syntax": "canhitowner",
		"description": "Make the projectile be able to hit its owner.",
		"example": "local.projectile canhitowner",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"canjump": {
		"syntax": "canjump( Boolean jumpable )",
		"description": "Sets whether or not the vehicle can jump.",
		"example": "local.vehicle canjump 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"canmoveto": {
		"syntax": "canmoveto( Vector position )",
		"description": "Returns a boolean if the AI can move to a point for use in anim scripts.",
		"example": "local.movetoresult = local.actor canmoveto $destination.origin",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cansee": {
		"syntax": "cansee( Entity entity, [ Float fov ], [ Float vision_distance ] )",
		"description": "Returns 1 if the entities can see eachother, 0 if not.",
		"example": "local.result = local.entity1 cansee local.entity2 110 1200",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"canseenoents": {
		"syntax": "canseenoents( Entity entity, [ Float fov ], [ Float vision_distance ] )",
		"description": "Returns 1 if the entities can see eachother, 0 if not ignores any entities between them.",
		"example": "local.result = local.entity1 canseenoents local.entity2",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"canshoot": {
		"syntax": "canshoot( Vector shootOrigin )",
		"description": "Determines if it would be possible to shoot the sentient's enemy from the given position.",
		"example": "local.result = local.actor canshoot local.enemy",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"canshootenemyfrom": {
		"syntax": "canshootenemyfrom( Vector shootOrigin )",
		"description": "Determines if it would be possible to shoot the sentient's enemy from the given position.",
		"example": "local.result = local.actor canshootenemyfrom $location.origin",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cantpartialreload": {
		"syntax": "cantpartialreload",
		"description": "Prevents the weapon from being reloaded part way through a clip.",
		"example": "local.weapon cantpartialreload",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"canuse": {
		"syntax": "canuse( Entity entity )",
		"description": "Returns 1 if passed entity can 'use' this vehicle.",
		"example": "local.result = local.vehicle canuse local.entity",
		"class": ["Vehicle"],
		"gamever": ["BT"]
	},
	"censor": {
		"syntax": "censor",
		"description": "Used to ban certain contact when in parentmode.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"centerprint": {
		"syntax": "centerprint( String stuffToPrint )",
		"description": "Prints the included message in the middle of all player's screens.\n\nNOTE: this command seems to be broken. Use it like in the example.",
		"example": "local.text = \"your_message_without_spaces\"\nlocal.player stufftext (\"centerprint \" + local.text)",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"centroid": {
		"syntax": "centroid",
		"description": "Entity's centroid vector (center of mass).",
		"example": "local.centroid = local.entity.centroid",
		"class": ["SimpleEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"chance": {
		"syntax": "chance( Float chance )",
		"description": "RandomSpeaker: Sets the chance that the sound will play when triggered.\nRunThrough: Sets the chance that the trigger will spawn something.",
		"example": "",
		"class": ["RandomSpeaker"],
		"gamever": ["AA", "SH", "BT"]
	},
	"channel": {
		"syntax": "channel( Integer channel )",
		"description": "Sets the sound channel to play on.",
		"example": "",
		"class": ["TriggerPlaySound"],
		"gamever": ["AA", "SH", "BT"]
	},
	"charge": {
		"syntax": "charge( [ String hand ], [ String mode ] )",
		"description": "Starts the charging of the weapon in the specified hand.",
		"example": "local.sentient charge \"righthand\"",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"chargelife": {
		"syntax": "chargelife",
		"description": "Set the projectile's life to be determined by the charge time.",
		"example": "local.projectile chargelife",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"chargespeed": {
		"syntax": "chargespeed",
		"description": "Set the projectile's speed to be determined by the charge time.",
		"example": "local.projectile chargespeed",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"checkanims": {
		"syntax": "checkanims",
		"description": "Check the animations in the .tik file versus the statefile.\n\n<b>Unused Animations in TIKI</b>, and <b>Unknown Animations in Statefile</b>\nwill be printed to the console.",
		"example": "local.sentient checkanims",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"checkonground": {
		"syntax": "checkonground",
		"description": "Check if exploding wall is on ground.",
		"example": "",
		"class": ["ExplodingWall"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cinematic": {
		"syntax": "cinematic",
		"description": "Turns on cinematic.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"classname": {
		"syntax": "classname( String nameOfClass )",
		"description": "Determines what class to use for this entity (TIKI files).\nThis is pre-processed from the BSP at the start of the level.\n\nGets the entity's classname.",
		"example": "local.class = local.listener.classname",
		"class": ["Listener", "Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"claypidgeon": {
		"syntax": "claypidgeon",
		"description": "Turn the entity into a non-solid shootable thing.",
		"example": "local.entity claypidgeon",
		"class": ["Entity"],
		"gamever": ["BT"]
	},
	"clear_objective_pos": {
		"syntax": "clear_objective_pos",
		"description": "Clears the position of the current objective, for when you don't have one.",
		"example": "clear_objective_pos",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"clearaimtarget": {
		"syntax": "clearAimTarget",
		"description": "Clears the turret's aim target (setAimTarget).",
		"example": "local.turret clearAimTarget",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"clearfade": {
		"syntax": "clearfade",
		"description": "Clear the fade (fadein, fadeout) from the screen.",
		"example": "clearfade",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"clearletterbox": {
		"syntax": "clearletterbox( Float time )",
		"description": "Clears letterbox mode.",
		"example": "clearletterbox 3",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"clearowner": {
		"syntax": "clearowner",
		"description": "Make the projectile be able to hit its owner now.",
		"example": "local.projectile clearowner",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"clip_add": {
		"syntax": "clip_add( Integer ammoAmount )",
		"description": "Add to the weapons ammo clip with ammo from its owner.",
		"example": "local.weapon clip_add 1",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"clip_empty": {
		"syntax": "clip_empty",
		"description": "Empties the weapon's clip of ammo, returning it to the owner.",
		"example": "local.weapon clip_empty",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"clip_fill": {
		"syntax": "clip_fill",
		"description": "Fills the weapons ammo clip with ammo from its owner.",
		"example": "local.weapon clip_fill",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"clipsize": {
		"syntax": "clipsize( Integer ammoClipSize )",
		"description": "Set the amount of rounds a clip of the weapon holds.",
		"example": "local.weapon clipsize 10",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"clockside": {
		"syntax": "clockside( String axis_allies_draw_kills )",
		"description": "Sets/Gets which side the clock is on...\n\"axis\" or \"allies\" win when time is up,\n\"kills\" gives the win to the team with more live members,\n\"draw\" no one wins.",
		"example": "level clockside \"axis\"\n// Or\nlevel.clockside = \"axis\"\nprintln level.clockside // Prints: \"axis\"",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"close": {
		"syntax": "close",
		"description": "Closes the door.",
		"example": "local.door close",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"closeportal": {
		"syntax": "closeportal",
		"description": "Close the area portal enclosed in this object.",
		"example": "local.script_object closeportal",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cnt": {
		"syntax": "cnt( Integer count )",
		"description": "Set the amount of times this trigger can be triggered.",
		"example": "local.trigger cnt 3",
		"class": ["Trigger"],
		"gamever": ["AA", "SH", "BT"]
	},
	"collisionent": {
		"syntax": "collisionent( Entity entity )",
		"description": "Sets/Gets the Collision Entity (script model of collision hull)",
		"example": "$vehicle collisionent $vehicle_collision\n// Or\n$vehicle.collisionent = $vehicle_collision\nlocal.collisionent = $vehicle.collisionent",
		"class": ["Vehicle", "VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"color": {
		"syntax": "color( Vector beam_color )",
		"description": "Set the color of the beam.\nColor values are set in a scale from 0.0 to 1.0.",
		"example": "local.beam color ( 1.0 0.0 0.0 )",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"commanddelay": {
		"syntax": "commanddelay( Float delay, String command, [ String [arg1] ], [ String [arg2] ], [ String [arg3] ],\n[ String [arg4] ], [ String [arg5] ], [ String [arg6] ] ), [ … ]",
		"description": "Executes a command after the given delay.",
		"example": "local.entity commanddelay 3.0 playsound \"alarm\"",
		"class": ["Listener"],
		"gamever": ["AA", "SH", "BT"]
	},
	"complete": {
		"syntax": "complete",
		"description": "Complete this objective.",
		"example": "$Objective1 complete",
		"class": ["Objective"],
		"gamever": ["SH", "BT"]
	},
	"cone": {
		"syntax": "cone( Float newTriggerCone )",
		"description": "Sets the cone in which directed triggers will trigger.",
		"example": "",
		"class": ["Trigger", "UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"connect_paths": {
		"syntax": "connect_paths",
		"description": "Connects all navigation paths which intersect with the specified entity's volume.",
		"example": "local.entity connect_paths",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"constantdamage": {
		"syntax": "constantdamage",
		"description": "Makes the explosion do constant damage over the radius.",
		"example": "local.explosion constantdamage",
		"class": ["Explosion"],
		"gamever": ["AA", "SH", "BT"]
	},
	"continue": {
		"syntax": "continue",
		"description": "<b>ScriptThread</b>: The continue statement is used inside loops.\nWhen a continue statement is encountered inside a loop,\ncontrol jumps to the beginning of the loop for next iteration,\nskipping the execution of statements inside\nthe body of loop for the current iteration.\n\n<b>Camera</b>: Continue the camera movement.",
		"example": "local.camera continue",
		"class": ["Camera", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"controlledby": {
		"syntax": "ControlledBy( Integer TeamNum )",
		"description": "Sets the team controlling the objective.\n\nNOTE: For objective function calls 'ControlledBy', 'TakeOver' and 'SetCurrent', the teams are as such:\n0 = Axis\n1 = Allies\n2 = Neutral",
		"example": "$objective1 ControlledBy 0",
		"class": ["TOWObjective"],
		"gamever": ["SH", "BT"]
	},
	"convergetime": {
		"syntax": "convergeTime( Float time )",
		"description": "Sets the convergence time.",
		"example": "local.turret convergetime 0.25",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"cooktime": {
		"syntax": "cooktime( Float cooktime )",
		"description": "Sets weapons cook time.",
		"example": "local.grenade cooktime 5.5",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"coord": {
		"syntax": "coord",
		"description": "Prints out current location and angles.",
		"example": "$player coord",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"correctweaponattachments": {
		"syntax": "correctweaponattachments",
		"description": "Makes sure the weapon is properly attached when interupting a reload.",
		"example": "local.player correctweaponattachments",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cos": {
		"syntax": "cos( Float x )",
		"description": "<b>Reborn</b>: Returns the cosine of an angle of x radians.\n\n<b>Breakthrough</b>: Cosine of float (expects degrees not radians).",
		"example": "local.result = cos local.x",
		"class": ["ScriptThread"],
		"gamever": ["BT", "REBORN"]
	},
	"count": {
		"syntax": "count( Integer newCount )",
		"description": "UseAnim: Sets how many times the UseAnim can be triggered.\nUseObject: Sets how many times the UseObject can be triggered.",
		"example": "",
		"class": ["UseAnim", "UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"crawlto": {
		"syntax": "crawlto( String dest )",
		"description": "Specify the location to crawl to.",
		"example": "level.actor crawlto $node",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"createlistener": {
		"syntax": "CreateListener",
		"description": "Creates a Listener instance (SimpleArchivedEntity).",
		"example": "local.listener = local CreateListener",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"crosshair": {
		"syntax": "crosshair( Boolean bool )",
		"description": "Turn on/off the crosshair for this weapon.",
		"example": "local.weapon crosshair 1",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"crouchto": {
		"syntax": "crouchto( String dest )",
		"description": "Specify the location to crouch to.",
		"example": "level.actor crouchto $node",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cuecamera": {
		"syntax": "cuecamera( Entity entity, [ Float switchTime ] )",
		"description": "Cue the camera.\nIf switchTime is specified, then the camera will switch over that length of time.",
		"example": "cuecamera $watch_camera 3.0",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cueplayer": {
		"syntax": "cueplayer( [ Float switchTime ] )",
		"description": "Go back to the normal camera.\nIf switchTime is specified, then the camera will switch over that length of time.",
		"example": "cueplayer 3.0",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"curiousoff": {
		"syntax": "curiousoff",
		"description": "Turn off an actor's curious state.",
		"example": "local.actor curiousoff",
		"class": ["Actor"],
		"gamever": ["BT"]
	},
	"curiouson": {
		"syntax": "curiouson",
		"description": "Turn on an actor's curious state.",
		"example": "local.actor curiouson",
		"class": ["Actor"],
		"gamever": ["BT"]
	},
	"current": {
		"syntax": "current( String current_mood )",
		"description": "Sets the current mood to use when triggered.",
		"example": "",
		"class": ["TriggerMusic"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cut": {
		"syntax": "cut",
		"description": "Switch camera states immediately, do not transition.",
		"example": "$camera cut",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"cycles": {
		"syntax": "Cycles( Integer Cycles )",
		"description": "Number of cycles (ProjectileGenerator).\n0 = infinte\nDefault = 0",
		"example": "local.projectile_generator cycles 6",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"damage": {
		"syntax": "damage( Entity attacker, Integer damage, Entity inflictor, Vector position, Vector direction,\nVector normal, Integer knockback, Integer damageflags, Integer meansofdeath, Integer location )",
		"description": "General damage event used by all entities.",
		"example": "local.ent_victim damage local.ent_attacker 100 local.ent_inflictor ( 0 0 0 ) ( 0 270 0 ) ( 0 0 0 ) 0 5 0 0",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"damage_multiplier": {
		"syntax": "damage_multiplier( Float damage_multiplier )",
		"description": "Sets the current damage multiplier.",
		"example": "local.player damage_multiplier 1.25",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"damage_type": {
		"syntax": "damage_type( String newDamageType )",
		"description": "Sets what kind of damage is needed to activate the trigger.",
		"example": "local.useobject damage_type \"crush\"",
		"class": ["UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"damageable": {
		"syntax": "damageable( Boolean isDamageable )",
		"description": "Makes the trigger able to take damage, but it is up to the script to watch this damage.",
		"example": "",
		"class": ["TriggerLandmine"],
		"gamever": ["BT"]
	},
	"damageagain": {
		"syntax": "damageagain",
		"description": "This event is generated each frame if explosion is set to damage each frame.",
		"example": "local.explosion damageagain",
		"class": ["Explosion"],
		"gamever": ["AA", "SH", "BT"]
	},
	"damageeveryframe": {
		"syntax": "damageeveryframe",
		"description": "Makes the explosion damage every frame.",
		"example": "local.explosion damageeveryframe",
		"class": ["Explosion"],
		"gamever": ["AA", "SH", "BT"]
	},
	"damagemult": {
		"syntax": "damagemult( Integer location, Float multiplier )",
		"description": "Sets the damage multiplier for a particular body location.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"damagepuff": {
		"syntax": "damagepuff( Vector position, Vector direction )",
		"description": "Spawns a puff of 'blood' smoke at the speficied location in the specified direction.",
		"example": "local.actor damagepuff local.position local.direction",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"damagesounds": {
		"syntax": "damagesounds( Integer on_off )",
		"description": "Makes the vehicle play damaged sounds.",
		"example": "local.vehicle damagesounds 1",
		"class": ["Vehicle"],
		"gamever": ["SH", "BT"]
	},
	"damagetype": {
		"syntax": "damagetype( String damageType )",
		"description": "Sets the type of damage a TriggerHurt delivers.",
		"example": "local.trigger_hurt damagetype \"fire\"",
		"class": ["TriggerHurt"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dampening": {
		"syntax": "dampening( Float newDampening )",
		"description": "Fulcrum: Dampening of Fulcrum.\nSinkObject: Dampening of SinkObject.",
		"example": "",
		"class": ["Fulcrum", "SinkObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"deactivate": {
		"syntax": "deactivate",
		"description": "FuncBeam: Deactivate the beam.\nUseObject: Do not allow the useobject to be used.",
		"example": "local.beam deactivate\nlocal.useobject deactivate",
		"class": ["FuncBeam", "UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"deactivateweapon": {
		"syntax": "deactivateweapon( String side )",
		"description": "Deactivate the weapon in the specified hand.",
		"example": "local.player deactivateweapon \"righthand\"",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dead": {
		"syntax": "dead",
		"description": "Called when the player is dead.",
		"example": "local.player dead",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"deadbody": {
		"syntax": "deadbody",
		"description": "Spawn a dead body.",
		"example": "local.player deadbody",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"deathembalm": {
		"syntax": "deathembalm",
		"description": "Preps the dead actor for turning nonsolid gradually over time.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"deathhandler": {
		"syntax": "deathhandler",
		"description": "Sets/Gets the current script that will handle death events.",
		"example": "local.actor.deathhandler = \"anim/killed.scr\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"deathsinkeachframe": {
		"syntax": "deathsinkeachframe",
		"description": "Makes the entity sink into the ground and then get removed (this gets called each frame).",
		"example": "local.entity deathsinkeachframe",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"deathsinkstart": {
		"syntax": "deathsinkstart",
		"description": "Makes the entity sink into the ground and then get removed (this starts it).",
		"example": "local.entity deathsinkstart",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"debrismodel": {
		"syntax": "debrismodel( String debrisModel )",
		"description": "What kind of debris to spawn when triggered.",
		"example": "local.explodeobject debrismodel \"models/fx/debris.tik\"",
		"class": ["ExplodeObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"debristype": {
		"syntax": "debristype( Integer type )",
		"description": "Sets the debris type of the crate/window. (Default is 0).\n\nWindow debristype:\n0: clear glass Window.\n1: colored glass Window.\n\nCrate debristype:\n0: wooden crate 32 units to a side.\n1: wooden crate 64 units to a side.\n2: cardboard crate 16 units to a side.\n3: cardboard crate 32 units to a side.",
		"example": "$window1 debristype 1",
		"class": ["CrateObject", "WindowObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"debug_int3": {
		"syntax": "debug_int3",
		"description": "Generate an asm int 3.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["SH", "BT"]
	},
	"debugline": {
		"syntax": "debugline( Vector start, Vector end, [ Float red ], [ Float green ], [ Float blue ], [ Float alpha ] )",
		"description": "Draws a debug line from start to end using the given color and alpha for g_numdebuglinedelays server frames.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["SH", "BT"]
	},
	"defaultnonvislevel": {
		"syntax": "defaultnonvislevel",
		"description": "Updates the default value for 'nonvislevel'",
		"example": "local.actor defaultnonvislevel 0.25",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"delay": {
		"syntax": "delay( Float delay )",
		"description": "FuncBeam: Set the amount of delay on the beam updater.\nRunThrough: Time between RunThrough being activated.\nSinkObject: Delay until SinkObject starts falling.\nTrigger: Set the delay time (time between triggering and firing) for this trigger.",
		"example": "local.trigger delay 2.5",
		"class": ["FuncBeam", "RunThrough", "SinkObject", "Trigger"],
		"gamever": ["AA", "SH", "BT"]
	},
	"delaythrow": {
		"syntax": "delaythrow( String label )",
		"description": "Internal usage.",
		"example": "",
		"class": ["Listener", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"delete": {
		"syntax": "delete",
		"description": "Removes this listener immediately.",
		"example": "local.listener delete",
		"class": ["Listener"],
		"gamever": ["AA", "SH", "BT"]
	},
	"destroymodel": {
		"syntax": "DestroyModel( String DestroyModel )",
		"description": "",
		"example": "",
		"class": ["ThrobbingBox_Explosive"],
		"gamever": ["SH", "BT"]
	},
	"detach": {
		"syntax": "detach",
		"description": "Detach this entity from its parent.",
		"example": "local.entity detach",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"detachallchildren": {
		"syntax": "detachallchildren",
		"description": "Detach all the children from the entity.",
		"example": "local.entity detachallchildren",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"detachdriverslot": {
		"syntax": "DetachDriverSlot( Integer slot, [ Vector exit_position ] )",
		"description": "Detaches an entity to the specified slot.",
		"example": "local.vehicle DetachDriverSlot 0 local.driver.origin",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"detachgrenade": {
		"syntax": "detachgrenade",
		"description": "Used only by grenade return animations to tell the code when to throw the grenade.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"detachpassengerslot": {
		"syntax": "DetachPassengerSlot( Integer slot, [ Vector exit_position ] )",
		"description": "Detaches an entity to the specified slot.",
		"example": "local.vehicle DetachPassengerSlot 1 local.passenger.origin",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"detachturretslot": {
		"syntax": "DetachTurretSlot( Integer slot, [ Vector exit_position ] )",
		"description": "Detaches an entity to the specified slot.",
		"example": "local.vehicle DetachTurretSlot 0",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"detail": {
		"syntax": "detail",
		"description": "game.detail\nReturns the \"detail\" cvar.",
		"example": "println game.detail // Prints: 1.000",
		"class": ["Game"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dialogneeded": {
		"syntax": "dialogneeded( String dialog_needed )",
		"description": "Sets the dialog needed string.",
		"example": "",
		"class": ["Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dieinwater": {
		"syntax": "dieinwater",
		"description": "Make the projectile die when gets wet.",
		"example": "local.projectile dieinwater",
		"class": ["Projectile"],
		"gamever": ["BT"]
	},
	"disablespawn": {
		"syntax": "disablespawn",
		"description": "Forbids spawning from this spawnpoint.",
		"example": "",
		"class": ["PlayerStart"],
		"gamever": ["AA", "SH", "BT"]
	},
	"disconnect_paths": {
		"syntax": "disconnect_paths",
		"description": "Disconnects all navigation paths which intersect with the specified entity's volume.",
		"example": "local.entity disconnect_paths",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"disguise_accept_thread": {
		"syntax": "disguise_accept_thread( String label )",
		"description": "Sets/Gets the name of the thread for the actor to start when accepting papers.",
		"example": "local.actor disguise_accept_thread \"label\"\n// Or\nlocal.actor.disguise_accept_thread = \"label\"\nlocal.get_thread = local.actor.disguise_accept_thread",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"disguise_level": {
		"syntax": "disguise_level( Integer value )",
		"description": "Sets/Gets the disguise level of the actor.\nMay be 1 or 2.",
		"example": "local.actor disguise_level 1\n// Or\nlocal.actor.disguise_level = 1\nlocal.disguise_level = local.actor.disguise_level",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"disguise_period": {
		"syntax": "disguise_period( Float period_in_seconds )",
		"description": "Sets/Gets the time between the end of one disguise behavior and start of the next.",
		"example": "local.actor disguise_period 30\n// Or\nlocal.actor.disguise_period = 30\nlocal.period = local.actor.disguise_period",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"disguise_range": {
		"syntax": "disguise_range( Float range_in_units )",
		"description": "Sets/Gets the maximum distance for disguise behavior to get triggered.",
		"example": "local.actor disguise_range 1000\n// Or\nlocal.actor.disguise_range = 1000\nlocal.range = local.actor.disguise_range",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"distancetoenemy": {
		"syntax": "distancetoenemy",
		"description": "Get the distance from the Actor to its enemy.",
		"example": "local.distance = local.actor.distancetoenemy",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dlight": {
		"syntax": "dlight( Float red, Float green, Float blue, Float intensity )",
		"description": "Set the color and intensity of the dynamic light on the projectile.",
		"example": "local.projectile dlight 0.4 0.2 0.1 256",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dm": {
		"syntax": "dm( String command, [ String parms ] )",
		"description": "Makes a command be executed only in multiplayer.",
		"example": "local.weapon dm bulletrange 4000",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"dmammorequired": {
		"syntax": "dmammorequired( Integer amount )",
		"description": "Set the amount of ammo this weapon requires to fire for multiplayer.",
		"example": "local.weapon dmammorequired 1",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmamount": {
		"syntax": "dmamount( Integer amount )",
		"description": "Sets the amount of the item for multiplayer.",
		"example": "local.ammobox dmamount 24",
		"class": ["Item"],
		"gamever": ["AA"]
	},
	"dmbulletcount": {
		"syntax": "dmbulletcount( Float bulletCount )",
		"description": "Set the number of bullets this weapon shoots when fired for multiplayer.",
		"example": "local.weapon dmbulletcount 1",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmbulletdamage": {
		"syntax": "dmbulletdamage( Float bulletDamage )",
		"description": "Set the damage that the bullet causes for multiplayer.",
		"example": "local.weapon dmbulletdamage 45",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmbulletrange": {
		"syntax": "dmbulletrange( Float bulletRange )",
		"description": "Set the range of the bullets for multiplayer.",
		"example": "local.weapon dmbulletrange 4000",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmbulletspread": {
		"syntax": "dmbulletspread( Float bulletSpreadX, Float bulletSpreadY, [ Float bulletSpreadXmax ], [ Float bulletSpreadYmax ] )",
		"description": "Set the min & optional max spread of the bullet in the x and y axis for multiplayer.",
		"example": "local.weapon dmbulletspread 12 12 52 52",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmcantpartialreload": {
		"syntax": "dmcantpartialreload",
		"description": "Prevents the weapon from being reloaded part way through a clip for multiplayer.",
		"example": "local.weapon dmcantpartialreload",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmcrosshair": {
		"syntax": "dmcrosshair( Boolean bool )",
		"description": "Turn on/off the crosshair for this weapon for multiplayer.",
		"example": "local.weapon dmcrosshair 1",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmdeathdrop": {
		"syntax": "dmdeathdrop",
		"description": "Drops the player inventory in DM after's he's been killed.",
		"example": "local.player dmdeathdrop",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dmfiredelay": {
		"syntax": "dmfiredelay( Float FireDelay )",
		"description": "Set the minimum time between shots from the weapon for multiplayer.",
		"example": "local.weapon dmfiredelay 0.086",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmfirespreadmult": {
		"syntax": "dmfirespreadmult( Float scaleadd, Float falloff, Float cap, Float maxtime )",
		"description": "Sets a time decayed multiplyer to spread when the weapon is fired for multiplayer.",
		"example": "local.weapon dmfirespreadmult 0.35 0.65 160 0.7",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmg": {
		"syntax": "dmg( Integer damage )",
		"description": "Door: Sets the amount of damage the door will do to entities that get stuck in it.\nExploder: Sets the damage the explosion does.\nExplodingWall: Sets the damage from the exploding wall.\nFallingRock: Sets the damage from the rock.\nMultiExploder: Sets the damage the explosion does.\nPushObject: Set the damage.\nScriptSlave: Set the damage.",
		"example": "$door dmg 25",
		"class": ["Door", "Exploder", "ExplodingWall", "FallingRock", "MultiExploder", "PushObject", "ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dmlife": {
		"syntax": "dmlife( Float projectileLife )",
		"description": "Set the life of the projectile in multiplayer.",
		"example": "local.projectile dmlife 3.0",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dmmaxamount": {
		"syntax": "dmmaxamount( Integer max_amount )",
		"description": "Sets the max amount of the item for multiplayer.",
		"example": "",
		"class": ["Item"],
		"gamever": ["AA"]
	},
	"dmmessage": {
		"syntax": "dmmessage( Integer mode, String stuffstrings )",
		"description": "Sends a multiplayer message to the appropriate players.\n\nModes:\n-1 = Team chat ('sayteam' command).\n 0 = Global chat ('say' command)\n 1 = Private chat ('sayprivate', 'sayone' command).",
		"example": "local.player dmmessage 0 \"Hello World!\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dmmovementspeed": {
		"syntax": "dmmovementspeed( Float speedmult )",
		"description": "Alters the movement speed of the player when he has the weapon out for multiplayer.",
		"example": "local.weapon dmmovementspeed 0.89",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmprojectile": {
		"syntax": "dmprojectile( String projectileModel )",
		"description": "Set the model of the projectile that this weapon fires in multiplayer.",
		"example": "local.weapon dmprojectile \"models/projectiles/bazookashell_dm.tik\"",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmrealism": {
		"syntax": "dmrealism( String command, [ String parms ] )",
		"description": "Makes a command be executed only in miltiplayer realism mode.",
		"example": "local.weapon dmrealism tracerfrequency 0",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"dmrespawning": {
		"syntax": "dmrespawning( Integer allow_respawn )",
		"description": "Set to 1 to turn on wave-based DM, to 0 to disable respawns within a round.\nReturns 1 if wave-based DM, 0 if respawns are disabled within a round.",
		"example": "level dmrespawning 0\n// Or\nlevel.dmrespawning = 0\nprintln level.dmrespawning // Prints: 0",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dmroundlimit": {
		"syntax": "dmroundlimit( Integer roundlimit )",
		"description": "Sets the default roundlimit, in minutes; can be overridden by 'roundlimit' cvar.\nGets the actual roundlimit, in minutes; may be 'roundlimit' cvar or the default round limit.",
		"example": "level dmroundlimit 6\n// Or\nlevel.dmroundlimit = 6\nprintln level.dmroundlimit // Prints: 6",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dmstartammo": {
		"syntax": "dmstartammo( Integer amount )",
		"description": "Set the starting ammo of this weapon for multiplayer.",
		"example": "local.weapon dmstartammo 200",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"dmteam": {
		"syntax": "dmteam",
		"description": "Returns \"allies\", \"axis\", \"spectator\", or \"freeforall\".",
		"example": "local.team = local.player.dmteam",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dmzoomspreadmult": {
		"syntax": "dmzoomspreadmult( Float scale )",
		"description": "Sets the spread multiplier for when using the zoom on a zooming weapon for multiplayer.",
		"example": "local.weapon dmzoomspreadmult 0.055",
		"class": ["Weapon"],
		"gamever": ["AA"]
	},
	"doactivate": {
		"syntax": "doActivate( Entity activatingEntity )",
		"description": "General trigger event for all entities.",
		"example": "$alarmtrig doactivate $player",
		"class": ["Actor", "Camera", "Door", "FallingRock", "FuncBeam", "Objective", "ProjectileGenerator", "RandomSpawn", "ScriptSlave", "Spawn", "Trigger", "TriggerAll"],
		"gamever": ["AA", "SH", "BT"]
	},
	"doblocked": {
		"syntax": "doBlocked( Entity obstacle )",
		"description": "Sent to entity when blocked.",
		"example": "",
		"class": ["Door", "DrivableVehicle", "PushObject", "ScriptSlave", "Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"doclose": {
		"syntax": "doclose",
		"description": "Closes the door (special doors).",
		"example": "$RotatingDoor doclose",
		"class": ["RotatingDoor", "ScriptDoor", "SlidingDoor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dog": {
		"syntax": "dog( [ Integer god_mode ] )",
		"description": "Sets the god mode cheat or toggles it.",
		"example": "local.player dog",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"doinit": {
		"syntax": "doinit",
		"description": "Sets up the script door.",
		"example": "",
		"class": ["ScriptDoor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dojitter": {
		"syntax": "dojitter( Float (optional) )",
		"description": "Apply the jitter without firing.",
		"example": "local.turret dojitter",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"donedeath": {
		"syntax": "donedeath",
		"description": "Makes the view jitter only happen once.",
		"example": "local.viewjitter donedeath",
		"class": ["ViewJitter"],
		"gamever": ["AA", "SH", "BT"]
	},
	"donefiring": {
		"syntax": "donefiring",
		"description": "Signals the end of the fire animation.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"donereloading": {
		"syntax": "donereloading",
		"description": "Signals the end of the reload animation.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dontdrophealth": {
		"syntax": "dontdrophealth",
		"description": "dontdrophealth Setter/Getter.",
		"example": "",
		"class": ["AISpawnPoint"],
		"gamever": ["BT"]
	},
	"dontdropweapons": {
		"syntax": "dontdropweapons",
		"description": "<b>Sentient</b>: Make the sentient not drop weapons.\n<b>AISpawnPoint</b>: dontdropweapons getter.",
		"example": "// Sentient\nlocal.sentient dontdropweapons\n\n// AISpawnPoint\nlocal.result = local.AISpawnPoint.dontdropweapons",
		"class": ["AISpawnPoint", "Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"doopen": {
		"syntax": "doopen( Entity other )",
		"description": "Opens the door (special doors).",
		"example": "local.door doopen $world",
		"class": ["RotatingDoor", "ScriptDoor", "SlidingDoor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"door_triggerfield": {
		"syntax": "door_triggerfield( Entity other )",
		"description": "Is called when a doors trigger field is touched.",
		"example": "",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"doorclosed": {
		"syntax": "doorclosed",
		"description": "Called when the door finishes closing.",
		"example": "",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dooropened": {
		"syntax": "dooropened",
		"description": "Called when the door finishes opening.",
		"example": "",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"doortype": {
		"syntax": "doortype( String door_type )",
		"description": "Sets the defaults for this door.\n\nDoor types:\n\"wood\" (default).\n\"metal\".",
		"example": "",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"doroundtransition": {
		"syntax": "doroundtransition",
		"description": "Delayed function call to (possibly) determine round winner and restart next round.",
		"example": "local.dm_manager = spawn \"DM_Manager\"\nlocal.dm_manager doroundtransition",
		"class": ["DM_Manager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dotouch": {
		"syntax": "doTouch( Entity touchingEntity )",
		"description": "Sent to entity when touched.\n\nClasses:\nDrivableVehicle, Emitter, ExplodingWall, FallingRock, Fulcrum, Gib, Projectile, PuffDaddy, RunThrough, ScriptSlave,\nSinkObject, ThrowObject, TossObject, Trigger, TriggerAll, TriggerHurt, TriggerNoDamage, UseAnim, Vehicle.",
		"example": "",
		"class": ["…"],
		"gamever": ["AA", "SH", "BT"]
	},
	"douse": {
		"syntax": "doUse( Entity activatingEntity )",
		"description": "Sent to entity when it is used by another entity.\n\nClasses:\nDoor, Item, ScriptSlave, ThrobbingBox_Explosive, ThrobbingBox_Stickybomb,\nTriggerCameraUse, TriggerUse, TurretGun, Vehicle, VehicleTurretGun",
		"example": "",
		"class": ["…"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dprintln": {
		"syntax": "dprintln( String string, [ String string ], [ String string ], … )",
		"description": "Prints a debug string, followed by a newline.",
		"example": "dprintln \"Entity Number: \" local.entity.entnum",
		"class": ["ScriptThread"],
		"gamever": ["SH", "BT"]
	},
	"drawhud": {
		"syntax": "drawhud( Integer value )",
		"description": "Specfiy if hud is to be drawn:\n\n0 = draws nothing.\n1 = draws all.\n2 = draws all minus the weapons bar.",
		"example": "drawhud 0",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"drivable": {
		"syntax": "drivable",
		"description": "Make the vehicle drivable.",
		"example": "local.vehicle drivable",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"drive": {
		"syntax": "drive( Vector position, Float speed, Float acceleration, Float reach_distance, Float look_ahead, [ Vector alternate_position ] )",
		"description": "Makes the vehicle drive to position with speed and acceleration until reached_distance close to position.",
		"example": "local.vehicle drive $path 200 50 200 256\nlocal.vehicle waittill drive",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"drivenowait": {
		"syntax": "driveNoWait( Vector position, Float speed, Float acceleration, Float reach_distance, Float look_ahead )",
		"description": "Makes the vehicle drive to position with speed and acceleration until reached_distance close to position.\nthread doesn't wait.",
		"example": "local.vehicle driveNoWait NULL 500 50 400 200",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dropitems": {
		"syntax": "dropitems",
		"description": "Drops inventory items.",
		"example": "local.sentient dropitems",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"droptofloor": {
		"syntax": "droptofloor( [ Float maxRange ] )",
		"description": "Drops the entity to the ground.\nif maxRange is not specified, 8192 is used.",
		"example": "local.entity droptofloor",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"dropturret": {
		"syntax": "dropturret",
		"description": "Makes the carryable turret have itself dropped.",
		"example": "local.carryableTurret dropturret",
		"class": ["CarryableTurret"],
		"gamever": ["SH", "BT"]
	},
	"drunk": {
		"syntax": "drunk( Float amount, Float rate )",
		"description": "Make the projectile drunk.",
		"example": "local.projectile drunk 0.12 0.12",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"duckableglue": {
		"syntax": "duckableglue( Entity parent, [ Integer glueAngles ] )",
		"description": "Glue this entity to the specified entity, but allow ducking.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["BT"]
	},
	"dumb": {
		"syntax": "dumb",
		"description": "Make Actor dumb.",
		"example": "local.actor dumb",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"duration": {
		"syntax": "duration( Float duration )",
		"description": "MultiExploder: Sets the duration of the explosion.\nViewJitter: Sets the length of time it should last. 0 will be instantanious.",
		"example": "local.viewjitter duration 2.5",
		"class": ["MultiExploder", "ViewJitter"],
		"gamever": ["AA", "SH", "BT"]
	},
	"earthquake": {
		"syntax": "earthquake( Float duration, Float magnitude, Float no_rampup, Float no_rampdown )",
		"description": "Create an earthquake.",
		"example": "earthquake 2.5 10 0 0",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"edgeeffect": {
		"syntax": "edgeeffect( Float fraction )",
		"description": "Sets the fraction of the jitter to apply at the max radius.",
		"example": "local.viewjitter edgeeffect 33.3",
		"class": ["ViewJitter"],
		"gamever": ["AA", "SH", "BT"]
	},
	"edgetriggered": {
		"syntax": "edgetriggered( Boolean newEdgeTriggered )",
		"description": "If true, trigger will only trigger when object enters trigger, not when it is inside it.",
		"example": "local.trigger edgetriggered 1",
		"class": ["Trigger"],
		"gamever": ["AA", "SH", "BT"]
	},
	"effects": {
		"syntax": "effects( [ String parameter1 ], [ String parameter2 ], [ String parameter3 ],\n[ String parameter4 ], [ String parameter5 ], [ String parameter6 ] )",
		"description": "Change the current entity effects flags.\n\nValid flags are as follows:\n+ sets a flag\n- clears a flag\nantisbjuice = anti sucknblow juice.\neveryframe = process commands every time entity is rendered.",
		"example": "local.entity effects \"+everyframe\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"emitter": {
		"syntax": "emitter( String name )",
		"description": "Emitter to use.",
		"example": "",
		"class": ["Emitter"],
		"gamever": ["AA", "SH", "BT"]
	},
	"emotion": {
		"syntax": "emotion",
		"description": "The method of setting the facial expression of the Actor.",
		"example": "local.actor.emotion = \"emotion_happy\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"enableenemy": {
		"syntax": "enableEnemy",
		"description": "Sets enableEnemy variable.",
		"example": "local.actor.enableEnemy = 1",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"enablepain": {
		"syntax": "enablePain",
		"description": "Sets enablePain variable.",
		"example": "local.actor.enablePain = 0",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"enablespawn": {
		"syntax": "enablespawn",
		"description": "Allows spawning from this spawnpoint.",
		"example": "$spawn_axis3 enablespawn",
		"class": ["PlayerStart"],
		"gamever": ["AA", "SH", "BT"]
	},
	"end": {
		"syntax": "end",
		"description": "End the thread.",
		"example": "label:\n\t// Code\nend",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"endactionanim": {
		"syntax": "endactionanim",
		"description": "End any aiming/action animation which is currently playing.",
		"example": "local.actor endactionanim",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"endalpha": {
		"syntax": "endalpha( Float alpha )",
		"description": "Set the endpoint alpha value of the beam.",
		"example": "local.beam endalpha 0.2",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"endarray": {
		"syntax": "endArray",
		"description": "Ends the 'makeArray'.",
		"example": "local.hasharray = makeArray\n\t1     2     3\n\t\"one\" \"two\" \"three\"\n\t\"uno\" \"dos\" \"tres\"\n\t\"uno\" \"due\" \"tre\"\n\t// etc...\nendArray",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"endcycle": {
		"syntax": "EndCycle",
		"description": "End the cycle.",
		"example": "",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"endlevel": {
		"syntax": "endlevel",
		"description": "Called when the player gets to the end of the level.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"endpath": {
		"syntax": "endpath",
		"description": "Stop following the path.",
		"example": "local.object endpath",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"endpoint": {
		"syntax": "endpoint( Vector beam_end_point )",
		"description": "Set the end point of the beam. The beam will be draw from the origin to the end point.",
		"example": "local.beam endpoint ( 300 1590 70 )",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"enemy": {
		"syntax": "enemy",
		"description": "Get the actor's current enemy.",
		"example": "local.current_enemy = local.actor.enemy",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"enemy_visible_change_time": {
		"syntax": "enemy_visible_change_time",
		"description": "Get the last time whether or not the enemy is visible changed, in seconds.",
		"example": "local.time = local.actor.enemy_visible_change_time",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"enemyname": {
		"syntax": "enemyname( String enemyname )",
		"description": "Use the enemyname parameter for the AI that is being spawned in to set its targetname.",
		"example": "local.AISpawnPoint.enemyname = \"tentguys\"",
		"class": ["AISpawnPoint"],
		"gamever": ["BT"]
	},
	"enemysharerange": {
		"syntax": "enemysharerange( Float range )",
		"description": "Sets/Gets the range outside which the AI will not receive notification that a teammate has a new enemy.",
		"example": "local.actor enemysharerange 1500\n// Or\nlocal.actor.enemysharerange = 1500\nlocal.enemysharerange = local.actor.enemysharerange",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"enemyswitchdisable": {
		"syntax": "enemyswitchdisable",
		"description": "Disable enemy switching...",
		"example": "local.actor enemyswitchdisable",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"enemyswitchenable": {
		"syntax": "enemyswitchenable",
		"description": "Enable enemy switching...",
		"example": "local.actor enemyswitchenable",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"ensureforwardoffladder": {
		"syntax": "ensureforwardoffladder",
		"description": "Ensures that the player went forward off the ladder.",
		"example": "local.player ensureforwardoffladder",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ensureoverladder": {
		"syntax": "ensureoverladder",
		"description": "Ensures that the player is at the proper height when getting off the top of a ladder.",
		"example": "local.player ensureoverladder",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"enter": {
		"syntax": "enter( Entity vehicle, [ String driver_anim ] )",
		"description": "Called when someone gets into a vehicle.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"entity": {
		"syntax": "entity( String targetname )",
		"description": "Casts targetname to an entity.",
		"example": "local.entity = entity \"targetname\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"entitystart": {
		"syntax": "entitystart",
		"description": "Initialize a Actor.",
		"example": "local.actor entitystart",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"entnum": {
		"syntax": "entnum",
		"description": "The entity's entity number.",
		"example": "local.entity_number = local.entity.entnum",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"error": {
		"syntax": "error( String message, Integer level )",
		"description": "Generate a script error with specified message and stack level.\nThe game will shutdown.",
		"example": "error \"Your error message\" 1",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"exec": {
		"syntax": "exec( String script )",
		"description": "Executes the specified script.",
		"example": "exec path/to/file.scr\nlocal.listener exec path/to/file.scr",
		"class": ["Listener", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"exit": {
		"syntax": "exit( Entity vehicle )",
		"description": "Called when driver gets out of the vehicle.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"explode": {
		"syntax": "explode( [ Float damage ] )",
		"description": "Projectile: Make the projectile explode.\nScriptSlave: Creates an explosion at the script slave's position.\nThrobbingBox_Explosive: Cause the explosion to happen.",
		"example": "local.projectile explode\nlocal.script_object explode 500\nlocal.throbbing_box explode",
		"class": ["Projectile", "ScriptSlave", "ThrobbingBox_Explosive"],
		"gamever": ["AA", "SH", "BT"]
	},
	"explodeontouch": {
		"syntax": "explodeontouch",
		"description": "Make the projectile explode when it touches something damagable.",
		"example": "local.projectile explodeontouch",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"explosionattack": {
		"syntax": "explosionattack( String explosionModel, [ String tagName ] )",
		"description": "Spawn an explosion optionally from a specific tag.",
		"example": "local.player explosionattack \"models/fx/explosionTIGERshell.tik\" \"Bip01 Head\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"explosioneffect": {
		"syntax": "explosioneffect( String explosionType )",
		"description": "Explosion: Make an explosionType explosion effect.\nThrobbingBox_Explosive: Set the explosion effect model.",
		"example": "local.explosion explosioneffect \"grenade\"\nlocal.throbbing_box_explosive explosioneffect \"models/fx/demodamage_flak88.tik\"",
		"class": ["Explosion", "ThrobbingBox_Explosive"],
		"gamever": ["AA", "SH", "BT"]
	},
	"explosionmodel": {
		"syntax": "explosionmodel( String modelName )",
		"description": "Projectile: Set the modelName of the explosion to be spawned.\nVehicle: Sets the TIKI to call when the vehicle dies.",
		"example": "local.projectile explosionmodel \"models/fx/bazookaexplosion.tik\"",
		"class": ["Projectile", "Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"explosionoffset": {
		"syntax": "explosionoffset( Vector offset )",
		"description": "Set the explosion offset.",
		"example": "local.throbbing_box_explosive explosionoffset ( 0 0 128 )",
		"class": ["ThrobbingBox_Explosive"],
		"gamever": ["SH", "BT"]
	},
	"explosions": {
		"syntax": "explosions( Integer explosions )",
		"description": "Set the number of explosions.",
		"example": "",
		"class": ["ExplodingWall"],
		"gamever": ["AA", "SH", "BT"]
	},
	"explosionsound": {
		"syntax": "ExplosionSound( String ExplosionSound )",
		"description": "Explosion sound...",
		"example": "",
		"class": ["ThrobbingBox_Explosive"],
		"gamever": ["SH", "BT"]
	},
	"eyeslookat": {
		"syntax": "eyeslookat( Entity entity )",
		"description": "The actor will look at this entity.",
		"example": "local.actor eyeslookat $player",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"face": {
		"syntax": "face( Vector angles )",
		"description": "Force angles to specified vector.",
		"example": "local.player face ( 0 180 0 )",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fade": {
		"syntax": "fade( [ Float fadetime[0.00...max_float] ], [ Float target_alpha[0.00...1.00] ] )",
		"description": "Fade the entity's alpha, reducing it by 0.03 every FRAMETIME, until it has faded out.\nThis command does not remove the entity (unlike 'fadeout').\n\nNOTE: In order to use this command, the entity's shader must have the 'alphaGen entity' statement in it.",
		"example": "local.entity fade 10 0.2",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fadedelay": {
		"syntax": "fadedelay( Float time )",
		"description": "Sets how long the entity waits until fading out from 1 alpha to 0 alpha, in seconds.",
		"example": "local.smoke_grenade fadedelay 7",
		"class": ["SmokeGrenade "],
		"gamever": ["SH", "BT"]
	},
	"fadein": {
		"syntax": "fadein( … )",
		"description": "<b>Entity</b>:\n<b>fadein</b><i>( [ Float fadetime[0.00...max_float] ], [ Float target_alpha[0.00...1.00] ] )</i>\nFade the entity's alpha and scale in, increasing it by 0.03 every FRAMETIME, until it has faded completely in to 1.0.\nIf fadetime or target_alpha are defined, they will override the default values.\nNOTE: In order to use this command, the entity's shader must have the 'alphaGen entity' statement in it.\n\n<b>ScriptThread</b>:\n<b>fadein</b><i>( Float time, Float red, Float green, Float blue, Float alpha, [ Integer mode ] )</i>\nSets up fadein in values.\n\n<b>SmokeGrenade</b>:\n<b>fadein</b><i>( Float time )</i>\nSets fadein time from 0 alpha to 1 alpha, in seconds.",
		"example": "// Entity\nlocal.entity fadein 3.5 1.0\n// ScriptThread\nfadein 2 0 0 0 1\n// SmokeGrenade (SH & BT)\nlocal.smoke_grenade fadein 2.5",
		"class": ["Entity", "ScriptThread", "SmokeGrenade"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fadeout": {
		"syntax": "fadeout( … )",
		"description": "<b>Entity</b>:\n<b>fadeout</b><i>( [ Float fadetime[0.00...max_float] ], [ Float alpha[0.00...1.00] ] )</i>\nFade the entity's alpha and scale out, reducing it by 0.03 every FRAMETIME, until it has faded out.\nIf fadetime or target_alpha are defined, they will override the defaults.\nOnce the entity has been completely faded, the entity is removed.\nNOTE: In order to use this command, the entity's shader must have the 'alphaGen entity' statement in it.\n\n<b>ScriptThread</b>:\n<b>fadeout</b><i>( Float time, Float red, Float green, Float blue, Float alpha, [ Integer mode ] )</i>\nSets up fadeout values.",
		"example": "// Entity\nlocal.entity fadeout 2.5 0\n// ScriptThread\nfadeout 2 0 0 0 1",
		"class": ["Entity", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fadesound": {
		"syntax": "fadesound( Float time )",
		"description": "Fades the sound out over the given time.",
		"example": "fadesound 6",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fadetime": {
		"syntax": "fadetime( Float fadeTime )",
		"description": "Camera: Sets the fade time for camera transitioning.\nSplinePath: Sets the fadetime at this node.",
		"example": "local.camera fadetime 3.5",
		"class": ["Camera", "SplinePath"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fakebullets": {
		"syntax": "fakebullets( Boolean useFakeBullets )",
		"description": "Whether or not the projectile generator should fire real bullets.",
		"example": "local.projectile_generator_gun fakebullets 1",
		"class": ["ProjectileGenerator_Gun"],
		"gamever": ["SH", "BT"]
	},
	"fallback": {
		"syntax": "fallback( String fallback_mood )",
		"description": "Sets the fallback mood to use when triggered.",
		"example": "local.trigger_music fallback \"normal\"",
		"class": ["TriggerMusic"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fallheight": {
		"syntax": "fallheight( Float height )",
		"description": "Sets/Gets the fallheight.",
		"example": "local.actor fallheight 200\n// Or\nlocal.actor.fallheight = 200\nlocal.fallheight = local.actor.fallheight",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fallingangleadjust": {
		"syntax": "fallingangleadjust",
		"description": "Adjusts the weapons angles as it falls to the ground.",
		"example": "local.weapon fallingangleadjust",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"farclipoverride": {
		"syntax": "farclipoverride( Float farclipOverride )",
		"description": "Override the min config default for the far clip distance.",
		"example": "$world farclipoverride -1",
		"class": ["World"],
		"gamever": ["SH", "BT"]
	},
	"farplane": {
		"syntax": "farplane( Float farplaneDistance )",
		"description": "Sets/Gets the distance of the far clipping plane.",
		"example": "$world farplane 2000\nlevel.farplane = $world.farplane",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"farplane_bias": {
		"syntax": "farplane_bias( Float farplaneDistanceBias )",
		"description": "Sets/Gets the distance bias of the far clipping plane.",
		"example": "$world farplane_bias 10000\n// Or\n$world.farplane_bias = 10000\nprintln $world.farplane_bias // Prints: 10000",
		"class": ["World"],
		"gamever": ["SH", "BT"]
	},
	"farplane_color": {
		"syntax": "farplane_color( Vector farplaneColor )",
		"description": "Sets/Gets the color of the far clipping plane fog.",
		"example": "$world farplane_color ( 0.333 0.333 0.333 )\n// Or\n$world.farplane_color = ( 0.333 0.333 0.333 )\nprintln $world.farplane_color // Prints: (0.333000, 0.333000, 0.333000)",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"farplane_cull": {
		"syntax": "farplane_cull( Integer farplaneCull )",
		"description": "Whether or not the far clipping plane should cull things out of the world.\n\n0 - no cull\n1 - normal cull\n2 - cull but no bsp culling (SH & BT only)",
		"example": "$world farplane_cull 1",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"farplaneclipcolor": {
		"syntax": "farplaneclipcolor( Vector farplaneClipColor )",
		"description": "Override the fog color for the min config.",
		"example": "$world farplaneclipcolor ( 0.56 0.42 0.40 )",
		"class": ["World"],
		"gamever": ["SH", "BT"]
	},
	"favoriteenemy": {
		"syntax": "favoriteenemy( Entity ai_or_player )",
		"description": "Sets/Gets this AI's favorite enemy.",
		"example": "local.actor favoriteenemy local.enemy\n// Or\nlocal.actor.favoriteenemy = local.enemy\nlocal.enemy = local.actor.favoriteenemy",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"findendpoint": {
		"syntax": "findendpoint",
		"description": "Find the endpoint of a beam.",
		"example": "",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"findenemy": {
		"syntax": "findenemy",
		"description": "Finds the best enemy to target.",
		"example": "local.enemy = local.actor findenemy",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"finishroundtransition": {
		"syntax": "finishroundtransition",
		"description": "Delayed function call to do the actual restart for the next round.",
		"example": "local.dm_manager = spawn DM_Manager\nlocal.dm_manager finishroundtransition",
		"class": ["DM_Manager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"finishuseanim": {
		"syntax": "finishuseanim",
		"description": "Fires off all targets associated with a particular useanim.",
		"example": "local.player finishuseanim",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"finishuseobject": {
		"syntax": "finishuseobject",
		"description": "Fires off all targets associated with a particular useobject.",
		"example": "local.player finishuseobject",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fire": {
		"syntax": "fire( [ String hand ], [ String mode ] )",
		"description": "Sentient: Fires the weapon in the specified hand.\nScriptAimedStrafingGunfire (SH & BT only): Fire.\nScriptSimpleStrafingGunfire (SH & BT only): Fire.",
		"example": "local.player fire\n// Or\nlocal.player fire \"mainhand\" \"secondary\"",
		"class": ["Sentient", "ScriptAimedStrafingGunfire", "ScriptSimpleStrafingGunfire"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fire_grenade": {
		"syntax": "fire_grenade",
		"description": "Used only by grenade throw animations to tell the code when to throw a grenade.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"firedelay": {
		"syntax": "firedelay( Float fireDelay )",
		"description": "Set the minimum time between shots from the weapon.",
		"example": "local.weapon firedelay 0.75",
		"class": ["ProjectileGenerator_Gun", "ScriptSimpleStrafingGunfire", "Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fireheld": {
		"syntax": "fireheld",
		"description": "Returns 1 if this player is holding fire, or 0 if he is not.",
		"example": "if (local.player.fireheld) {\n\t// local.player is holding fire\n}",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fireonstartup": {
		"syntax": "FireOnStartUp",
		"description": "Default = 1\nSet this to 0 if you don't want the ProjectileGenerator to fire on startup.",
		"example": "",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"firespreadmult": {
		"syntax": "firespreadmult( Float scaleadd, Float falloff, Float cap, Float maxtime )",
		"description": "Sets a time decayed multiplier to spread when the weapon is fired.",
		"example": "local.weapon firespreadmult 0.38 0.61 200 0.6",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"firetype": {
		"syntax": "firetype( String firingType )",
		"description": "Set the firing type of the weapon (projectile or bullet).",
		"example": "local.weapon firetype \"bullet\"",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"firewarmupdelay": {
		"syntax": "firewarmupdelay( Float value )",
		"description": "Set the warmup delay before use after mounting the weapon.",
		"example": "local.vehicle_turret_gun firewarmupdelay 1.5",
		"class": ["VehicleTurretGun"],
		"gamever": ["SH", "BT"]
	},
	"fixedleash": {
		"syntax": "fixedleash( Float multiplier )",
		"description": "If non-zero, the leash will never auto-reset.\nIf zero, the leash may auto-reset.",
		"example": "local.actor fixedleash 1\n// Or\nlocal.actor.fixedleash = 1\nlocal.result = local.actor.fixedleash",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"flags": {
		"syntax": "flags( [ String parameter1 ], [ String parameter2 ], [ String parameter3 ],\n[ String parameter4 ], [ String parameter5 ], [ String parameter6 ] )",
		"description": "Change the current entity flags.\n\nValid flags are as follows:\n+ sets a flag.\n- clears a flag.\nblood - should it bleed.\nexplode - should it explode when dead.\ndie_gibs - should it spawn gibs when dead.\ngod - makes the entity invincible.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"flash": {
		"syntax": "flash( Float time, Float r, Float g, Float b, Float radius )",
		"description": "Flash player screens.",
		"example": "",
		"class": ["Explosion"],
		"gamever": ["AA", "SH", "BT"]
	},
	"float": {
		"syntax": "float( Integer value )",
		"description": "Casts value to a float.",
		"example": "local.float = float local.integer",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"flypath": {
		"syntax": "flypath( Entity array, Float speed, Float acceleration, Float look_ahead )",
		"description": "Makes the script slave fly the specified path with speed and acceleration until reached_distance close to position.",
		"example": "local.object flypath $path 250 750 256",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"follow": {
		"syntax": "follow( Entity targetEnt, [ Entity targetWatchEnt ] )",
		"description": "Makes the camera follow an entity and optionally watch an entity.",
		"example": "local.camera follow local.target",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"follow_distance": {
		"syntax": "follow_distance( Float distance )",
		"description": "Sets the camera follow distance.",
		"example": "local.camera follow_distance 60",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"follow_yaw": {
		"syntax": "follow_yaw( Float yaw )",
		"description": "Sets the yaw offset of the camera following an entity.",
		"example": "",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"follow_yaw_absolute": {
		"syntax": "follow_yaw_absolute",
		"description": "Makes the follow camera yaw absolute.",
		"example": "",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"follow_yaw_relative": {
		"syntax": "follow_yaw_relative",
		"description": "Makes the follow camera yaw relative (not absolute).",
		"example": "",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"followpath": {
		"syntax": "followpath( Entity path, [ String arg1 ], [ String arg2 ], [ String arg3 ],\n[ String arg4 ], [ String arg5 ], [ String arg6 ] )",
		"description": "Makes the script slave follow the specified path.\nThe allowable arguments are:\nignoreangles, ignorevelocity, normalangles, loop, and a number specifying the start time.",
		"example": "local.object followpath local.path",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"forceactivate": {
		"syntax": "forceactivate",
		"description": "Forces an entity to activate outside of the player's PVS.",
		"example": "local.entity forceactivate",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"forcedrophealth": {
		"syntax": "forcedrophealth",
		"description": "Force the sentient to drop health no matter what level.nodrophealth is.",
		"example": "local.actor forcedrophealth\nlocal.actor.forcedrophealth = 1\nlocal.forcedrophealth = local.actor.forcedrophealth",
		"class": ["AISpawnPoint", "Sentient"],
		"gamever": ["BT"]
	},
	"forcedropweapon": {
		"syntax": "forcedropweapon",
		"description": "Force the sentient to drop weapons no matter what level.nodropweapon is.",
		"example": "local.actor forcedropweapon\nlocal.actor.forcedropweapon = 1\nlocal.forcedropweapon = local.actor.forcedropweapon",
		"class": ["AISpawnPoint", "Sentient"],
		"gamever": ["BT"]
	},
	"forcelandminemeasure": {
		"syntax": "forcelandminemeasure",
		"description": "Force a remeasurement to all landmines.\nUsed on MineDetector.",
		"example": "local.player forcelandminemeasure",
		"class": ["Sentient"],
		"gamever": ["BT"]
	},
	"forcelegsstate": {
		"syntax": "forcelegsstate( String legsState )",
		"description": "Force the player's legs to a certain state.",
		"example": "local.player forcelegsstate \"STAND\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"forcemusic": {
		"syntax": "forcemusic( String current, [ String fallback ] )",
		"description": "Forces the current and fallback (optional) music moods.",
		"example": "soundtrack \"music/mymusic.mus\"\nforcemusic \"aux1\" \"aux1\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"forcetorsostate": {
		"syntax": "forcetorsostate( String torsostate )",
		"description": "Force the player's torso to a certain state.",
		"example": "local.player forcetorsostate \"STAND\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"forwardvector": {
		"syntax": "forwardvector",
		"description": "Get the forward vector of angles.",
		"example": "local.forwardvector = local.entity.forwardvector",
		"class": ["SimpleEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"found_secrets": {
		"syntax": "found_secrets",
		"description": "Count of found secrets.",
		"example": "local.found_secrets = level.found_secrets",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fov": {
		"syntax": "fov( Float fov )",
		"description": "Actor, AISpawnPoint: Gets/Sets the Field of View angle of the actor.\n\nCamera: fov( Float fov, [ Float fadeTime ] )\nSets the camera's field of view (fov).\nif fadeTime is specified, camera will fade over that time\nif fov is less than 3, than an auto_fov will be assumed\nthe value of fov will be the ratio used for keeping a watch\nentity in the view at the right scale.\n\nPlayer: Sets the player's fov.\n\nSplinePath: Sets the fov at this node.",
		"example": "local.camera fov 110 2\n\n// Actor\nlocal.actor fov 120\n// Or\nlocal.actor.fov = 120\nlocal.fov = local.actor.fov",
		"class": ["Actor", "AISpawnPoint", "Camera", "Player", "SplinePath"],
		"gamever": ["AA", "SH", "BT"]
	},
	"freezeplayer": {
		"syntax": "freezeplayer",
		"description": "Freeze all the players.\nUse 'releaseplayer' to release the players.",
		"example": "freezeplayer",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"front_mass": {
		"syntax": "front_mass( Float weight )",
		"description": "Sets the mass of the front of the vehicle.",
		"example": "",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fullheal": {
		"syntax": "fullheal",
		"description": "Heals player.",
		"example": "local.player fullheal",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fullstop": {
		"syntax": "fullstop",
		"description": "Make the Vehicle Stop Moving... Completely!",
		"example": "local.vehicle fullstop",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"fuse": {
		"syntax": "fuse( Boolean bool )",
		"description": "Set the projectile's life to be determined by the charge time.",
		"example": "local.projectile fuse 1",
		"class": ["Projectile"],
		"gamever": ["SH", "BT"]
	},
	"gameversion": {
		"syntax": "gameversion",
		"description": "Prints the game version.",
		"example": "$player gameversion",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"german": {
		"syntax": "german",
		"description": "Makes the sentient a German.",
		"example": "local.actor german",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"get_render_terrain": {
		"syntax": "get_render_terrain",
		"description": "Get the render terrain switch.",
		"example": "local.result = $world.get_render_terrain",
		"class": ["World"],
		"gamever": ["SH", "BT"]
	},
	"getboundkey1": {
		"syntax": "getboundkey1( String keyname )",
		"description": "Return a string describing the key.",
		"example": "local.key = getboundkey1 \"+use\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"getboundkey2": {
		"syntax": "getboundkey2( String keyname )",
		"description": "Return a string describing the key.",
		"example": "local.secondkey = getboundkey2 \"+use\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"getcontrollerangles": {
		"syntax": "getcontrollerangles( Integer num )",
		"description": "Gets the control angles for the specified bone.",
		"example": "local.controllerangles = local.player getcontrollerangles 0\n\n// Is player leaning?  If so, local.lean will be < or > than 0\nlocal.lean = local.controllerangles[2]",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"getcurrentdmweapontype": {
		"syntax": "getcurrentdmweapontype",
		"description": "Get the player's current DM weapon type.",
		"example": "local.weapontype = local.player getcurrentdmweapontype",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"getcvar": {
		"syntax": "getcvar( String name )",
		"description": "Get the cvar (console variable).",
		"example": "local.hostname = getcvar \"sv_hostname\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"getentbyentnum": {
		"syntax": "getentbyentnum( Integer ent_num )",
		"description": "Gets the specified entity.",
		"example": "local.entity = getentbyentnum local.entnum",
		"class": ["ScriptThread"],
		"gamever": ["BT"]
	},
	"getlocalyawfromvector": {
		"syntax": "GetLocalYawFromVector( Vector direction )",
		"description": "Turn a worldspace vector into a local space yaw.",
		"example": "local.yawdir = local.actor GetLocalYawFromVector local.actor.forwardvector",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"getmaxs": {
		"syntax": "getmaxs",
		"description": "Get the maxs of the bounding box of the entity to maxs.",
		"example": "local.maxs = local.entity.getmaxs\n// Or\nlocal.trigger setsize $player.getmins $player.getmaxs",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"getmins": {
		"syntax": "getmins",
		"description": "Get the mins of the bounding box of the entity to mins.",
		"example": "local.mins = local.entity.getmins\n// Or\nlocal.trigger setsize $player.getmins $player.getmaxs",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"getmovement": {
		"syntax": "getmovement",
		"description": "Returns the player current movement.\nCan return: \"standing\", \"running\", \"walking\" or \"falling\".",
		"example": "local.movement = local.player getmovement",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"getposition": {
		"syntax": "getposition",
		"description": "Returns the player current position.\nCan return: \"standing\", \"crouching\", or \"offground\".",
		"example": "local.position = local.player getposition",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"getrunanim": {
		"syntax": "GetRunAnim",
		"description": "Internal usage.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"gettagangles": {
		"syntax": "gettagangles( String tag_name )",
		"description": "Gets the world angles of the tag.",
		"example": "local.angles = local.player gettagangles \"eyes bone\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"gettagposition": {
		"syntax": "gettagposition( String tag_name )",
		"description": "Gets the world position of the tag.",
		"example": "local.position = local.player gettagposition \"eyes bone\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"gettargetentity": {
		"syntax": "gettargetentity",
		"description": "Returns entity being targeted by the projectile generator.",
		"example": "local.entity = local.projectile_generator gettargetentity",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"getwalkanim": {
		"syntax": "GetWalkAnim",
		"description": "Internal usage.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ghost": {
		"syntax": "ghost",
		"description": "Make non-solid but still send to client regardless of hide status.",
		"example": "local.entity ghost",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"give": {
		"syntax": "give( String name, [ Integer amount ] )",
		"description": "Player: Gives the player the specified thing (weapon, ammo, item, etc.) and optionally the amount.\nSentient: Gives the sentient the targeted item.",
		"example": "local.player give \"models/weapons/mp44.tik\"",
		"class": ["Player", "Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"givedynitem": {
		"syntax": "givedynitem( String model, String bonename )",
		"description": "Pass the args to the item.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"giveweapon": {
		"syntax": "giveweapon( String weapon_name )",
		"description": "Gives the player the specified weapon.",
		"example": "local.player giveweapon \"models/weapons/mp44.tik\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"globaltranslate": {
		"syntax": "globaltranslate( Vector translate_amount )",
		"description": "Translates all sounds and triggers by specified amount.",
		"example": "",
		"class": ["SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"glue": {
		"syntax": "glue( Entity parent, [ Integer glueAngles ] )",
		"description": "Glue this entity to the specified entity.",
		"example": "local.entity glue local.parent_entity",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"gotkill": {
		"syntax": "gotkill( Entity victim, Integer damage, Entity inflictor, Integer meansofdeath, Boolean gib )",
		"description": "Event sent to attacker when an entity dies.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"goto": {
		"syntax": "goto( String label )",
		"description": "Transfers script flow to the specified label.\nCan be used to escape deeply nested loops, or handling errors.",
		"example": "label:\n\ngoto label",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"gravity": {
		"syntax": "gravity( Float gravity )",
		"description": "Entity: Change the gravity on this entity.\nWorld: Set the gravity for the whole world.",
		"example": "// Entity\nlocal.entity gravity 0.25\n//World\n$world gravity 300",
		"class": ["Entity", "World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"gren_awareness": {
		"syntax": "gren_awareness( Float awareness_percent )",
		"description": "Sets/Gets the awareness of grenades in 0-100 percent chance of responding\nto a grenadewhen the AI sees it (applied once every 0.4 seconds)",
		"example": "local.actor gren_awareness 0\n// Or\nlocal.actor.gren_awareness = 0\nlocal.percent = local.actor.gren_awareness",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"gun": {
		"syntax": "gun( String s )",
		"description": "Specifies the gun to use.\nGets the gun to being used.",
		"example": "local.actor gun \"KAR98sniper\"\n// Or\nlocal.actor.gun = \"KAR98sniper\"\nlocal.gun = local.actor.gun",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"gvo": {
		"syntax": "gvo",
		"description": "Retrieves the server's vote options file.",
		"example": "",
		"class": ["Player"],
		"gamever": ["SH", "BT"]
	},
	"handlespawn": {
		"syntax": "handlespawn",
		"description": "Internal usage.",
		"example": "",
		"class": ["Object"],
		"gamever": ["AA", "SH", "BT"]
	},
	"has_disguise": {
		"syntax": "has_disguise( Integer is_disguised )",
		"description": "Sets/Gets disguise mode.\nzero = does not have a disguise.\nnon-zero = has a disguise.",
		"example": "$player.has_disguise = 1\nprintln $player.has_disguise // Prints: 1",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"hascompletelookahead": {
		"syntax": "hascompletelookahead",
		"description": "Returns true if there are no corners to turn on the rest of the AI's current path.",
		"example": "if (local.actor.hascompletelookahead) {\n\t// statement\n}",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"headmodel": {
		"syntax": "headmodel( String headmodel )",
		"description": "Sets/Gets the head model.",
		"example": "local.actor headmodel \"head1\"\nlocal.headmodel = local.actor.headmodel",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"headskin": {
		"syntax": "headskin( String headskin )",
		"description": "Sets/Gets the head skin.",
		"example": "local.actor headskin \"bignose\"\nlocal.headskin = local.actor.headskin",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"heal": {
		"syntax": "heal( Float health )",
		"description": "Adds health to an entity, 0-1 fraction of max_health.",
		"example": "local.entity heal 1.0",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"health": {
		"syntax": "health( Float newHealth )",
		"description": "Set the health (and max_health) of the entity to newHealth.",
		"example": "local.entity health 100\n// Or\nlocal.entity.health = 100\nlocal.health = local.entity.health",
		"class": ["AISpawnPoint", "Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"health_postspawn": {
		"syntax": "health_postspawn",
		"description": "Health Post Spawn.",
		"example": "",
		"class": ["Health"],
		"gamever": ["AA", "SH", "BT"]
	},
	"healthonly": {
		"syntax": "healthonly( Float newHealth )",
		"description": "Set the health of the entity to newHealth without changing max_health.",
		"example": "local.entity healthonly 50",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"hearing": {
		"syntax": "hearing( Float radius )",
		"description": "Sets/Gets the hearing radius of the actor.",
		"example": "local.actor hearing 2500\n// Or\nlocal.actor.hearing = 2500\nlocal.hearing = local.actor.hearing",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"heatseek": {
		"syntax": "heatseek",
		"description": "Make the projectile heat seek.",
		"example": "local.projectile heatseek",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"hide": {
		"syntax": "hide",
		"description": "CameraManager:  Hides the paths.\nEntity: Hide the entity, opposite of 'show'.\nSoundManager:  Hides the sounds.",
		"example": "local.entity hide",
		"class": ["CameraManager", "Entity", "SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"hidemenu": {
		"syntax": "hidemenu( String name, [ Integer bForce ] )",
		"description": "Hide menu, with option to force it off.",
		"example": "hidemenu \"briefing1a\" 1",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"hidemouse": {
		"syntax": "hidemouse",
		"description": "Hide mouse cursor.",
		"example": "hidemouse",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"hitdamage": {
		"syntax": "hitdamage( Float projectileHitDamage )",
		"description": "Set the damage a projectile does when it hits something.",
		"example": "local.projectile hitdamage 200",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"hiteffect": {
		"syntax": "hiteffect",
		"description": "Sets the TIKI it will spawn when it's hit.",
		"example": "",
		"class": ["InteractObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"holster": {
		"syntax": "holster",
		"description": "Actor: Holster weapon.\nPlayer: Holsters all wielded weapons, or unholsters previously put away weapons.",
		"example": "local.player holster",
		"class": ["Actor", "Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"holsterangles": {
		"syntax": "holsterangles( Vector angles )",
		"description": "Set the angles of this weapon when it is holstered.",
		"example": "local.weapon holsterangles ( 5 190 195 )",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"holsteroffset": {
		"syntax": "holsteroffset( Vector offset )",
		"description": "Set the positional offset when it is holstered.",
		"example": "local.weapon holsteroffset ( 8.0 -7.75 6.5 )",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"holsterscale": {
		"syntax": "holsterscale( Float scale )",
		"description": "Set the scale of the weapon when it's attached to the holster.",
		"example": "local.weapon holsterscale 1.0",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"holstertag": {
		"syntax": "holstertag( String tagname )",
		"description": "Set the name of the tag to attach this to when the weapon is holstered.",
		"example": "local.weapon holstertag \"Bip01 Spine2\"",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"huddraw_align": {
		"syntax": "huddraw_align( Integer index, String h_align, String v_align )",
		"description": "Sets the alignment of a huddraw element.\nSpecified with:\n\"left\", \"center\" or \"right\" for horizontal alignment\n\"top\", \"center\" or \"bottom\" for vertical alignment.",
		"example": "huddraw_align 33 \"left\" \"bottom\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"huddraw_alpha": {
		"syntax": "huddraw_alpha( Integer index, Float alpha )",
		"description": "Sets the alpha of a huddraw element.",
		"example": "huddraw_alpha 33 1",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"huddraw_color": {
		"syntax": "huddraw_color( Integer index, Float red, Float green, Float blue )",
		"description": "Sets the color of a huddraw element.\nRGB (red, green, blue) format. From 0 to 1.",
		"example": "huddraw_color 33 1 0.5 0.5",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"huddraw_font": {
		"syntax": "huddraw_font( Integer index, String fontname )",
		"description": "Sets the font to use.\n\ncourier-16, courier-18, courier-20\nfacfont-20\nhandle-16, handle-18, handle-22, handle-23\nmarlett, Marlett-20\nverdana-12, verdana-14\nDelima-30 (SH & BT only)",
		"example": "huddraw_font 33 \"facfont-20\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"huddraw_rect": {
		"syntax": "huddraw_rect( Integer index, Integer x, Integer y, Integer width, Integer height )",
		"description": "Specifies the position of the upper left corner and size of a huddraw element.\nThe x and y position is relative to the position specified with the 'huddraw_align' command.",
		"example": "huddraw_rect 33 0 0 640 480",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"huddraw_shader": {
		"syntax": "huddraw_shader( Integer index, String shader )",
		"description": "Sets the shader to use for a particular huddraw element.\nshader can be the name of a shader or the path to the texture.",
		"example": "huddraw_shader 33 \"black\"\n// Or\nhuddraw_shader 33 \"textures/mohmenu/black.tga\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"huddraw_string": {
		"syntax": "huddraw_string( Integer index, String string )",
		"description": "Sets a string to be displayed. Clears the shader value.",
		"example": "huddraw_string 33 \"Lorem ipsum dolor sit amet\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"huddraw_virtualsize": {
		"syntax": "huddraw_virtualsize( Integer index, Integer virtual )",
		"description": "Sets if the huddraw element should use virutal screen resolution for positioning and size.",
		"example": "huddraw_virtualsize 33 1",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"hurt": {
		"syntax": "hurt( Integer damage, [ String means_of_death ], [ Vector direction ] )",
		"description": "Inflicts damage if the entity is damageable.\nIf the number of damage points specified in the command argument is greater\nor equal than the entity's current health, it will be killed or destroyed.\n\n<b>Means of death values:</b>\nnone, suicide, crush, crush_every_frame, telefrag, lava, slime,\nfalling, last_self_inflicted, explosion, explodewall, electric,\nelectricwater, thrownobject, beam, rocket, impact, bullet, fast_bullet,\nvehicle, fire, flashbang, on_fire, gib, impale, bash, shotgun, aagun and landmine.",
		"example": "local.entity hurt 1000 \"explosion\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"id": {
		"syntax": "ID( Integer ID )",
		"description": "Sets the ID for this projectile generator.\nDefault = 0",
		"example": "",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"idle": {
		"syntax": "idle",
		"description": "Emitter: Animates the puff daddy.\nPuffDaddy: Animates the puff daddy.\nWeapon: Puts the weapon into an idle state.",
		"example": "",
		"class": ["Emitter", "PuffDaddy", "Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"idlecheckoffset": {
		"syntax": "idleCheckOffset( Vector offset )",
		"description": "Sets the offset to trace to for collision checking when idling.",
		"example": "local.turret idleCheckOffset ( -56 0 0 )",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"idleinit": {
		"syntax": "idleinit",
		"description": "Puts the weapon into an idle state and clears all the anim slots.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"idlesay": {
		"syntax": "idlesay( String animation )",
		"description": "The name of an idle dialog animation to play.",
		"example": "local.actor idlesay \"den_m6l1_614r\"\nlocal.actor waittill saydone",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ignorebadplaces": {
		"syntax": "ignorebadplaces( Integer ignore )",
		"description": "Sets/Gets whether or not this AI guy will ignore bad places (0 = not suicidal)",
		"example": "local.actor ignorebadplaces 1\n// Or\nlocal.actor.ignorebadplaces = 1\nlocal.ignorebadplaces = local.actor.ignorebadplaces",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"ignoreclock": {
		"syntax": "ignoreclock( Integer ignoreclock )",
		"description": "Tells a level weather or not to ignore the clock.",
		"example": "level ignoreclock 1",
		"class": ["Level"],
		"gamever": ["SH", "BT"]
	},
	"immediateremove": {
		"syntax": "immediateremove",
		"description": "Removes this listener immediately.",
		"example": "local.listener immediateremove",
		"class": ["Actor", "Entity", "Listener", "PathNode", "Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"immune": {
		"syntax": "immune( String immune_string1, [ String immune_string2 ], [ String immune_string3 ],\n[ String immune_string4 ], [ String immune_string5 ], [ String immune_string6 ] )",
		"description": "Adds to the immunity list for this sentient.\nUse 'removeimmune' to remove immunity.\n\n<b>Valid options are: (Means Of Death)</b>\nnone, suicide, crush, crush_every_frame, telefrag, lava, slime, falling,\nlast_self_inflicted, explosion, explodewall, electric, electricwater,\nthrownobject, grenade, beam, rocket, impact, bullet, fast_bullet,\nvehicle, fire, flashbang, on_fire, gib, impale, bash, shotgun, aagun and landmine.",
		"example": "local.entity immune \"grenade\" \"bullet\" \"fast_bullet\"\nlocal.entity immune \"aagun\" // Spearhead & Breakthrough only\nlocal.entity immune \"landmine\" // Breakthrough only",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"impactmarkorientation": {
		"syntax": "impactmarkorientation( Float degrees )",
		"description": "Set the orientation of the impact mark.",
		"example": "",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"impactmarkradius": {
		"syntax": "impactmarkradius( Float radius )",
		"description": "Set the radius of the impact mark.",
		"example": "local.projectile impactmarkradius 50",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"impactmarkshader": {
		"syntax": "impactmarkshader( String shader )",
		"description": "Set the shader of the impact mark.",
		"example": "local.projectile impactmarkshader \"blastmark\"",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"initialize": {
		"syntax": "initialize",
		"description": "Initialize object.",
		"example": "",
		"class": ["ProjectileGenerator", "TOWObjective"],
		"gamever": ["SH", "BT"]
	},
	"injail": {
		"syntax": "injail( Integer boolean )",
		"description": "Set to 1 to indicate when player is in jail, 0 when they are free.\nReturns 1 if player is in jail, 0 if out.",
		"example": "local.player.injail = 1\nprintln local.player.injail // Prints: 1",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"inpvs": {
		"syntax": "inpvs( Entity entity )",
		"description": "returns 1 if the entities have connected pvs, 0 if not.",
		"example": "local.result = local.entity1 inpvs local.entity2",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"inreload": {
		"syntax": "inreload( Integer reloading )",
		"description": "Set to non-zero to indicate the AI is in a reload.\nReturns non-zero if the AI is in a reload.",
		"example": "local.actor.inreload = 1\nlocal.inreload = local.actor.inreload",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"int": {
		"syntax": "int( Integer value )",
		"description": "Casts value to an integer.",
		"example": "local.integer = int 0.6",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"interrupt_point": {
		"syntax": "interrupt_point",
		"description": "Hint from animation scripts to AI code that now is a good time to switch animations.",
		"example": "local.actor interrupt_point",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"interval": {
		"syntax": "interval( Float distance )",
		"description": "Sets/Gets the distance AI tries to keep between squadmates while moving.",
		"example": "local.actor interval 256\n// Or\nlocal.actor.interval = 256\nlocal.distance = local.actor.interval",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"intervaldir": {
		"syntax": "intervaldir",
		"description": "Gets the direction the AI would like to move to maintain its interval.",
		"example": "local.vector_direction = local.actor.intervaldir",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"invnext": {
		"syntax": "invnext",
		"description": "Cycle to player's next item.",
		"example": "local.player invnext",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"invprev": {
		"syntax": "invprev",
		"description": "Cycle to player's previous item.",
		"example": "local.player invprev",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"iprint": {
		"syntax": "iprint( String string, [ Integer bold ] )",
		"description": "Prints a string to the player, optionally in bold.",
		"example": "local.player iprint \"Lorem ipsum…\" 1 // White message with sound\nlocal.player iprint \"Lorem ipsum…\" // Yellow message without sound",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"iprintln": {
		"syntax": "iprintln( String string )",
		"description": "Prints a string (yellow message), followed by a newline.\nIt is recommended to use 'iprintln_noloc' instead.",
		"example": "iprintln \"Lorem ipsum dolor sit amet\"",
		"class": ["ScriptThread"],
		"gamever":  ["AA", "SH", "BT"]
	},
	"iprintln_noloc": {
		"syntax": "iprintln_noloc( String string )",
		"description": "Prints a string (yellow message), followed by a newline with no localization conversion.",
		"example": "iprintln_noloc \"Lorem ipsum dolor sit amet\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"iprintlnbold": {
		"syntax": "iprintlnbold( String string )",
		"description": "Prints a string,  followed by a newline in bold (white message with sound).\nIt is recommended to use 'iprintlnbold_noloc' instead.",
		"example": "iprintlnbold \"Lorem ipsum dolor sit amet\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"iprintlnbold_noloc": {
		"syntax": "iprintlnbold_noloc( String string )",
		"description": "Prints a string, followed by a newline in bold (white message with sound),\nwith no localization conversion.",
		"example": "iprintlnbold_noloc \"Lorem ipsum dolor sit amet\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"is_disguised": {
		"syntax": "is_disguised",
		"description": "Gets if the player is disguised or not.\nzero = not disguised, non-zero = disguised",
		"example": "local.is_disguised = $player.is_disguised",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"is_enemy_visible": {
		"syntax": "is_enemy_visible",
		"description": "0 if the enemy is not currently visible, 1 if he is.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"isabandoned": {
		"syntax": "isabandoned( Entity owner )",
		"description": "Returns true if the owner has abandoned the mine.",
		"example": "local.result = local.landmine isabandoned local.entity",
		"class": ["TriggerLandmine"],
		"gamever": ["BT"]
	},
	"isalive": {
		"syntax": "isAlive( Entity ent )",
		"description": "Returns true if the specified entity exists and has health > 0.",
		"example": "local.is_player_alive = isAlive local.player",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"isdonut": {
		"syntax": "isdonut( Integer isdonut )",
		"description": "Will target donut.",
		"example": "",
		"class": ["ProjectileGenerator_Projectile"],
		"gamever": ["SH", "BT"]
	},
	"isescaping": {
		"syntax": "isEscaping",
		"description": "Return non-zero if escaping or assisting escape.",
		"example": "local.result = local.player.isEscaping",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"isimmune": {
		"syntax": "isimmune( Entity entity )",
		"description": "Returns true if the given entity is immune to this landmine.",
		"example": "local.result = local.landmine isimmune local.entity",
		"class": ["TriggerLandmine"],
		"gamever": ["BT"]
	},
	"isinside": {
		"syntax": "isinside( Entity entity )",
		"description": "Returns 1 if the entities are touching, 0 if not.",
		"example": "local.result = local.entity1 isinside local.entity2",
		"class": ["Entity"],
		"gamever": ["BT"]
	},
	"isloopinganim": {
		"syntax": "isloopinganim( String anim_name )",
		"description": "Returns 1 if the anim is a looping anim, or 0 otherwise.",
		"example": "local.result = local.entity isloopinganim \"anim_name\"",
		"class": ["Animate"],
		"gamever": ["AA", "SH", "BT"]
	},
	"isopen": {
		"syntax": "isOpen",
		"description": "Check to see if door is open (non-zero return value).",
		"example": "$Door.isOpen = 1\nlocal.result = $Door.isOpen",
		"class": ["Door"],
		"gamever": ["BT"]
	},
	"isspectator": {
		"syntax": "isSpectator",
		"description": "Check to see if player is a spectator (non-zero return value).",
		"example": "local.result = local.player.isSpectator",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"istouching": {
		"syntax": "istouching( Entity entity )",
		"description": "Returns 1 if the entities are touching, 0 if not.",
		"example": "local.result = local.entity1 istouching local.entity2",
		"class": ["Entity", "PathNode"],
		"gamever": ["AA", "SH", "BT"]
	},
	"isturnedon": {
		"syntax": "isturnedon",
		"description": "Returns whether the generator is on or off.",
		"example": "local.result = local.projectile_generator isturnedon",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"item": {
		"syntax": "item( String type, [ Integer amount ] )",
		"description": "Gives the sentient the specified amount of the specified item.",
		"example": "local.player item \"models/items/binoculars.tik\"",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"item_droptofloor": {
		"syntax": "item_droptofloor",
		"description": "Drops the item to the ground.",
		"example": "",
		"class": ["Item", "PortableTurret", "TurretGun", "VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"item_pickup": {
		"syntax": "item_pickup( Entity item )",
		"description": "Pickup the specified item.",
		"example": "",
		"class": ["CarryableTurret", "Health", "Item", "Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"jailassistescape": {
		"syntax": "jailassistescape",
		"description": "Start the assist jail escape animation.",
		"example": "local.player jailassistescape",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"jailescape": {
		"syntax": "jailescape",
		"description": "Start the escape from jail animation.",
		"example": "local.player jailescape",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"jailescapestop": {
		"syntax": "jailescapestop",
		"description": "Stop either the escape from jail or assist animation.",
		"example": "local.player jailescapestop",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"jitteramount": {
		"syntax": "jitteramount( Vector jitterangles )",
		"description": "Sets the jitter angles to apply to the player.",
		"example": "local.jitter jitteramount ( 10 10 10 )",
		"class": ["ViewJitter"],
		"gamever": ["AA", "SH", "BT"]
	},
	"join_team": {
		"syntax": "join_team( String team )",
		"description": "Join the specified team (allies or axis).",
		"example": "local.player join_team \"allies\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"jointeam": {
		"syntax": "joinTeam( Entity teamMember )",
		"description": "Join a bind team.",
		"example": "local.entity1 joinTeam local.entity2",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"jump": {
		"syntax": "jump( Float height )",
		"description": "Makes the player jump.",
		"example": "local.player jump 128",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"jumpto": {
		"syntax": "jumpto( String vector_or_entity )",
		"description": "Jump to specified vector or entity.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"jumpxy": {
		"syntax": "jumpxy( Float forwardmove, Float sidemove, Float speed )",
		"description": "Makes the sentient jump.",
		"example": "local.player jumpxy 200 0 250",
		"class": ["Player", "Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"key": {
		"syntax": "key( String keyName )",
		"description": "Set the key needed to make this UseAnim function.",
		"example": "",
		"class": ["UseAnim"],
		"gamever": ["AA", "SH", "BT"]
	},
	"kickdir": {
		"syntax": "kickdir",
		"description": "Gets the direction the AI wants to kick.",
		"example": "local.vector_kickdir = local.actor.kickdir",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"kill": {
		"syntax": "kill",
		"description": "Console based command to kill yourself if stuck.",
		"example": "// Type kill in the console and press enter\nlocal.entity kill // <-- This does nothing to the entity",
		"class": ["DynItem", "Entity", "Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"kill_axis": {
		"syntax": "kill_axis( Float radius )",
		"description": "Kills all of the axis that are in the passed radius, or all of them if radius is 0.",
		"example": "",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"killattach": {
		"syntax": "killattach",
		"description": "Kill all the attached entities.",
		"example": "local.entity killattach",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"killclass": {
		"syntax": "killclass( String classname, [ Integer except_entity_number ] )",
		"description": "Kills everything in the specified class, except for the specified entity (optional).",
		"example": "killclass \"Actor\"",
		"class": ["Player", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"killed": {
		"syntax": "killed( Entity attacker, Integer damage, Entity inflictor, Vector position, Vector direction,\nVector normal, Integer knockback, Integer damageflags, Integer meansofdeath, Integer location )",
		"description": "Event which is sent to an entity once it as been killed.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"killedeffect": {
		"syntax": "killedeffect",
		"description": "Sets the TIKI it will spawn when it's destroyed.",
		"example": "",
		"class": ["InteractObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"killent": {
		"syntax": "killent( Integer entity_number )",
		"description": "Kills the specified entity.",
		"example": "killent 33",
		"class": ["Player", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"killtarget": {
		"syntax": "killtarget( String targetName )",
		"description": "When dying kill entities with this targetName.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"killthread": {
		"syntax": "killthread( String thread )",
		"description": "Set the thread to execute when this model is killed.",
		"example": "",
		"class": ["DamageModel"],
		"gamever": ["SH", "BT"]
	},
	"killtrace": {
		"syntax": "killtrace( Vector offset, Vector direction, Float radius, Float distance )",
		"description": "Kills all objects along the trace.\n\noffset = Initial offset from origin.\ndirection = Angular offset orientation for trace.\nradius = Thickness of trace.\ndistance = How far to trace.",
		"example": "local.damage_model killtrace ( 0 0 25 ) ( 0 0 0 ) 16 200",
		"class": ["DamageModel"],
		"gamever": ["SH", "BT"]
	},
	"knockback": {
		"syntax": "knockback( Float projectileKnockback )",
		"description": "Set the knockback of the projectile when it hits something.",
		"example": "local.projectile knockback 300",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"land_angles": {
		"syntax": "land_angles( Vector angles )",
		"description": "Set the land angles.",
		"example": "",
		"class": ["ExplodingWall"],
		"gamever": ["AA", "SH", "BT"]
	},
	"land_radius": {
		"syntax": "land_radius( Float radius )",
		"description": "Set the land radius.",
		"example": "",
		"class": ["ExplodingWall"],
		"gamever": ["AA", "SH", "BT"]
	},
	"landmark_name": {
		"syntax": "landmark_name( String name )",
		"description": "Set the name of this landmark.",
		"example": "",
		"class": ["InfoLandmark"],
		"gamever": ["BT"]
	},
	"landminedamage": {
		"syntax": "landminedamage( Entity landmine, Float damage, Float radius )",
		"description": "Radius damage at landmine.",
		"example": "landminedamage local.landmine 100 150",
		"class": ["ScriptThread"],
		"gamever": ["BT"]
	},
	"last_enemy_visible_time": {
		"syntax": "last_enemy_visible_time",
		"description": "Get the last time the enemy was visible, in seconds.",
		"example": "local.result = local.actor.last_enemy_visible_time",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"launchsound": {
		"syntax": "launchsound( String Sound )",
		"description": "Set a launch sound for the projectile.",
		"example": "",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"lavaalpha": {
		"syntax": "lavaalpha( Float lavaAlpha )",
		"description": "Set the alpha of lava screen blend.",
		"example": "",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lavacolor": {
		"syntax": "lavacolor( Vector lavaColor )",
		"description": "Set the color of lava screen blend.",
		"example": "",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"leash": {
		"syntax": "leash( Float distance )",
		"description": "Sets/Gets the maximum distance the AI will wander from its leash home.",
		"example": "local.actor leash 2000\n// Or\nlocal.actor.leash = 2000\nlocal.result = local.actor.leash",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"leave_team": {
		"syntax": "leave_team",
		"description": "Leave the current team.",
		"example": "local.player leave_team",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"leftvector": {
		"syntax": "leftvector",
		"description": "Get the left vector of angles.",
		"example": "local.leftvector = local.entity.leftvector",
		"class": ["SimpleEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"letterbox": {
		"syntax": "letterbox( Float time )",
		"description": "Puts the game in letterbox mode.\nUse 'clearletterbox' to remove it.",
		"example": "letterbox 3",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"leveltransition": {
		"syntax": "leveltransition( String next_map )",
		"description": "Transitions to the next Level.\nStatistics to Map Loading, does not keep player data or game data.",
		"example": "setcvar \"g_gametype\" \"0\" // singleplayer required\nleveltransition \"m2l3\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"life": {
		"syntax": "life( Float life )",
		"description": "FuncBeam: Set the amount of time the beam stays on when activated.\nProjectile: Set the life of the projectile.\nSmokeGrenade: Sets how long the smoke emitter lives.",
		"example": "local.beam life 0\nlocal.projectile life 20.0",
		"class": ["FuncBeam", "Projectile", "SmokeGrenade"],
		"gamever": ["AA", "SH", "BT"]
	},
	"light": {
		"syntax": "light( Float red, Float green, Float blue, Float radius )",
		"description": "Create a dynmaic light on this entity.",
		"example": "local.entity light 1 0 0 250",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lightblue": {
		"syntax": "lightBlue( Float blue )",
		"description": "Set the blue component of the dynmaic light on this entity.",
		"example": "local.entity lightBlue 0.5",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lightgreen": {
		"syntax": "lightGreen( Float green )",
		"description": "Set the green component of the dynmaic light on this entity.",
		"example": "local.entity lightGreen 0.5",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lightoff": {
		"syntax": "lightOff",
		"description": "Turn the configured dynamic light on this entity off.",
		"example": "local.entity lightOff",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lighton": {
		"syntax": "lightOn",
		"description": "Turn the configured dynmaic light on this entity on.",
		"example": "local.entity lightOn",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lightradius": {
		"syntax": "lightRadius( Float red )",
		"description": "Set the radius of the dynmaic light on this entity.",
		"example": "local.entity lightRadius 300",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lightred": {
		"syntax": "lightRed( Float red )",
		"description": "Set the red component of the dynmaic light on this entity.",
		"example": "local.entity lightRed 0.5",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lightstyle": {
		"syntax": "lightStyle( Integer lightStyleIndex )",
		"description": "What light style (setlightstyle) to use for this dynamic light on this entity.",
		"example": "local.entity lightStyle 0",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"limit": {
		"syntax": "limit( Float newLimit )",
		"description": "Fulcrum: Angular limit for the fulcrum.\nSinkObject: Maximum displacement of the SinkObject.",
		"example": "",
		"class": ["Fulcrum", "SinkObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"linkdoor": {
		"syntax": "linkdoor",
		"description": "Link doors together.",
		"example": "",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"linkturret": {
		"syntax": "linkturret( String name )",
		"description": "Sets the next turret in the link.",
		"example": "local.vehicleTurretGunTandem linkturret \"models/vehicles/sherman_turret_hatch_e1l1.tik\"",
		"class": ["VehicleTurretGunTandem"],
		"gamever": ["SH", "BT"]
	},
	"lip": {
		"syntax": "lip( Float lip )",
		"description": "RunThrough: Distance below trigger we should spawn things.\nSlidingDoor: Sets the lip of the sliding door.",
		"example": "",
		"class": ["RunThrough", "SlidingDoor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"listinventory": {
		"syntax": "listinventory",
		"description": "List of the player's inventory.",
		"example": "$player listinventory // Prints the inventory to the console",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"load": {
		"syntax": "load( String filename )",
		"description": "Loads a camera path.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"loaded": {
		"syntax": "loaded",
		"description": "Gives player all new weapons.\n\nThis command valid for Spearhead and Breakthrough only.",
		"example": "local.player loaded",
		"class": ["Player"],
		"gamever": ["SH", "BT"]
	},
	"loc_convert_string": {
		"syntax": "loc_convert_string( String in )",
		"description": "Returns a localized version of the string.",
		"example": "iprintlnbold_noloc  \"90\" (loc_convert_string \" seconds to get to train\")",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"locatecamera": {
		"syntax": "locatecamera",
		"description": "Locates the camera position.",
		"example": "",
		"class": ["PortalSurface"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lock": {
		"syntax": "lock",
		"description": "Door: Lock the door.\nVehicle: Sets the vehicle to be locked.\nVehicleTurretGun: The Turret can not be used.",
		"example": "local.door lock\nlocal.vehicle lock",
		"class": ["Door", "Vehicle", "VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lockmovement": {
		"syntax": "lockmovement",
		"description": "The Vehicle cannot move.",
		"example": "local.vehicle lockmovement",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"locprint": {
		"syntax": "locprint( Integer Xoffset, Integer Yoffset, String stuffToPrint )",
		"description": "Prints the included message in the specified location of all player's screens.",
		"example": "locprint 320 230 \"Hello world!\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lod_angles": {
		"syntax": "lod_angles( Float pitch[0.00-360.00], Float yaw[0.00-360.00], Float roll[0.00-360.00] )",
		"description": "Set the angles of the model.",
		"example": "",
		"class": ["LODMaster"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lod_discard": {
		"syntax": "lod_discard",
		"description": "Discard LOD changes.",
		"example": "",
		"class": ["LODMaster"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lod_model": {
		"syntax": "lod_model",
		"description": "Set the model of the current viewthing.",
		"example": "",
		"class": ["LODSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lod_roll": {
		"syntax": "lod_roll( Float roll )",
		"description": "Set the roll of the model.",
		"example": "",
		"class": ["LODMaster"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lod_spawn": {
		"syntax": "lod_spawn( String model )",
		"description": "Edit LOD on the specified model.",
		"example": "",
		"class": ["LODMaster"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lod_think": {
		"syntax": "lod_think",
		"description": "Called every frame to process the view thing.",
		"example": "",
		"class": ["LODSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lod_yaw": {
		"syntax": "lod_yaw( Float yaw )",
		"description": "Set the yaw of the model.",
		"example": "",
		"class": ["LODMaster"],
		"gamever": ["AA", "SH", "BT"]
	},
	"logstats": {
		"syntax": "logstats( Boolean state )",
		"description": "Turn on/off the debugging playlog.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lookaroundangle": {
		"syntax": "lookaroundangle( Float angle )",
		"description": "Sets/Gets the angle in degrees left or right of center that the AI will look around while patrolling.",
		"example": "local.actor lookaroundangle 90\n// Or\nlocal.actor.lookaroundangle = 90\nlocal.lookaroundangle = local.actor.lookaroundangle",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"lookat": {
		"syntax": "lookat( Entity entity )",
		"description": "Actor:  The actor will look at this entity.\nCamera: Makes the camera look at an entity.",
		"example": "local.actor lookat local.entity\nlocal.camera lookat local.entity",
		"class": ["Actor", "Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"loop": {
		"syntax": "loop( [ Entity path ] )",
		"description": "CameraManager: Loop the current path or the specified one.\n\nSplinePath: loop( String loop_name )\nSets the loop name.",
		"example": "",
		"class": ["CameraManager", "SplinePath"],
		"gamever": ["AA", "SH", "BT"]
	},
	"loop_protection": {
		"syntax": "loop_protection( Integer loop_protection )",
		"description": "Sets/Gets if infinite loop protection is enabled.",
		"example": "level.loop_protection = 0\nlocal.result = level.loop_protection",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"loopfire": {
		"syntax": "loopfire",
		"description": "Makes the weapon fire by looping the fire animation.",
		"example": "local.weapon loopfire",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"loopsound": {
		"syntax": "loopsound( String soundName, [ Float volume ], [ String minimum_distance ] )",
		"description": "Play a looped-sound with a certain volume and minimum_distance\nwhich is attached to the current entity.",
		"example": "local.entity loopsound \"alarmbell\"\n// Or\nlocal.entity loopsound \"alarmbell\" 2 \"levelwide\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"low_wall_arc": {
		"syntax": "low_wall_arc( Float arc_half_angle )",
		"description": "Marks this node as good for low-wall behavior, and gives the arc.",
		"example": "",
		"class": ["PathNode"],
		"gamever": ["SH", "BT"]
	},
	"mainattachtotag": {
		"syntax": "mainattachtotag( String tagname )",
		"description": "Set the name of the tag to attach this to it's owner when being used.",
		"example": "local.weapon mainattachtotag \"eyes bone\"",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"makearray": {
		"syntax": "makeArray",
		"description": "Creates a two-dimensional HashArray\nAlways start their indexing at 1.",
		"example": "local.hasharray = makeArray\n\t1     2     3\n\t\"one\" \"two\" \"three\"\n\t\"uno\" \"dos\" \"tres\"\n\t\"uno\" \"due\" \"tre\"\n\t// etc...\nendArray\n\nprintln local.hasharray[2][1] // Prints: one",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"makenoise": {
		"syntax": "makenoise( [ Float noise_radius ], [ Boolean force ] )",
		"description": "Makes the weapon make noise that actors can hear.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"map": {
		"syntax": "map( String map_name )",
		"description": "ScriptThread: Starts the specified map.\nTriggerChangeLevel: Sets the map to change to when triggered.",
		"example": "",
		"class": ["ScriptThread", "TriggerChangeLevel"],
		"gamever": ["AA", "SH", "BT"]
	},
	"mass": {
		"syntax": "mass( Float massAmount )",
		"description": "Set the mass of this entity.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"max_health": {
		"syntax": "max_health( Integer max_health )",
		"description": "Sets max_health without changing health.\nGets the entity's max health.",
		"example": "local.entity max_health 300\n// Or\nlocal.entity.max_health = 300\nlocal.max_health = local.entity.max_health",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"max_time": {
		"syntax": "max_time( Float maxTime )",
		"description": "Maximum time between random spawns.",
		"example": "",
		"class": ["RandomSpawn"],
		"gamever": ["AA", "SH", "BT"]
	},
	"maxalpha": {
		"syntax": "maxalpha( Float alpha )",
		"description": "Sets maximum opacity of an individual smoke particle, in 0-1 range.",
		"example": "local.smoke_grenade maxalpha 0.8",
		"class": ["SmokeGrenade"],
		"gamever": ["SH", "BT"]
	},
	"maxamount": {
		"syntax": "maxamount( Integer max_amount )",
		"description": "Sets the max amount of the item.",
		"example": "",
		"class": ["Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"maxchargetime": {
		"syntax": "maxchargetime( Integer time )",
		"description": "Set the maximum time the weapon may be charged up.",
		"example": "local.weapon maxchargetime 4",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"maxdelay": {
		"syntax": "maxdelay( Float max_delay )",
		"description": "ProjectileGenerator: Maximum time between bursts. Default = 10\nRandomSpeaker: Sets the maximum time between playings.",
		"example": "",
		"class": ["ProjectileGenerator", "RandomSpeaker"],
		"gamever": ["AA", "SH", "BT"]
	},
	"maxdist": {
		"syntax": "maxdist( Float distance )",
		"description": "Sets/Gets the maximum distance the AI tries to allow between itself and the player.",
		"example": "local.actor maxdist 400\n// Or\nlocal.actor.maxdist = 400\nlocal.maxdist = local.actor.maxdist",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"maxdonut": {
		"syntax": "maxdonut( Float maxdonut )",
		"description": "Max extent of donut from player.",
		"example": "",
		"class": ["ProjectileGenerator_Projectile"],
		"gamever": ["SH", "BT"]
	},
	"maxduration": {
		"syntax": "maxDuration( Float maxDuration )",
		"description": "Sets the maximum duration of bursts (in seconds).\nDefault = 3.",
		"example": "",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"maxfiremovement": {
		"syntax": "maxfiremovement( Float speedmult )",
		"description": "Sets the max speed the player can be moving to fire the weapon (fraction of weapon's running speed).",
		"example": "local.weapon dm maxfiremovement 0.5",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"maxgibs": {
		"syntax": "maxgibs( Integer max_number_of_gibs )",
		"description": "Sets the maximum amount of generic gibs this sentient will spawn when hit.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"maxidlepitch": {
		"syntax": "maxIdlePitch( Float offset )",
		"description": "Sets the offset to trace to for collision checking when idling.",
		"example": "local.turret maxIdlePitch -5",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"maxidleyaw": {
		"syntax": "maxIdleYaw( Float offset )",
		"description": "Sets the offset to trace to for collision checking when idling.",
		"example": "local.turret maxIdleYaw 12",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"maxmouthangle": {
		"syntax": "maxmouthangle( Float max_mouth_angle )",
		"description": "Sets the max mouth angle.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"maxmovementsound": {
		"syntax": "maxmovementsound( String name )",
		"description": "Sets the weapon's movement fire prevention sound alias.",
		"example": "local.weapon maxmovementsound \"weapon_snd_noammo\"",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"maxnumshots": {
		"syntax": "MaxNumShots( Integer MaxNumShots )",
		"description": "Sets the maximum # of shots to fire in a cycle.\nDefault = 1",
		"example": "local.projectile_generator MaxNumShots 50",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"maxoffset": {
		"syntax": "maxoffset( Float max_offset )",
		"description": "Set the maximum offset the beam can travel above, below, forward or back of it's endpoints.",
		"example": "local.beam maxoffset 0.0",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"maxrange": {
		"syntax": "maxrange( Float maxRange )",
		"description": "Set the maximum range of a weapon so the AI knows how to use it.",
		"example": "local.weapon maxrange 1000",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"maxs": {
		"syntax": "maxs( Vector maxs )",
		"description": "Sets the maximum bounds of the trigger box.",
		"example": "",
		"class": ["TriggerBox"],
		"gamever": ["AA", "SH", "BT"]
	},
	"maxuseangle": {
		"syntax": "maxuseangle( Float maxuseangle )",
		"description": "Set max use angle to allow player to mount the turret.",
		"example": "local.turret maxuseangle 25",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"maxyawoffset": {
		"syntax": "maxYawOffset( Float maxoffset )",
		"description": "Sets the max yaw offset from the turrets central facing direction.",
		"example": "local.turret maxYawOffset 45",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"meansofdeath": {
		"syntax": "meansofdeath( String meansOfDeath )",
		"description": "Set the meansOfDeath of the weapon/projectile.",
		"example": "local.projectile meansofdeath \"rocket\"\nlocal.weapon meansofdeath \"bullet\"",
		"class": ["Projectile", "ProjectileGenerator_Gun", "Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"meleeattackend": {
		"syntax": "meleeattackend",
		"description": "Is the end of the sentient's melee attack.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"meleeattackstart": {
		"syntax": "meleeattackstart",
		"description": "Is the start of the sentient's melee attack.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"message": {
		"syntax": "message( String message )",
		"description": "Trigger: Set a message to be displayed when this trigger is activated.\nWorld: Set a message for the world.",
		"example": "local.trigger message \"Your message here\"",
		"class": ["Trigger", "World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"min_dist": {
		"syntax": "min_dist( Float min_dist )",
		"description": "Sets the minimum distance.",
		"example": "",
		"class": ["TriggerPlaySound"],
		"gamever": ["AA", "SH", "BT"]
	},
	"min_time": {
		"syntax": "min_time( Float minTime )",
		"description": "Minimum time between random spawns.",
		"example": "",
		"class": ["RandomSpawn"],
		"gamever": ["AA", "SH", "BT"]
	},
	"minchargetime": {
		"syntax": "minchargetime( Integer time )",
		"description": "Set the minimum time the weapon must be charged up.",
		"example": "local.grenade minchargetime 0.6",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"mindelay": {
		"syntax": "minDelay( Float MinDelay )",
		"description": "RandomSpeaker: Sets the minimum time between playings.\nProjectileGenerator: Minimum time between bursts.",
		"example": "",
		"class": ["RandomSpeaker", "ProjectileGenerator"],
		"gamever": ["AA", "SH", "BT"]
	},
	"mindist": {
		"syntax": "mindist( Float distance )",
		"description": "Sets/Gets the minimum distance the AI tries to keep between itself and the player.",
		"example": "local.actor mindist 128\n// Or\nlocal.actor.mindist = 128\nlocal.mindist = local.actor.mindist",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"mindonut": {
		"syntax": "mindonut( Float mindonut )",
		"description": "Min extent of donut from player.",
		"example": "",
		"class": ["ProjectileGenerator_Projectile"],
		"gamever": ["SH", "BT"]
	},
	"minduration": {
		"syntax": "minDuration( Float MinDuration )",
		"description": "Sets the minimum duration of the bursts (in seconds).\nDefault = 3",
		"example": "",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"minlife": {
		"syntax": "minlife( Float minProjectileLife )",
		"description": "Set the minimum life of the projectile (this is for charge up weapons).",
		"example": "local.projectile minlife 30",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"minnumshots": {
		"syntax": "minNumShots( Integer MinNumShots )",
		"description": "Sets the minimum # of shots to fire in a cycle.\nDefault = 1",
		"example": "",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"minoffset": {
		"syntax": "minoffset( Float min_offset )",
		"description": "Set the minimun offset the beam can travel above, below, forward or back of it's endpoints.",
		"example": "local.beam minoffset 0.0",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"minrange": {
		"syntax": "minrange( Float minRange )",
		"description": "Set the minimum range of a weapon so the AI knows how to use it.",
		"example": "local.weapon minrange 300",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"mins": {
		"syntax": "mins( Vector mins )",
		"description": "Sets the minimum bounds of the trigger box.",
		"example": "",
		"class": ["TriggerBox"],
		"gamever": ["AA", "SH", "BT"]
	},
	"minspeed": {
		"syntax": "minspeed( Float minspeed )",
		"description": "Set the minimum speed of the projectile (this is for charge up weapons).",
		"example": "local.projectile minspeed 600",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"missionfailed": {
		"syntax": "missionfailed( Integer novideofade )",
		"description": "Makes the player fail their mission.\nlevel restarts.",
		"example": "missionfailed",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"missiontransition": {
		"syntax": "missiontransition( String next_map, [ Boolean skipFade ] )",
		"description": "Transitions to the next Mission. Statistics to Main Menu, Next Level should be unlocked.",
		"example": "missiontransition \"m2l1\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"model": {
		"syntax": "model( String modelName )",
		"description": "Sets/Gets the model of the entity.\n\n<b>Available Classes:</b>\nAISpawnPoint, Entity, FuncBeam, Object\nProjectileGenerator, ScriptModel, ScriptOrigin\nScriptSlave, Trigger, TriggerClickItem, Vehicle",
		"example": "local.entity model \"models/furniture/table.tik\"\n// Or\nlocal.entity.model = \"models/furniture/table.tik\"\nlocal.model = local.entity.model",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"modelname": {
		"syntax": "modelname( String model_name )",
		"description": "Sets the model name for this spawn entity.",
		"example": "",
		"class": ["Spawn"],
		"gamever": ["AA", "SH", "BT"]
	},
	"modheight": {
		"syntax": "modheight( String height )",
		"description": "Change the maximum height of the player.\nCan specify \"stand\", \"duck\", \"duckrun\", or a specific height",
		"example": "local.player modheight \"duck\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"modheightfloat": {
		"syntax": "modheightfloat( Float height, Float max_z )",
		"description": "Specify the view height of the player and the height of his bounding box.",
		"example": "",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"modifydrive": {
		"syntax": "modifydrive( Float desired_speed, Float acceleration, Float look_ahead )",
		"description": "Modifys the parameters of the current drive.",
		"example": "local.vehicle modifydrive 5 100 256",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"modifyflypath": {
		"syntax": "modifyflypath( Float speed, Float acceleration, Float look_ahead )",
		"description": "Makes the script slave fly the specified path with speed and acceleration\nuntil reached_distance close to position.",
		"example": "local.script_object modifyflypath 150 150 100",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"mood": {
		"syntax": "mood( String new_mood )",
		"description": "Sets/Gets the AI mood... must be \"bored\", \"nervous\", \"curious\", or \"alert\".",
		"example": "local.actor.mood = \"bored\"\nlocal.actor_mood = local.actor.mood",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"motionfail": {
		"syntax": "motionfail",
		"description": "motionfail...",
		"example": "parm.motionfail",
		"class": ["Parm"],
		"gamever": ["AA", "SH", "BT"]
	},
	"move": {
		"syntax": "move",
		"description": "Move the script slave.",
		"example": "local.script_object move",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moveanim": {
		"syntax": "moveanim( String animName )",
		"description": "ScriptModel: Makes the script model play an animation and move with the deltas contained in the animation.\nVehicle: Move the vehicle with an animation.",
		"example": "local.object moveanim \"anim_name\"",
		"class": ["ScriptModel", "Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movebackward": {
		"syntax": "moveBackward( Float dist )",
		"description": "Move the position backward.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movedir": {
		"syntax": "movedir",
		"description": "Actor: Returns a unit vector pointing in the current direction of motion, or zero if not moving.\nThis still has meaning if velocity is zero but the AI is starting to move on a path.\n\nScriptDoor: Door's movedir.",
		"example": "local.vector_direction = local.actor.movedir",
		"class": ["Actor", "ScriptDoor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movedone": {
		"syntax": "movedone( Entity finishedEntity )",
		"description": "Mover: Sent to commanding thread when done with move.\nParm: movedone...",
		"example": "// Parm\nparm.movedone",
		"class": ["Mover", "Parm"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movedoneradius": {
		"syntax": "movedoneradius( Float radius )",
		"description": "Set the waittill movedone radius, default 0 means don't use manual radius.",
		"example": "local.actor.movedoneradius = 150",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movedown": {
		"syntax": "moveDown( Float dist )",
		"description": "Move the position down.",
		"example": "local.script_object moveDown 300",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moveeast": {
		"syntax": "moveEast( Float dist )",
		"description": "Move the position east.",
		"example": "local.script_object moveEast 300",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movefail": {
		"syntax": "movefail",
		"description": "movefail...",
		"example": "parm.movefail",
		"class": ["Parm"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moveforward": {
		"syntax": "moveForward( Float dist )",
		"description": "Move the position forward.",
		"example": "local.script_object moveForward 300",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moveleft": {
		"syntax": "moveLeft( Float dist )",
		"description": "Move the position left.",
		"example": "local.script_object moveLeft 300",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movementspeed": {
		"syntax": "movementspeed( Float speedmult )",
		"description": "Alters the movement speed of the player when he has the weapon out.",
		"example": "local.weapon movementspeed 0.8",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movementstealth": {
		"syntax": "movementstealth( Float scale )",
		"description": "Sets the current movement stealth scalar for the sentient.",
		"example": "local.entity movementstealth 0.75",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movenorth": {
		"syntax": "moveNorth( Float dist )",
		"description": "Move the position north.",
		"example": "local.script_object moveNorth 300",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moveoffset": {
		"syntax": "moveOffset( Vector dist )",
		"description": "Move the position by the offset vector.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moveplayer": {
		"syntax": "moveplayer",
		"description": "CameraManager: Move the player to the current path node position.\nSoundManager: Move the player to the current sound position.",
		"example": "",
		"class": ["CameraManager", "SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moveposflags": {
		"syntax": "moveposflags( String position, [ String movement ] )",
		"description": "Used by the state files to tell the game dll what the player is doing.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moveright": {
		"syntax": "moveRight( Float dist )",
		"description": "Move the position right.",
		"example": "local.script_object moveRight 300",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movesound": {
		"syntax": "movesound( String newSinkSound )",
		"description": "Sound played when fulcrum is moving.",
		"example": "",
		"class": ["Fulcrum"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movesouth": {
		"syntax": "moveSouth( Float dist )",
		"description": "Move the position south.",
		"example": "local.script_object moveSouth 300",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moveto": {
		"syntax": "moveto( … )",
		"description": "<b>Actor:</b> moveto( String anim, String dest )\nSpecify the location to move to, with animation anim.\n\n<b>Camera:</b> moveto( Entity ent )\nMove the camera's position to that of the specified entities.\n\n<b>ScriptSlave:</b> moveto( String vector_or_entity )\nMove to the specified vector or entity.",
		"example": "local.actor moveto \"anim_name\" $node\nlocal.camera moveto $target_ent\nlocal.script_object moveto $target.origin",
		"class": ["Actor", "Camera", "ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movetopos": {
		"syntax": "movetopos( Vector position )",
		"description": "Move the camera's position to the specified position.",
		"example": "local.camera movetopos ( -1340 895 247 )",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moveup": {
		"syntax": "moveUp( Float dist )",
		"description": "Move the position up.",
		"example": "local.script_object moveUp 300",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"movewest": {
		"syntax": "moveWest( Float dist )",
		"description": "Move the position west.",
		"example": "local.script_object moveWest 300",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"moving_from_anim": {
		"syntax": "moving_from_anim",
		"description": "The script model is moving based on an animation.",
		"example": "local.result = local.entity.moving_from_anim",
		"class": ["ScriptModel "],
		"gamever": ["SH", "BT"]
	},
	"mprint": {
		"syntax": "mprint( String string )",
		"description": "Prints a string.",
		"example": "mprint \"Hello World!\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"mprintln": {
		"syntax": "mprintln( String string )",
		"description": "Prints a string, followed by a newline.",
		"example": "mprintln \"Hello World!\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"multifaceted": {
		"syntax": "multifaceted( Integer facetDirection )",
		"description": "Make this trigger multifaceted.\nIf facet is 1, then trigger is North/South oriented.\nIf facet is 2, then trigger is East/West oriented.\nIf facet is 3, then trigger is Up/Down oriented.",
		"example": "",
		"class": ["Trigger"],
		"gamever": ["AA", "SH", "BT"]
	},
	"mumble": {
		"syntax": "mumble( Integer can_mumble )",
		"description": "Set to 1 if this guy is allowed to mumble, or 0 if he is not\nReturns 1 if this guy is allowed to mumble, or 0 if he is not.",
		"example": "local.actor mumble 1\n// Or\nlocal.actor.mumble = 1\nlocal.result = local.actor.mumble",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"music": {
		"syntax": "music( String current, [ String fallback ] )",
		"description": "Sets the current and fallback (optional) music moods.",
		"example": "soundtrack \"music/mymusic.mus\"\nmusic \"aux1\" \"normal\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"musicvolume": {
		"syntax": "musicvolume( Float volume, Float fade_time )",
		"description": "Sets the volume and fade time of the music.",
		"example": "soundtrack \"music/mymusic.mus\"\nmusicvolume 1.0 2.0",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"name": {
		"syntax": "name( String name )",
		"description": "<b>Item:</b> Sets the item name.\n<b>Vehicle:</b> Set the name for the vehicle (SH & BT only).",
		"example": "",
		"class": ["Item", "Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nationality": {
		"syntax": "nationality( String nationality )",
		"description": "Sets/Gets the nationality of an actor.\nValid entries are: default, ger, it, usa, uk, and ussr.\nReturn values are: ger, it, usa, uk, ussr and unset.",
		"example": "local.actor nationality \"it\"\n// Or\nlocal.actor.nationality = \"it\"\nlocal.nationality = local.actor.nationality",
		"class": ["Actor"],
		"gamever": ["BT"]
	},
	"nationalityprefix": {
		"syntax": "nationalityprefix",
		"description": "Get the three or five letter prefix that denotes the player's nationality.",
		"example": "local.player.nationalityprefix",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"netname": {
		"syntax": "netname( Entity player )",
		"description": "Gets player's name and returns it as string.",
		"example": "// Breakthrough\nlocal.player_name = local.player.netname\n// Reborn\nlocal.player_name = netname local.player",
		"class": ["Player", "ScriptThread"],
		"gamever": ["BT", "REBORN"]
	},
	"neverdraw": {
		"syntax": "neverdraw",
		"description": "Sets this entity to never draw.",
		"example": "local.entity neverdraw",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"new": {
		"syntax": "new",
		"description": "Starts a new path.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"next": {
		"syntax": "next",
		"description": "CameraManager: Go to the next path node.\nScriptSlave: Goto the next waypoint.\nSoundManager: Go to the next sound.",
		"example": "",
		"class": ["CameraManager", "ScriptSlave", "SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nextcamera": {
		"syntax": "nextcamera( String nextCamera )",
		"description": "Sets the next camera to use.",
		"example": "",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nextdrive": {
		"syntax": "nextdrive( Entity next_path )",
		"description": "Appends the specified path to the current path.",
		"example": "local.vehicle nextdrive $vehicle_path_2",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nextmap": {
		"syntax": "nextmap( String nextMap )",
		"description": "Set the next map to change to.",
		"example": "$world nextmap \"dm/mohdm1\"",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nextpaintime": {
		"syntax": "nextpaintime( Float seconds )",
		"description": "Set the next time the player experiences pain (Current time + seconds specified).",
		"example": "local.player nextpaintime 0.05",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nextpath": {
		"syntax": "nextpath",
		"description": "Go to the next path.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"no_idle": {
		"syntax": "no_idle",
		"description": "Sets/Gets if the actor will not go into idle after playing an animation.",
		"example": "local.actor.no_idle = 1\nlocal.no_idle = local.actor.no_idle",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"no_remove": {
		"syntax": "no_remove",
		"description": "Makes it so the item is not removed from the world when it is picked up.",
		"example": "local.item no_remove",
		"class": ["Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"noammosound": {
		"syntax": "noammosound( String name )",
		"description": "Sets the weapon's dry fire sound alias.",
		"example": "local.weapon noammosound \"bar_snd_noammo\"",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"noanimlerp": {
		"syntax": "noanimlerp",
		"description": "Do not LERP to the next animation.",
		"example": "",
		"class": ["SimpleActor"],
		"gamever": ["SH", "BT"]
	},
	"noclip": {
		"syntax": "noclip",
		"description": "Toggles the noclip cheat.",
		"example": "local.player noclip",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nodamage": {
		"syntax": "nodamage",
		"description": "Entity does not take damage.",
		"example": "local.entity nodamage",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nodrophealth": {
		"syntax": "nodrophealth( Integer nodrophealth )",
		"description": "zero = automatically drop health according to cvars.\nnon-zero = don't autodrop health (like hard mode).",
		"example": "level.nodrophealth = 1",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nodropweapons": {
		"syntax": "nodropweapons( Integer nodropweapons )",
		"description": "zero = automatically drop weapons.\nnon-zero = don't autodrop weapons.",
		"example": "level.nodropweapons = 1",
		"class": ["Level"],
		"gamever": ["BT"]
	},
	"noise": {
		"syntax": "noise( String sound )",
		"description": "FallingRock: Set the sound to play when the rock bounces.\nTrigger: Set the sound to play when this trigger is activated.",
		"example": "local.trigger noise \"activate_sound\"",
		"class": ["FallingRock", "Trigger"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nolongpain": {
		"syntax": "nolongpain( Integer allow )",
		"description": "Sets/Gets if long pain is allowed or not.\n1 = long pain is not allowed.\n0 = long pain is allowed.",
		"example": "local.actor nolongpain 1\n// Or\nlocal.actor.nolongpain = 1\nlocal.nolongpain = local.actor.nolongpain",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"noncinematic": {
		"syntax": "noncinematic",
		"description": "Turns off cinematic.",
		"example": "noncinematic",
		"class": ["ScriptThread "],
		"gamever": ["AA", "SH", "BT"]
	},
	"nonvislevel": {
		"syntax": "nonvislevel",
		"description": "Visibility level in range 0-1 below which an enemy is treated as non-visible",
		"example": "local.actor nonvislevel 0.5\n// Or\nlocal.actor.nonvislevel = 0.5\nlocal.nonvislevel = local.actor.nonvislevel",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"normal_damage": {
		"syntax": "normal_damage",
		"description": "The Normal Health of the Actor (0 - 100).",
		"example": "",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"normal_health": {
		"syntax": "normal_health",
		"description": "The Normal Health of the entity.",
		"example": "local.entity.normal_health",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"normalangles": {
		"syntax": "normalangles( Boolean bUseNormalAngles )",
		"description": "Sets the object to use normal angles when travelling on a spline path.",
		"example": "local.script_object normalangles 1",
		"class": ["ScriptSlave"],
		"gamever": ["SH", "BT"]
	},
	"normaldraw": {
		"syntax": "normaldraw",
		"description": "Sets this entity to normal draw.",
		"example": "local.entity normaldraw",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"northyaw": {
		"syntax": "northyaw( Float yaw )",
		"description": "Sets the yaw direction that is considered to be north.",
		"example": "$world northyaw 180",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"noshadow": {
		"syntax": "noshadow",
		"description": "Turns off the shadow for this sentient.",
		"example": "local.actor noshadow",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nosurprise": {
		"syntax": "nosurprise( Integer nosurprise )",
		"description": "Set to 0 to allow this guy to play a surprised animation when first encountering an enemy.\nGets whether or not this guy is allowed to play a surprised animation when first encountering an enemy.",
		"example": "local.actor nosurprise 0\n// Or\nlocal.actor.nosurprise = 0\nlocal.nosurprise = local.actor.nosurprise",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"notactive": {
		"syntax": "notactive",
		"description": "Make the SinkObject not active, so that it won't respond to players touching it.",
		"example": "local.sink_object notactive",
		"class": ["SinkObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"notarget": {
		"syntax": "notarget( Boolean setNoTarget )",
		"description": "Entity: Flag an entity as no target (Spearhead & Breakthrough only).\nPlayer: Toggles the notarget cheat.",
		"example": "local.entity notarget 1 // Spearhead & Breakthrough only\nlocal.player notarget",
		"class": ["Entity", "Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"notdroppable": {
		"syntax": "notdroppable",
		"description": "Makes a weapon not droppable.",
		"example": "local.weapon notdroppable",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"noticescale": {
		"syntax": "noticescale",
		"description": "Sets/Gets the max multiplier in time to notice an enemy.\n(default 100, half as big notices twice as fast)",
		"example": "local.actor noticescale 1\n// Or\nlocal.actor.noticescale = 1\nlocal.noticescale = local.actor.noticescale",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"notouchdamage": {
		"syntax": "notouchdamage",
		"description": "Makes the projectile not blow up or deal damage when it touches a damagable object",
		"example": "local.projectile notouchdamage",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"notready": {
		"syntax": "notready",
		"description": "Makes this player not ready for the round to start.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"notshootable": {
		"syntax": "notshootable",
		"description": "Makes the script slave not shootable.",
		"example": "local.script_object notshootable",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"notsolid": {
		"syntax": "notsolid",
		"description": "Make the entity non-solid.",
		"example": "local.entity notsolid",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nottriggerable": {
		"syntax": "nottriggerable",
		"description": "Turn this trigger off.",
		"example": "local.trigger nottriggerable",
		"class": ["Trigger", "TriggerCameraUse"],
		"gamever": ["AA", "SH", "BT"]
	},
	"nowatch": {
		"syntax": "nowatch( [ Float fadeTime ] )",
		"description": "Camera:\nStop watching an entity or looking along a path.\nCamera is now static as far as orientation.\nIf fadeTime is specified, camera will fade over that time.\n\nCameraManager:\nSet the current path node to watch nothing.",
		"example": "local.camera nowatch 2.5",
		"class": ["Camera", "CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"num_loops": {
		"syntax": "num_loops( Integer loopCount )",
		"description": "Set the number of times to loop an animation per use.",
		"example": "local.useanim num_loops 3",
		"class": ["UseAnim", "UseAnimDestination"],
		"gamever": ["AA", "SH", "BT"]
	},
	"numarenas": {
		"syntax": "numarenas( Integer numarenas )",
		"description": "Set the number of arenas in the world.",
		"example": "",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"numfireanims": {
		"syntax": "numfireanims( Integer value )",
		"description": "Sets the number of fire animations this weapon uses.",
		"example": "local.weapon numfireanims 6",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"numsegments": {
		"syntax": "numsegments( Integer numsegments )",
		"description": "Set the number of segments for the beam.",
		"example": "local.beam numsegments 10",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"numspherebeams": {
		"syntax": "numspherebeams( Integer num )",
		"description": "Set the number of beams that will be shot out in a sphere like formation.",
		"example": "local.beam numspherebeams 10",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"objectivebased": {
		"syntax": "objectivebased",
		"description": "Gets whether or not the game is currently objective based or not.",
		"example": "local.result = level.objectivebased",
		"class": ["Level"],
		"gamever": ["SH", "BT"]
	},
	"objectivecount": {
		"syntax": "objectivecount( Integer num_completed, Integer out_of )",
		"description": "Sets the number of objectives completed and the total number of objectives.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"objectivenbr": {
		"syntax": "ObjectiveNbr( Integer index )",
		"description": "Sets the objective number.",
		"example": "",
		"class": ["Objective"],
		"gamever": ["SH", "BT"]
	},
	"off": {
		"syntax": "off",
		"description": "Turn the gunfire off.",
		"example": "",
		"class": ["ScriptSimpleStrafingGunfire"],
		"gamever": ["SH", "BT"]
	},
	"offhandattachtotag": {
		"syntax": "offhandattachtotag( String tagname )",
		"description": "Set the name of the tag to attach this to it's owner's off hand.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"offset": {
		"syntax": "offset( … )",
		"description": "<b>RunThrough:</b>\noffset( Vector spawn_offset )\nWhen triggered, what to offset the spawned object by.\n\n<b>UseObject:</b>\noffset( Vector newOffset )\nSets the offset to use for this UseObject.\n\n<b>SmokeGrenade:</b> (SH & BT only)\noffset( Float offset_x, Float offset_y, Float offset_z )\nSets offset of the smoke volume from the entity.",
		"example": "",
		"class": ["RunThrough", "UseObject", "SmokeGrenade"],
		"gamever": ["AA", "SH", "BT"]
	},
	"on": {
		"syntax": "on",
		"description": "Turn the gunfire on.",
		"example": "",
		"class": ["ScriptSimpleStrafingGunfire"],
		"gamever": ["SH", "BT"]
	},
	"oneshot": {
		"syntax": "oneshot",
		"description": "Make this a one time trigger.",
		"example": "",
		"class": ["TriggerGivePowerup", "TriggerMusic", "TriggerReverb"],
		"gamever": ["AA", "SH", "BT"]
	},
	"onfire": {
		"syntax": "onfire",
		"description": "Called every frame when the sentient is on fire.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"open": {
		"syntax": "open( Entity other )",
		"description": "Opens the door.",
		"example": "local.door open $world",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"openangle": {
		"syntax": "openangle( Float open_angle )",
		"description": "Sets the open angle of the door.\nHow wide to open the door.",
		"example": "local.door openangle 90",
		"class": ["RotatingDoor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"opendot": {
		"syntax": "opendot",
		"description": "Door's open dot product.",
		"example": "",
		"class": ["ScriptDoor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"openportal": {
		"syntax": "openportal",
		"description": "Open the area portal enclosed in this object.",
		"example": "local.script_object openportal",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"orbit": {
		"syntax": "orbit( Entity targetEnt, [ Entity targetWatchEnt ] )",
		"description": "Makes the camera orbit around an entity and optionally watch an entity.",
		"example": "local.camera orbit local.entity",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"orbit_height": {
		"syntax": "orbit_height( Float height )",
		"description": "Sets the orbit camera's height.",
		"example": "local.camera orbit_height 100",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"orientedbbox": {
		"syntax": "orientedbbox( Vector mins, Vector maxs, Float yawoffset )",
		"description": "Spawn an oriented bounding box with the given dimensions and an angular offset.\nmins = Min dimensions of box.\nmaxs = Max dimensions of box.\nyawoffset = Angular offset orientation of box.",
		"example": "local.damagemodel orientedbbox \"-8 -8 0\" \"166 8 108\" 0",
		"class": ["DamageModel"],
		"gamever": ["SH", "BT"]
	},
	"origin": {
		"syntax": "origin( Vector newOrigin )",
		"description": "Sets/Gets the origin of the entity.",
		"example": "local.entity origin ( 300 -2450 130 )\n// Or\nlocal.entity.origin = ( 300 -2450 130 )\nlocal.origin = local.entity.origin",
		"class": ["SimpleEntity", "InfoLandmark"],
		"gamever": ["AA", "SH", "BT"]
	},
	"other": {
		"syntax": "other",
		"description": "other...",
		"example": "parm.other",
		"class": ["Parm"],
		"gamever": ["AA", "SH", "BT"]
	},
	"overcooked": {
		"syntax": "overcooked",
		"description": "Used when the cookable weapon has been over cooked.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"overcooked_warning": {
		"syntax": "overcooked_warning",
		"description": "Causes a warning sound to play that the grenade is about to be overcooked.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"overlap": {
		"syntax": "overlap( Float beam_overlap )",
		"description": "Set the amount of overlap the beams have when they are being strung together.",
		"example": "",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"owner": {
		"syntax": "owner",
		"description": "Returns the owner.",
		"example": "local.listener.owner\nparm.owner",
		"class": ["Listener", "Parm", "VehicleCollisionEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pain": {
		"syntax": "pain( Entity attacker, Float damage, Entity inflictor, Vector position, Vector direction,\nVector normal, Integer knockback, Integer damageflags, Integer meansofdeath, Integer location )",
		"description": "Used to inflict pain to an entity.",
		"example": "local.ent_victim pain local.ent_attacker 100 local.ent_inflictor ( 0 0 0 ) ( 0 270 0 ) ( 0 0 0 ) 0 5 0 0",
		"class": ["Actor", "Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"painhandler": {
		"syntax": "painhandler",
		"description": "Sets/Gets the current script that will handle pain events.",
		"example": "local.actor.painhandler = \"anim/pain.scr\"\nlocal.painhandler = local.actor.painhandler",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"papers": {
		"syntax": "papers",
		"description": "The level of papers the player currently has.",
		"example": "level.papers = 1\nlocal.result = level.papers",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"path_relativeyaw": {
		"syntax": "path_relativeyaw( Float relativeYaw )",
		"description": "Makes the script slave follow the specified path with a yaw offset.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["SH", "BT"]
	},
	"pathdist": {
		"syntax": "pathdist",
		"description": "Returns total distance along current path to the path goal.",
		"example": "local.result = local.actor.pathdist",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pathdrivable": {
		"syntax": "pathDrivable( Boolean pathDrivable )",
		"description": "Make the vehicle drivable along a path.",
		"example": "local.vehicle pathDrivable 1",
		"class": ["Vehicle"],
		"gamever": ["BT"]
	},
	"patrolpath": {
		"syntax": "patrolpath( String value )",
		"description": "Sets/Gets the name of the patrol path for the actor (must have type set to patrol for effect).",
		"example": "local.actor patrolpath \"patrolpath03b\"\n// Or\nlocal.actor.patrolpath = \"patrolpath03b\"\nlocal.patrolpath = local.actor.patrolpath",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pause": {
		"syntax": "pause",
		"description": "Camera: Pause the camera.\nScriptThread: Pauses the thread.",
		"example": "// Camera\nlocal.camera pause\n// ScriptThread\npause",
		"class": ["Camera", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pauseanims": {
		"syntax": "pauseanims( Integer pause )",
		"description": "Pause (or unpause) animations.",
		"example": "local.entity pauseanims 1 // pause\nlocal.entity pauseanims 0 // unpause",
		"class": ["Animate"],
		"gamever": ["SH", "BT"]
	},
	"perferredweapon": {
		"syntax": "perferredweapon( String weapon_name )",
		"description": "Overrides your perferred weapon that is displayed in the stats screen.",
		"example": "$player perferredweapon \"88mm Tank Gun\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"persist": {
		"syntax": "persist( Boolean bool )",
		"description": "Set the persist property of the beam.",
		"example": "local.beam persist 1",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"physics_off": {
		"syntax": "physics_off",
		"description": "Turn physics off.",
		"example": "local.script_object physics_off",
		"class": ["Actor", "Player", "ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"physics_on": {
		"syntax": "physics_on( [ Integer no_collide_entity ] )",
		"description": "Turn physics on.\nScriptSlave: If no_collide_entity is set to 1\nthen the script slave will not collide with other entities.",
		"example": "local.player physics_on\nlocal.script_object physics_on 1",
		"class": ["Actor", "Player", "ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"physics_velocity": {
		"syntax": "physics_velocity( Vector impulseVector )",
		"description": "Add a physical impulse to an object when it is being physically simulated.",
		"example": "local.script_object physics_velocity ( 0 130 50 )",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pickup": {
		"syntax": "pickup( Entity entity, String tag_name )",
		"description": "Picks up this throw object and attaches it to the entity.",
		"example": "",
		"class": ["ThrowObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pickup_done": {
		"syntax": "pickup_done",
		"description": "Called when the item pickup is done.",
		"example": "",
		"class": ["Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pickup_thread": {
		"syntax": "pickup_thread( String threadName )",
		"description": "Sets the pickup thread for the spawned entity.",
		"example": "",
		"class": ["Spawn"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pickupoffset": {
		"syntax": "pickupoffset( Vector pickup_offset )",
		"description": "Sets the pickup_offset.",
		"example": "",
		"class": ["ThrowObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pickupsound": {
		"syntax": "pickupsound( String name )",
		"description": "Sets the item's pickup sound alias.",
		"example": "local.item pickupsound \"item_snd_pickup\"",
		"class": ["Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pickweapon": {
		"syntax": "pickweapon",
		"description": "Pick your weapon.",
		"example": "",
		"class": ["Player"],
		"gamever": ["SH", "BT"]
	},
	"pingformines": {
		"syntax": "pingformines",
		"description": "Actively uncover mines nearby.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["BT"]
	},
	"pitchcaps": {
		"syntax": "pitchCaps( Vector caps )",
		"description": "Sets the pitch caps for the turret.\nFirst number is upward cap, second is downward cap, and the third just makes it nice little vector.",
		"example": "local.turret pitchcaps ( 0 45 0 )",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pitchspeed": {
		"syntax": "pitchSpeed( Float speed )",
		"description": "Sets the turret's pitch speed.",
		"example": "local.turret pitchspeed 15",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"placeturret": {
		"syntax": "placeturret",
		"description": "Try to place the carryable turret.",
		"example": "",
		"class": ["CarryableTurret"],
		"gamever": ["SH", "BT"]
	},
	"planting_team": {
		"syntax": "planting_team",
		"description": "Sets/Gets which team is planting the bomb, 'axis' or 'allies'.",
		"example": "level planting_team \"allies\"\n// Or\nlevel.planting_team = \"allies\"\nlocal.planting_team = level.planting_team",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"play": {
		"syntax": "play( [ Entity path ] )",
		"description": "Play the current path or the specified one once.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"playerspawn": {
		"syntax": "playerspawn( String model_name, [ Float range ], [ Vector vector_offset ], [ Float inFOV ], [ Float speed ] )",
		"description": "Spawn something near the player, either within the player's view or behind him.\n<b>model_name:</b> Name of model to spawn.\n<b>range:</b> How close does this need to be to the player to actually get spawned, default 480 (30 foot radius).\n<b>vector_offset:</b> Oriented vector offset of where to spawn the item, default ( 0 0 0 )\n<b>inFOV:</b>\n1 = Only spawn when this position is within the FOV of the player\n-1 = Only spawn when this position is outside the FOV of the player\n0 = (default) Don't care, always spawn\n<b>speed:</b> How fast the effect should travel, in other words, how long before the effect gets spawned.\nDelay is calculated based on the distance between object and player divided by the speed.\n0 = no delay\n960 = (default) 60 feet per second. If the object is 60 feet from the player, the player effect will spawn one second later.",
		"example": "",
		"class": ["Animate"],
		"gamever": ["SH", "BT"]
	},
	"playmovie": {
		"syntax": "playmovie( String name )",
		"description": "Play a Movie...",
		"example": "playmovie \"briefinge1.roq\"",
		"class": ["ScriptThread"],
		"gamever": ["SH", "BT"]
	},
	"playpreimpact": {
		"syntax": "playpreimpact",
		"description": "Play a pre-impact sound.",
		"example": "",
		"class": ["ProjectileGenerator_Projectile"],
		"gamever": ["SH", "BT"]
	},
	"playreloadsound": {
		"syntax": "playreloadsound",
		"description": "Play the turret reload sound.",
		"example": "local.vehicle_turret_gun playreloadsound",
		"class": ["VehicleTurretGun"],
		"gamever": ["BT"]
	},
	"playsound": {
		"syntax": "playsound( String soundName, [ Integer channel ], [ Float volume ], [ Float min_distance ], [ Float pitch ] )",
		"description": "Play a sound coming from this entity. Default channel, CHAN_BODY.\n\nSound channel priority from lowest to highest is:\n0 = auto\n1 = body\n2 = item\n3 = weaponidle\n4 = voice\n5 = local\n6 = weapon\n7 = dialog_secondary\n8 = dialog\n9 = menu",
		"example": "local.entity playsound \"soundname\"",
		"class": ["Actor", "Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pointat": {
		"syntax": "pointat( Entity entity )",
		"description": "The actor will point at this entity.",
		"example": "level.actor pointat local.entity",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pophelmet": {
		"syntax": "pophelmet",
		"description": "Pops a sentient's helmet off if he's got one.",
		"example": "local.actor pophelmet",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"popmenu": {
		"syntax": "popmenu( Integer index )",
		"description": "Pop menu.",
		"example": "popmenu 0",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"position": {
		"syntax": "position",
		"description": "Sets/Gets the Position the Actor wants to be and should animate towards.",
		"example": "local.actor.position = \"prone\"\nlocal.position = local.actor.position",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"powerupname": {
		"syntax": "powerupname( String powerup_name )",
		"description": "Specifies the powerup to give to the sentient.",
		"example": "",
		"class": ["TriggerGivePowerup"],
		"gamever": ["AA", "SH", "BT"]
	},
	"poweruptimer": {
		"syntax": "poweruptimer( Integer poweruptimer, Integer poweruptype )",
		"description": "Sets the powerup timer and powerup type.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"prealarmthread": {
		"syntax": "prealarmthread( String value )",
		"description": "Sets the name of the pre alarm thread for the actor.\n(Must have type set to alarm for effect).",
		"example": "local.actor prealarmthread \"label\"\n//Or\nlocal.actor.prealarmthread = \"label\"",
		"class": ["Actor"],
		"gamever": ["BT"]
	},
	"preimpactsound": {
		"syntax": "preimpactsound( String Sound )",
		"description": "Set a pre-impact sound.",
		"example": "",
		"class": ["ProjectileGenerator_Projectile"],
		"gamever": ["SH", "BT"]
	},
	"preimpactsoundprob": {
		"syntax": "preimpactsoundprob( Float probability )",
		"description": "Set the chance for a pre-impact sound to occur.\nRange: ( 0.0, 1.0 ), with 0 having no chance, and 1 always occurring.",
		"example": "",
		"class": ["ProjectileGenerator_Projectile"],
		"gamever": ["SH", "BT"]
	},
	"preimpactsoundtime": {
		"syntax": "preimpactsoundtime( Float delay )",
		"description": "Set the time before impact to play the preimpact sound.",
		"example": "",
		"class": ["ProjectileGenerator_Projectile"],
		"gamever": ["SH", "BT"]
	},
	"prespawnsentient": {
		"syntax": "prespawnsentient",
		"description": "Internal usage.",
		"example": "",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"prethink": {
		"syntax": "prethink",
		"description": "Make the projectile think to update it's velocity.",
		"example": "local.projectile prethink",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"prev": {
		"syntax": "prev",
		"description": "CameraManager: Go to the previous path node.\nSoundManager: Go to the previous sound.",
		"example": "",
		"class": ["CameraManager", "SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"previewreverb": {
		"syntax": "previewreverb",
		"description": "Test out the current reverb settings.",
		"example": "",
		"class": ["SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"previousthread": {
		"syntax": "previousthread",
		"description": "Returns the previous thread.",
		"example": "local.previousthread = parm.previousthread",
		"class": ["Parm"],
		"gamever": ["AA", "SH", "BT"]
	},
	"prevpath": {
		"syntax": "prevpath",
		"description": "Go to the previous path.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"primarydmweapon": {
		"syntax": "primarydmweapon( String weaptype )",
		"description": "Sets the player's primary DM weapon.\n\nrifle, sniper, smg,\nmg, heavy, shotgun\nand landmine (Breakthrough)",
		"example": "local.player primarydmweapon \"sniper\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"primaryfireheld": {
		"syntax": "primaryfireheld",
		"description": "Returns 1 if this player is holding the primary fire, or 0 if not.",
		"example": "local.result = local.player.primaryfireheld",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"print": {
		"syntax": "print( String string )",
		"description": "Prints a string.",
		"example": "print \"Hello\"\nprintln \" World!\"\n// Prints: Hello World!",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"print3d": {
		"syntax": "print3d( Vector origin, Float scale, String string )",
		"description": "Prints a string in 3D space.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"println": {
		"syntax": "println( String string1, [ String string2 ], … )",
		"description": "Prints a string, followed by a newline.",
		"example": "println \"Hello World!\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"projectile": {
		"syntax": "projectile( String projectileModel )",
		"description": "Set the model of the projectile that this weapon fires.",
		"example": "local.weapon projectile \"models/projectiles/bazookashell.tik\"",
		"class": ["Weapon", "ProjectileGenerator_Heavy", "ProjectileGenerator_Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"projectilevulnerable": {
		"syntax": "projectilevulnerable( [ Integer number_of_hits ] )",
		"description": "Make vehicle vulnerable to being one-shot by projectiles.\nIf number_of_hits is given, it will take this many shots.",
		"example": "local.vehicle projectilevulnerable",
		"class": ["Vehicle"],
		"gamever": ["BT"]
	},
	"psetviewangles": {
		"syntax": "psetviewangles( Vector offset )",
		"description": "Sets the view angles.",
		"example": "local.turret psetviewangles ( 0 270 0 )",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"pusher": {
		"syntax": "pusher( Entity inflictor, Entity attacker, Vector direction, Float force )",
		"description": "Push an entity in the specified direction with the specified force.",
		"example": "local.pushed_entity pusher local.pusher local.pusher (angles_toforward local.pusher.viewangles) 300",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pushmenu": {
		"syntax": "pushmenu( String name )",
		"description": "Push menu.",
		"example": "pushmenu \"main\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"pushsound": {
		"syntax": "pushsound( String sound )",
		"description": "Set the pushing sound.",
		"example": "",
		"class": ["PushObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"putawayweapon": {
		"syntax": "putawayweapon( String whichHand )",
		"description": "Put away or deactivate the current weapon, whichHand can be: left, right or dual.",
		"example": "local.player putawayweapon \"right\"",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"querydriverslotangles": {
		"syntax": "QueryDriverSlotAngles( Integer slot )",
		"description": "Returns the angles of the specified slot on the vehicle.",
		"example": "local.result = local.vehicle QueryDriverSlotAngles 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"querydriverslotentity": {
		"syntax": "QueryDriverSlotEntity( Integer slot )",
		"description": "Returns an entity at the specified slot.",
		"example": "local.result = local.vehicle QueryDriverSlotEntity 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"querydriverslotposition": {
		"syntax": "QueryDriverSlotPosition( Integer slot )",
		"description": "Returns the position of the specified slot on the vehicle.",
		"example": "local.result = local.vehicle QueryDriverSlotPosition 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"querydriverslotstatus": {
		"syntax": "QueryDriverSlotStatus( Integer slot )",
		"description": "Returns the status of the specified slot on the vehicle.",
		"example": "local.result = local.vehicle QueryDriverSlotStatus 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"queryfreedriverslot": {
		"syntax": "QueryFreeDriverSlot",
		"description": "Returns a number that represents the first free driver slot on the vehicle.",
		"example": "local.result = local.vehicle QueryFreeDriverSlot",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"queryfreepassengerslot": {
		"syntax": "QueryFreePassengerSlot",
		"description": "Returns a number that represents the first free passenger slot on the vehicle.",
		"example": "local.result = local.vehicle QueryFreePassengerSlot",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"queryfreeturretslot": {
		"syntax": "QueryFreeTurretSlot",
		"description": "Returns a number that represents the first free turret slot on the vehicle.",
		"example": "local.result = local.vehicle QueryFreeTurretSlot",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"querypassengerslotentity": {
		"syntax": "QueryPassengerSlotEntity( Integer slot )",
		"description": "Returns an entity at the specified slot.",
		"example": "local.result = local.vehicle QueryPassengerSlotEntity 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"querypassengerslotposition": {
		"syntax": "QueryPassengerSlotPosition( Integer slot )",
		"description": "Returns the position of the specified slot on the vehicle.",
		"example": "local.result = local.vehicle QueryPassengerSlotPosition 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"querypassengerslotstatus": {
		"syntax": "QueryPassengerSlotStatus( Integer slot )",
		"description": "Returns the status of the specified slot on the vehicle.",
		"example": "local.result = local.vehicle QueryPassengerSlotStatus 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"queryspeed": {
		"syntax": "QuerySpeed",
		"description": "Returns the current speed of the vehicle.",
		"example": "local.result = local.vehicle QuerySpeed",
		"class": ["Vehicle"],
		"gamever": ["BT"]
	},
	"queryturretslotentity": {
		"syntax": "QueryTurretSlotEntity( Integer slot )",
		"description": "Returns an entity at the specified slot.",
		"example": "local.result = local.vehicle QueryTurretSlotEntity 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"queryturretslotposition": {
		"syntax": "QueryTurretSlotPosition( Integer slot )",
		"description": "Returns the position of the specified slot on the vehicle.",
		"example": "local.result = local.vehicle QueryTurretSlotPosition 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"queryturretslotstatus": {
		"syntax": "QueryTurretSlotStatus( Integer slot )",
		"description": "Returns the status of the specified slot on the vehicle.",
		"example": "local.result = local.vehicle QueryTurretSlotStatus 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"quiet": {
		"syntax": "quiet",
		"description": "Makes the weapon make no noise.\nDon't notify AI of it being fired.",
		"example": "local.weapon quiet",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"quitteam": {
		"syntax": "quitTeam",
		"description": "Quit the current bind team.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"radius": {
		"syntax": "radius( Float radius )",
		"description": "<b>Explosion:</b> Set the radius for the explosion.\n<b>FuncBeam:</b> Set the starting radius of the beams if this is a beamsphere.\n<b>ViewJitter:</b> Sets the max radius of the view jitter. 0 affects all.\n<b>ThrobbingBox_explosive:</b> Set the radius for the explosion.",
		"example": "",
		"class": ["Explosion", "FuncBeam", "ViewJitter", "ThrobbingBox_explosive"],
		"gamever": ["AA", "SH", "BT"]
	},
	"radiusdamage": {
		"syntax": "radiusdamage( Vector origin, Float damage, Float radius, [ Integer constant_damage ] )",
		"description": "<b>ScriptThread:</b> Radius damage at origin.\n<b>Explosion:</b> Set the radius damage an explosion does.",
		"example": "// ScriptThread\nradiusdamage ( 150 -670 60 ) 4000 256\n// Explosion\nlocal.explosion radiusdamage 300",
		"class": ["Explosion", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"radnum": {
		"syntax": "radnum",
		"description": "Sets/Gets the entity's radnum.\n\n'radnum' is the \"Radiant Number\" of an entity that was added to\nthe map using the MohRadiant editor and is stored in the bsp file.\n\nDynamic entities like players, weapons, and entities spawned from scripts return -1.\n\n$world.radnum always returns 0.",
		"example": "local.radnum = local.entity.radnum",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rain_density": {
		"syntax": "rain_density",
		"description": "Sets/Gets the rain density.",
		"example": "level.rain_density = 0.2\nlocal.result = level.rain_density",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rain_length": {
		"syntax": "rain_length",
		"description": "Sets/Gets the rain length.",
		"example": "level.rain_length = 2\nlocal.result = level.rain_length",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rain_min_dist": {
		"syntax": "rain_min_dist",
		"description": "Sets/Gets the rain min_dist.",
		"example": "level.rain_min_dist = 1800\nlocal.result = level.rain_min_dist",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rain_numshaders": {
		"syntax": "rain_numshaders",
		"description": "Sets/Gets the rain numshaders.",
		"example": "level.rain_numshaders = 12\nlocal.result = level.rain_numshaders",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rain_shader": {
		"syntax": "rain_shader",
		"description": "Sets/Gets the rain shader.\nDefault: \"textures/rain\".",
		"example": "level.rain_shader = \"textures/snow\"\nlocal.result = level.rain_shader",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rain_slant": {
		"syntax": "rain_slant",
		"description": "Sets/Gets the rain slant.",
		"example": "level.rain_slant = 250\nlocal.result = level.rain_slant",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rain_speed": {
		"syntax": "rain_speed",
		"description": "Sets/Gets the rain speed.",
		"example": "level.rain_speed = 100\nlocal.result = level.rain_speed",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rain_speed_vary": {
		"syntax": "rain_speed_vary",
		"description": "Sets/Gets the rain speed variance.",
		"example": "level.rain_speed_vary = 16\nlocal.result = level.rain_speed_vary",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rain_width": {
		"syntax": "rain_width",
		"description": "Sets/Gets the rain width.",
		"example": "level.rain_width = 2\nlocal.result = level.rain_width",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"random": {
		"syntax": "random( Float randomness )",
		"description": "Sets the randomness value of the explosion.",
		"example": "",
		"class": ["MultiExploder"],
		"gamever": ["AA", "SH", "BT"]
	},
	"random_velocity": {
		"syntax": "random_velocity( Vector velocity )",
		"description": "Set the amount of random variation of the base velocity.",
		"example": "",
		"class": ["ExplodingWall"],
		"gamever": ["AA", "SH", "BT"]
	},
	"randomfloat": {
		"syntax": "randomfloat( Float max )",
		"description": "Returns a random float number between 0 and 'max'.",
		"example": "local.result = randomfloat 2 // A number between 0 and 2\nlocal.result = randomfloat -5 // A number between 0 and -5",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"randomint": {
		"syntax": "randomint( Integer max )",
		"description": "Returns a random integer number between 0 and 'max'\nIncluding 0 but not 'max'.",
		"example": "local.result = randomint 2 // Can return 0 or 1\nlocal.result = randomint -3 // Can return: 0, -1 or -2",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"range": {
		"syntax": "range( Float range )",
		"description": "Set the range of the weapon.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rank": {
		"syntax": "rank( Integer order, Integer rank )",
		"description": "Set the order value and power ranking for the weapon.",
		"example": "local.weapon rank 410 410",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"ready": {
		"syntax": "ready",
		"description": "Player: Makes this player ready for the round to start\nPlayer: Returns 1 if this player is ready, 0 otherwise.\n\nWeapon: Signals the end of the ready animation so the weapon can be used.",
		"example": "",
		"class": ["Player", "Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"readytofire": {
		"syntax": "ReadyToFire",
		"description": "Returns if ready to fire.",
		"example": "local.result = local.actor ReadyToFire",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"realism": {
		"syntax": "realism( String command, [ String parms ] )",
		"description": "Makes a command be executed only in realism mode.",
		"example": "local.entity realism movementspeed 0.83",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"releasefire": {
		"syntax": "releasefire( Float fireholdtime )",
		"description": "Releases the attack in the time specified.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"releaseplayer": {
		"syntax": "releaseplayer",
		"description": "Release all the players.\nOpposite of 'freezeplayer'.",
		"example": "releaseplayer",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"reload": {
		"syntax": "reload",
		"description": "Reloads the player's weapon.",
		"example": "local.player reload",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"reload_mg42": {
		"syntax": "reload_mg42",
		"description": "Reload the mg42 - only used by machinegunner.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"reloaddelay": {
		"syntax": "reloaddelay( Float value )",
		"description": "Set a delay that implies a reload. Will also play a sound.",
		"example": "local.vehicle_turret_gun reloaddelay 3",
		"class": ["VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"reloadshots": {
		"syntax": "reloadshots( Integer value )",
		"description": "Set the number of shots fired before forcing a reload.",
		"example": "local.vehicle_turret_gun reloadshots 1",
		"class": ["VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"reloadweapon": {
		"syntax": "reloadweapon( [ String hand ] )",
		"description": "Reloads the weapon in the specified hand.",
		"example": "local.player reloadweapon",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"remove": {
		"syntax": "remove",
		"description": "Removes this listener the next time events are processed.",
		"example": "local.listener remove",
		"class": ["Actor", "Entity", "Listener"],
		"gamever": ["AA", "SH", "BT"]
	},
	"removeattachedmodel": {
		"syntax": "removeattachedmodel( String tagname, [ Float fadeRate ], [ String modelName ] )",
		"description": "Removes the model attached to this entity at the specified tag.",
		"example": "local.entity removeattachedmodel \"tag_name\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"removebadplace": {
		"syntax": "removebadplace( String name )",
		"description": "Removes a 'bad place'.",
		"example": "level removebadplace \"name\"",
		"class": ["Level"],
		"gamever": ["SH", "BT"]
	},
	"removeclass": {
		"syntax": "removeclass( String class_name, [ Integer except_entity_number ] )",
		"description": "Removes all of the entities in the specified class, except for the specified entity (optional).",
		"example": "removeclass \"Weapon\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"removeent": {
		"syntax": "removeent( Integer entity_number )",
		"description": "Removes the specified entity.",
		"example": "removeent 33",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"removeimmune": {
		"syntax": "removeimmune( String immune_string1, [ String immune_string2 ], [ String immune_string3 ],\n[ String immune_string4 ], [ String immune_string5 ], [ String immune_string6 ] )",
		"description": "Removes from the immunity list for this entity.",
		"example": "local.entity removeimmune \"bullet\" \"fast_bullet\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"removeondeath": {
		"syntax": "removeondeath( Integer removeondeath )",
		"description": "If set to zero, vehicles will not be removed when they die.",
		"example": "local.vehicle removeondeath 0",
		"class": ["Vehicle", "VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"removewhenstopped": {
		"syntax": "removewhenstopped",
		"description": "Make the projectile get removed when it stops.",
		"example": "local.projectile removewhenstopped",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"renamepath": {
		"syntax": "renamepath( String newName )",
		"description": "Rename the path to the new name.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"render_terrain": {
		"syntax": "render_terrain( Boolean render_terrain )",
		"description": "Set to draw or not draw terrain.",
		"example": "$world render_terrain 0",
		"class": ["World"],
		"gamever": ["SH", "BT"]
	},
	"rendereffects": {
		"syntax": "rendereffects( [ String parameter1 ], [ String parameter2 ], [ String parameter3 ],\n[ String parameter4 ], [ String parameter5 ], [ String parameter6 ] )",
		"description": "Change the current render effects flags.\n\nValid flags are as follows:\n+ sets a flag, - clears a flag\ndontdraw - send the entity to the client, but don't draw\nbetterlighting - do sphere based vertex lighting on the entity\nlensflare - add a lens glow to the entity at its origin\nviewlensflare - add a view dependent lens glow to the entity at its origin\nlightoffset - use the dynamic color values as a light offset to the model\nskyorigin - this entity is the portal sky origin\nminlight - this entity always has some lighting on it\nfullbright - this entity is always fully lit\nadditivedynamiclight - the dynamic light should have an additive effect\nlightstyledynamiclight - the dynamic light uses a light style, use the\n'lightstyle' command to set the index of the light style to be used",
		"example": "local.entity rendereffects \"+dontdraw\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"replace": {
		"syntax": "replace",
		"description": "CameraManager:\nReplace the current path node position/angle with the player's.\n\nSoundManager:\nReplace the current sound position with the player's.",
		"example": "",
		"class": ["CameraManager", "SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"reset": {
		"syntax": "reset",
		"description": "Fulcrum:\nReset the fulcrum right now.\n\nSinkObject:\n Reset the SinkObject right now.\n\nSoundManager:\nResets the state of all sounds and triggers.",
		"example": "",
		"class": ["Fulcrum", "SinkObject", "SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"reset_time": {
		"syntax": "reset_time( Float newResetTime )",
		"description": "Sets the time it takes for the UseObject to reset itself.",
		"example": "",
		"class": ["UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"resetdelay": {
		"syntax": "resetdelay( Float newResetDelay )",
		"description": "Delay between when sinkobject starts resetting.",
		"example": "",
		"class": ["SinkObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"resethaveitem": {
		"syntax": "resethaveitem( String weapon_name )",
		"description": "Resets the game var that keeps track that we have gotten this weapon.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"resetleash": {
		"syntax": "resetleash",
		"description": "Resets the AI's leash to their current position.",
		"example": "local.actor resetleash",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"resetreverb": {
		"syntax": "resetreverb",
		"description": "Reset the reverb settings to a normal.",
		"example": "",
		"class": ["SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"resetsound": {
		"syntax": "resetsound( String newResetSound )",
		"description": "Sound played when sinkobject is resetting.",
		"example": "",
		"class": ["SinkObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"resetspeed": {
		"syntax": "resetspeed( Float newResetspeed )",
		"description": "Fulcrum:\nSpeed at which fulcrum resets itself, defaults to 0.002 * speed.\n\nSinkObject:\nSpeed at which SinkObject resets itself, defaults to 0.002 * speed.",
		"example": "",
		"class": ["Fulcrum", "SinkObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"resetstate": {
		"syntax": "resetstate",
		"description": "Reset the player's state table.",
		"example": "local.player resetstate",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"respawn": {
		"syntax": "respawn",
		"description": "Player: Respawns the player.\n\nItem: Respawns the item.",
		"example": "local.player respawn",
		"class": ["Player", "Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"respawn_done": {
		"syntax": "respawn_done",
		"description": "Called when the item respawn is done.",
		"example": "",
		"class": ["Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"respawnsound": {
		"syntax": "respawnsound",
		"description": "Turns on the respawn sound for this item.",
		"example": "",
		"class": ["Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"restoremusicvolume": {
		"syntax": "restoremusicvolume( Float fade_time )",
		"description": "Restores the music volume to its previous value.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"restoresoundtrack": {
		"syntax": "restoresoundtrack",
		"description": "Restores the soundtrack to the previous one.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"reverblevel": {
		"syntax": "reverblevel( Float reverbLevel )",
		"description": "Sets the reverb level to be used when triggered.",
		"example": "",
		"class": ["TriggerReverb"],
		"gamever": ["AA", "SH", "BT"]
	},
	"reverbtype": {
		"syntax": "reverbtype( Integer reverbType )",
		"description": "Sets the reverb type.",
		"example": "",
		"class": ["TriggerReverb"],
		"gamever": ["AA", "SH", "BT"]
	},
	"revive": {
		"syntax": "revive( Float health )",
		"description": "Sets the health, even if dead.",
		"example": "local.entity revive 100",
		"class": ["Entity"],
		"gamever": ["BT"]
	},
	"rightvector": {
		"syntax": "rightvector",
		"description": "Get the right vector of angles.",
		"example": "local.rightvector = local.entity.rightvector",
		"class": ["SimpleEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"roll": {
		"syntax": "roll( Float roll )",
		"description": "Sets the portal camera's roll.",
		"example": "",
		"class": ["PortalCamera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotate": {
		"syntax": "rotate",
		"description": "Rotates the falling rock.",
		"example": "",
		"class": ["FallingRock"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateaxis": {
		"syntax": "rotateaxis( Integer axis, Float avelocity )",
		"description": "Rotate about the specified axis at the specified angular velocity.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateaxisdown": {
		"syntax": "rotateaxisdown( Integer axis, Float angle )",
		"description": "Rotate the specified axis down by the specified amount.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateaxisdownto": {
		"syntax": "rotateaxisdownto( Integer axis, Float angle )",
		"description": "Rotate the specified axis down to angle.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateaxisup": {
		"syntax": "rotateaxisup( Integer axis, Float angle )",
		"description": "Rotate the specified axis up by the specified amount.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateaxisupto": {
		"syntax": "rotateaxisupto( Integer axis, Float angle )",
		"description": "Rotate the specified axis up to angle.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatedbbox": {
		"syntax": "rotatedbbox( Integer on_off )",
		"description": "Sets/Gets the entity's bbox to rotate with it.",
		"example": "local.entity.rotatedbbox = 1\nlocal.result = local.entity.rotatedbbox",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatedownto": {
		"syntax": "rotatedownto( Vector direction )",
		"description": "Rotate down to the specified direction.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateto": {
		"syntax": "rotateto( Vector direction )",
		"description": "Rotate to the specified direction.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateupto": {
		"syntax": "rotateupto( Vector direction )",
		"description": "Rotate up to the specified direction.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatex": {
		"syntax": "rotateX( Float avelocity )",
		"description": "Rotate about the x axis at the specified angular velocity.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatexdown": {
		"syntax": "rotateXdown( Float angle )",
		"description": "Rotate the x down by the specified amount.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatexdownto": {
		"syntax": "rotateXdownto( Float angle )",
		"description": "Rotate the x down to angle.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatexup": {
		"syntax": "rotateXup( Float angle )",
		"description": "Rotate the x up by the specified amount.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatexupto": {
		"syntax": "rotateXupto( Float angle )",
		"description": "Rotate the x up to angle.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatey": {
		"syntax": "rotateY( Float avelocity )",
		"description": "Rotate about the y axis at the specified angular velocity.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateydown": {
		"syntax": "rotateYdown( Float angle )",
		"description": "Rotate the y down by the specified amount.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateydownto": {
		"syntax": "rotateYdownto( Float angle )",
		"description": "Rotate the y down to angle.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateyup": {
		"syntax": "rotateYup( Float angle )",
		"description": "Rotate the y up by the specified amount.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotateyupto": {
		"syntax": "rotateYupto( Float angle )",
		"description": "Rotate the y up to angle.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatez": {
		"syntax": "rotateZ( Float avelocity )",
		"description": "Rotate about the z axis at the specified angular velocity.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatezdown": {
		"syntax": "rotateZdown( Float angle )",
		"description": "Rotate the z down by the specified amount.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatezdownto": {
		"syntax": "rotateZdownto( Float angle )",
		"description": "Rotate the z down to angle.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatezup": {
		"syntax": "rotateZup( Float angle )",
		"description": "Rotate the z up by the specified amount.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"rotatezupto": {
		"syntax": "rotateZupto( Float angle )",
		"description": "Rotate the z up to angle.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"roundbased": {
		"syntax": "roundbased",
		"description": "Gets whether or not the game is currently round based or not.",
		"example": "local.result = level.roundbased",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"roundstarted": {
		"syntax": "roundstarted",
		"description": "Gets whether or not the round has started.",
		"example": "local.result = level.roundstarted",
		"class": ["Level"],
		"gamever": ["BT"]
	},
	"runanimrate": {
		"syntax": "runanimrate( Float multiplier )",
		"description": "Sets/Gets the rate at which the run animation plays back.",
		"example": "local.actor runanimrate 1.5\n// Or\nlocal.actor.runanimrate = 1.5\nlocal.runanimrate = local.actor.runanimrate",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"runsounds": {
		"syntax": "runsounds( Integer on_off )",
		"description": "Makes the vehicle play running sounds.",
		"example": "",
		"class": ["Vehicle"],
		"gamever": ["SH", "BT"]
	},
	"runto": {
		"syntax": "runto( String dest )",
		"description": "Specify the location to run to.",
		"example": "local.actor runto $player\n// Or\nlocal.actor runto ( 130 450 42 )",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"safeholster": {
		"syntax": "safeholster( Boolean putaway )",
		"description": "Holsters all wielded weapons, or unholsters previously put away weapons.\nPreserves state, so it will not holster or unholster unless necessary.",
		"example": "local.player safeholster 1",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"safesolid": {
		"syntax": "safesolid",
		"description": "Make solid but first make sure no one is in my bounds that is thinking.",
		"example": "local.entity safesolid",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"safezoom": {
		"syntax": "safezoom( Boolean zoomin )",
		"description": "0 turns off zoom, and 1 returns zoom to previous setting.",
		"example": "local.player safezoom 0",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"save": {
		"syntax": "save( String filename )",
		"description": "CameraManager: Saves the camera path.\n\nSoundManager: Saves the sounds.",
		"example": "",
		"class": ["CameraManager", "SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"savemap": {
		"syntax": "savemap( String filename )",
		"description": "Saves the camera path to a map file.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"savename": {
		"syntax": "savename( String name )",
		"description": "Sets the name which is appended to the world.message for this specific autosave.",
		"example": "",
		"class": ["TriggerSave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"say": {
		"syntax": "say( String animation )",
		"description": "The name of a dialog animation to play.",
		"example": "local.actor say \"dfr_M1L1_106k_1\"\nlocal.actor waittill saydone",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"saydone": {
		"syntax": "saydone",
		"description": "Even used by sound-only special case of say to trigger waittill saydone.",
		"example": "local.actor say \"dfr_M1L1_106k_1\"\nlocal.actor waittill saydone",
		"class": ["Actor", "Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sayfail": {
		"syntax": "sayfail",
		"description": "sayfail...",
		"example": "parm.sayfail",
		"class": ["Parm"],
		"gamever": ["AA", "SH", "BT"]
	},
	"scale": {
		"syntax": "scale( Float newScale )",
		"description": "Entity: Sets/Gets the scale of the entity.\nSmokeGrenade: Sets initial scale of each smoke volume.",
		"example": "local.entity scale 2\n// Or\nlocal.entity.scale = 2\nlocal.scale = local.entity.scale",
		"class": ["Entity", "SmokeGrenade"],
		"gamever": ["AA", "SH", "BT"]
	},
	"scalerate": {
		"syntax": "scalerate( Float rate )",
		"description": "Sets how fast the smoke volume grows.",
		"example": "local.smoke_grenade scalerate 0.6",
		"class": ["SmokeGrenade"],
		"gamever": ["SH", "BT"]
	},
	"score": {
		"syntax": "score",
		"description": "Show the score for the current deathmatch game.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"scriptshader": {
		"syntax": "scriptshader( String shaderCommand, Float argument1, [ Float argument2 ] )",
		"description": "Alias for shader command, change a specific shader parameter for the entity.\n\nValid shader commands are:\ntranslation [trans_x] [trans_y] - change the texture translation\noffset [offset_x] [offset_y] - change the texture offset\nrotation [rot_speed] - change the texture rotation speed\nframe [frame_num] - change the animated texture frame\nwavebase [base] - change the base parameter of the wave function\nwaveamp [amp] - change the amp parameter of the wave function\nwavebase [phase] - change the phase parameter of the wave function\nwavefreq [freq] - change the frequency parameter of the wave function",
		"example": "local.entity scriptshader \"translation\" 0 2.0",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"scriptslave_followingpath": {
		"syntax": "scriptslave_followingpath",
		"description": "Called every frame to actually follow the path.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"scriptslave_movedone": {
		"syntax": "scriptslave_movedone",
		"description": "Called when the script slave is done moving.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"seatanglesoffset": {
		"syntax": "seatanglesoffset( Vector angles )",
		"description": "Set the angles offset of the seat.",
		"example": "",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"seatoffset": {
		"syntax": "seatoffset( Vector offset )",
		"description": "Set the offset of the seat.",
		"example": "",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"secondary": {
		"syntax": "secondary( [ String arg1 ], [ String arg2 ], [ String arg3 ], [ String arg4 ],\n[ String arg5 ], [ String arg6 ], [ String arg7 ], [ String arg8 ] )",
		"description": "Set the secondary mode of the weapon, by passing commands through.",
		"example": "local.weapon secondary firetype \"melee\"",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"secondaryammoinhud": {
		"syntax": "secondaryammoinhud",
		"description": "Makes the weapon show its secondary ammo to the hud.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"secondaryfireheld": {
		"syntax": "secondaryfireheld",
		"description": "Returns 1 if this player is holding the secondary fire, or 0 if not.",
		"example": "local.result = local.player.secondaryfireheld",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"semiauto": {
		"syntax": "semiauto",
		"description": "Sets the weapon to fire semi-auto.",
		"example": "local.weapon semiauto",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"server": {
		"syntax": "server( [ String arg1 ], [ String arg2 ], [ String arg3 ],\n[ String arg4 ], [ String arg5 ], [ String arg6 ] )",
		"description": "Server only command.\nParses strings into scripting commands.",
		"example": "server \"println\" \"Hello World!\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"set_objective_pos": {
		"syntax": "set_objective_pos( Vector pos )",
		"description": "Sets the position in the world of the current objective.",
		"example": "set_objective_pos ( 1040 -2780 350 )",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"set_respawn": {
		"syntax": "set_respawn( Integer respawn )",
		"description": "Turns respawn on or off.",
		"example": "local.item set_respawn 1",
		"class": ["Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"set_respawn_time": {
		"syntax": "set_respawn_time( Float respawn_time )",
		"description": "Sets the respawn time.",
		"example": "local.item set_respawn_time 30",
		"class": ["Item"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setactionanim": {
		"syntax": "setactionanim( String base_anim, Float lower_limit, Float upper_limit )",
		"description": "Set the base action animation and range that they cover.",
		"example": "local.actor setactionanim \"rifle_aim\" -60 60",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setaimanim": {
		"syntax": "setaimanim( String aimAnimation, Integer aimFrame )",
		"description": "Set the aim animation and frame for when a weapon fires.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setaimmotionanim": {
		"syntax": "setaimmotionanim( String anim_crouch, String anim_stand, String anim_high )",
		"description": "Set aim motion animation (handler scripts only).",
		"example": "local.actor setaimmotionanim \"MG42_crouch_idle\" \"MG42_stand_idle\" \"MG42_high_idle\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setaimoffset": {
		"syntax": "setAimOffset( Vector offset )",
		"description": "Makes the turret aim with specified offset",
		"example": "",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setaimtarget": {
		"syntax": "setAimTarget",
		"description": "Actor: setaimtarget( Entity entity )\nSets the primary weapon's aim target.\n\nTurretGun: setAimTarget( [ String target ] )\nMakes the turret aim at an entity.",
		"example": "",
		"class": ["Actor", "TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setanim": {
		"syntax": "setanim( String anim, Integer slot, Float weight, String flagged )",
		"description": "Set animation slot.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setanimlength": {
		"syntax": "setanimlength( Float time )",
		"description": "Set the maximum time an animation will play.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setbaseentity": {
		"syntax": "setbaseentity( Entity base_entity )",
		"description": "Sets the base entity to take its orientation from.",
		"example": "local.vehicle_turret_gun setbaseentity local.entity",
		"class": ["VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setcollisionentity": {
		"syntax": "setcollisionentity( Entity entity )",
		"description": "Sets the Collision Entity.",
		"example": "local.vehicle setcollisionentity $vehiclecollision",
		"class": ["Vehicle", "VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setcontrollerangles": {
		"syntax": "setcontrollerangles( Integer num, Vector angles )",
		"description": "Sets the control angles for the specified bone.",
		"example": "local.entity setcontrollerangles 1 ( 0 0 30 )",
		"class": ["Animate", "Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setcurrent": {
		"syntax": "SetCurrent( Integer TeamNum )",
		"description": "Objective: Set this objective as current.\n\nTOWObjective: Set this objective as the current objective for the specified team.\nTeams are as such:\n0 = Axis\n1 = Allies\n2 = Neutral",
		"example": "// Objective\n$Objective1 SetCurrent\n// TOWObjective\n$obj_flak SetCurrent 1",
		"class": ["Objective", "TOWObjective"],
		"gamever": ["SH", "BT"]
	},
	"setcurrentfireanim": {
		"syntax": "setcurrentfireanim( Integer value )",
		"description": "Sets the current firing animation.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"setcurrentobjective": {
		"syntax": "setcurrentobjective( Integer objective_number, [ String team ] )",
		"description": "Sets the specified objective as the current objective (for the team, if given).\n'team' arg is valid only for Breakthrough.",
		"example": "setcurrentobjective 1",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setcvar": {
		"syntax": "setcvar( String cvar_name, String value )",
		"description": "Sets the value of the specified cvar.",
		"example": "setcvar \"g_scoreboardpic\" \"mohdm6\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setdamage": {
		"syntax": "setdamage( Integer damage )",
		"description": "Set the damage.",
		"example": "",
		"class": ["ScriptSlave", "ThrobbingBox_Explosive"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setfadetime": {
		"syntax": "setfadetime( Float newFadeTime )",
		"description": "Set the fadetime of the current path node.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setfov": {
		"syntax": "setfov( String newFOV )",
		"description": "Set the fov at the current path node.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sethelmet": {
		"syntax": "sethelmet( String tikifile, Float popspeed, Float dmgmult, String surfacename, [ String optional ] )",
		"description": "Gives the sentient a helmet and sets the needed info for it.",
		"example": "local.actor sethelmet \"models/equipment/usgear/helmet_ranger_private.tik\" 150 0.1 \"us_helmet\"",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setlightstyle": {
		"syntax": "setlightstyle( Integer lightstyleindex, String lightstyledata )",
		"description": "Set up the lightstyle with lightstyleindex to the specified data.",
		"example": "setlightstyle 1 \"textures/alarm_map.tga\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setmeansofdeath": {
		"syntax": "setmeansofdeath( String means_of_death )",
		"description": "Set the damage means of death.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setmotionanim": {
		"syntax": "setmotionanim( String anim )",
		"description": "Set motion animation (handler scripts only).",
		"example": "local.actor setmotionanim \"unarmed_stand_alert_legs\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setpath": {
		"syntax": "setpath( Entity path )",
		"description": "Sets the new path.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setplayerusable": {
		"syntax": "setPlayerUsable( Integer state )",
		"description": "Sets wether the turret can be used by players.\n0 means no, 1 means yes.",
		"example": "local.turret setPlayerUsable 0",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setreloadcover": {
		"syntax": "setreloadcover",
		"description": "Do this command to let the AI know it needs to reload.\nUsed to reload while going to cover.",
		"example": "local.actor setreloadcover 1",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setsay": {
		"syntax": "setsay( String animation )",
		"description": "The name of a dialog animation to play. Used by animation script only.",
		"example": "local.actor setsay \"pain_generic\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setscoreboardtoggle": {
		"syntax": "setscoreboardtoggle( String team, Integer value )",
		"description": "Sets the specified team's scoreboard toggle.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["BT"]
	},
	"setshaderdata": {
		"syntax": "setshaderdata( Float data0, Float data1 )",
		"description": "Sets the shader controllers for this entity.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setshadertime": {
		"syntax": "setshadertime( [ Float timeOffset ], [ Float randomTimeOffset ] )",
		"description": "Reset the shader time for this entity.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"setsize": {
		"syntax": "setsize( Vector mins, Vector maxs )",
		"description": "Set the bounding box of the entity to mins and maxs.",
		"example": "local.entity setsize \"-16 -16 0\" \"16 16 92\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setsoundparameters": {
		"syntax": "setsoundparameters( Float min_speed, Float min_pitch, Float max_speed, Float max_pitch )",
		"description": "Sets the Sound parameters for this vehicle.",
		"example": "local.vehicle setsoundparameters 0 0.2 200 1.2",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setspeed": {
		"syntax": "setspeed( Float speed )",
		"description": "Set the speed of the camera at the current path node.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setswitchthread": {
		"syntax": "setswitchthread( String thread )",
		"description": "Set the thread to execute when turret is switched.",
		"example": "",
		"class": ["VehicleTurretGunTandem"],
		"gamever": ["BT"]
	},
	"setsynctime": {
		"syntax": "setsynctime( Float synctime )",
		"description": "Set sync time for entity.",
		"example": "",
		"class": ["Animate"],
		"gamever": ["AA", "SH", "BT"]
	},
	"settarget": {
		"syntax": "settarget( String target )",
		"description": "Set the trigger target.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"settargetentity": {
		"syntax": "settargetentity( Entity ent )",
		"description": "Set the entity to point the turret at visually.",
		"example": "local.vehicle_turret_gun settargetentity local.entity",
		"class": ["VehicleTurretGun"],
		"gamever": ["SH", "BT"]
	},
	"settargetname": {
		"syntax": "settargetname( String targetname )",
		"description": "Set the targetname.",
		"example": "",
		"class": ["CameraManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setthread": {
		"syntax": "setthread( String thread )",
		"description": "<b>Trigger:</b> Set the thread to execute when this trigger is activated.\n<b>TurretGun:</b> Sets the name of the thread called when a player uses the turret.\n<b>ThrobbingBox_Explosive:</b> Set the thread to execute when this object is used.",
		"example": "local.trigger setthread label",
		"class": ["Trigger", "TurretGun", "ThrobbingBox_Explosive"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setupperanim": {
		"syntax": "setupperanim( String anim )",
		"description": "Set the upper body animation. Used by animation script only.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setusable": {
		"syntax": "setusable( Integer state )",
		"description": "Sets wether the turret can be used as a weapon.\n0 means no, 1 means yes.",
		"example": "local.turret setusable 0",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"setusethread": {
		"syntax": "setusethread( String thread )",
		"description": "Set the thread to execute when this object is used.",
		"example": "",
		"class": ["ThrobbingBox_Explosive"],
		"gamever": ["SH", "BT"]
	},
	"setvolumeparameters": {
		"syntax": "setvolumeparameters( Float min_speed, Float min_volume, Float max_speed, Float max_volume )",
		"description": "Sets the Volume parameters for this vehicle.",
		"example": "local.vehicle setvolumeparameters 0 1 200 1.5",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setweapon": {
		"syntax": "setweapon( String weaponname )",
		"description": "Set the weapon for the vehicle.",
		"example": "",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"setweaponidlestate": {
		"syntax": "setweaponidlestate( Integer state )",
		"description": "Set the idle state of the given weapon.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["BT"]
	},
	"setyawfrombone": {
		"syntax": "setyawfrombone( String bone_name )",
		"description": "Set the yaw of the model based on the current animation time.",
		"example": "",
		"class": ["Animate"],
		"gamever": ["AA", "SH", "BT"]
	},
	"severity": {
		"syntax": "severity( Float newSeverity )",
		"description": "How violently the debris should be ejected.",
		"example": "",
		"class": ["ExplodeObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"shader": {
		"syntax": "shader( … )",
		"description": "<b>Entity</b> shader( String shaderCommand, Float argument1, [ Float argument2 ] )\nChange a specific shader parameter for the entity.\nValid shader commands are:\ntranslation [trans_x] [trans_y] - change the texture translation\noffset [offset_x] [offset_y] - change the texture offset\nrotation [rot_speed] - change the texture rotation speed\nwavebase [base] - change the base parameter of the wave function\nwaveamp [amp] - change the amp parameter of the wave function\nwavebase [phase] - change the phase parameter of the wave function\nwavefreq [freq] - change the frequency parameter of the wave function\n\n<b>FuncBeam</b> shader( String beam_shader )\nSet the shader that the beam will use.",
		"example": "local.beam shader \"textures/sprites/moon1.tga\"",
		"class": ["Entity", "FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"shadow": {
		"syntax": "shadow",
		"description": "Turns on the shadow for this sentient.",
		"example": "local.actor shadow",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"share_enemy": {
		"syntax": "share_enemy",
		"description": "Internal code use only.\nShares an AI's enemy with his squad mates.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"share_grenade": {
		"syntax": "share_grenade",
		"description": "Internal code use only.\nShares an AI's grenade with his squad mates.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"shareclip": {
		"syntax": "shareclip",
		"description": "Sets the weapon to share the same clip between all fire modes.",
		"example": "local.weapon shareclip",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"shoot": {
		"syntax": "shoot( [ String mode ] )",
		"description": "FuncBeam: Make the beam cause damage to entities that get in the way.\n\nTurretGun: Shoot the weapon.\n\nWeapon: Shoot the weapon.",
		"example": "",
		"class": ["FuncBeam", "TurretGun", "Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"shootableonly": {
		"syntax": "shootableonly",
		"description": "Makes the entity shootable only.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"shootradius": {
		"syntax": "shootradius( Float radius )",
		"description": "Set the radius of the damage area between beam endpoints.",
		"example": "local.beam shootradius 230",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"show": {
		"syntax": "show",
		"description": "Entity, Player: Show the entity, opposite of 'hide'.\nCameraManager: Shows the specified path.\nSoundManager: Show all the sounds.",
		"example": "local.entity show",
		"class": ["CameraManager", "Entity", "Player", "SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"showmenu": {
		"syntax": "showmenu( String name, [ Integer bForce ] )",
		"description": "Show menu, with option to force it on.",
		"example": "showmenu \"briefing1a\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"showquakes": {
		"syntax": "showquakes( Boolean showquakes )",
		"description": "Sets the camera to show or not show earthquake effects\nfrom the player triggered either from the earthquake command, or a viewjitter.",
		"example": "local.camera showquakes 1",
		"class": ["Camera"],
		"gamever": ["SH", "BT"]
	},
	"showweapon": {
		"syntax": "showweapon",
		"description": "Set the weapon to be show in the view.",
		"example": "local.vehicle showweapon",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sight": {
		"syntax": "sight( Float max_sight_range )",
		"description": "Sets/Gets the vision distance of the actor.",
		"example": "local.actor sight 2000\n// Or\nlocal.actor.sight = 2000\nlocal.sight = local.actor.sight",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sighttrace": {
		"syntax": "sighttrace( Vector start, Vector end, [ Integer pass_entities ], [ Vector mins ], [ Vector maxs ] )",
		"description": "Performs a trace line from the start to the end.\nReturns 0 if something was hit and 1 otherwise.",
		"example": "local.result = sighttrace ( 550 -783 140 ) ( 1220 340 78 ) 1\n// Or\nlocal.result = local.entity sighttrace local.entity.origin ( 1220 340 78 ) 0 ( -16 -16 16 ) ( 16 16 128 )",
		"class": ["Entity", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"silent": {
		"syntax": "silent( Integer silent )",
		"description": "Set to 0 to prevent this guy from saying stuff besides pain and death sounds.\nGets whether or not this guy is allowed to say stuff besides pain and death sounds.",
		"example": "local.actor silent 1\n// Or\nlocal.actor.silent = 1\nlocal.result = local.actor.silent",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sin": {
		"syntax": "sin( Float x )",
		"description": "<b>Reborn</b>: Returns the sine of an angle of x radians.\n\n<b>Breakthrough</b>:  Sine of float (expects degrees not radians).",
		"example": "local.result = sin local.x",
		"class": ["ScriptThread"],
		"gamever": ["BT", "REBORN"]
	},
	"sinksound": {
		"syntax": "sinksound( String newSinkSound )",
		"description": "Sound played when sinkobject is sinking.",
		"example": "",
		"class": ["SinkObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"size": {
		"syntax": "size",
		"description": "Returns the number of elements in the array.",
		"example": "local.result = $player.size // Returns the number of players\n// Or\nlocal.result = (\"abcde\").size // Returns: 5",
		"class": ["Array"],
		"gamever": ["AA", "SH", "BT"]
	},
	"skidding": {
		"syntax": "skidding( Integer on_off )",
		"description": "Makes the vehicle skid around corners.",
		"example": "local.vehicle skidding 1",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"skill": {
		"syntax": "skill",
		"description": "Returns the difficulty level of the game.",
		"example": "local.result = game.skill",
		"class": ["Game"],
		"gamever": ["AA", "SH", "BT"]
	},
	"skipcinematic": {
		"syntax": "skipcinematic",
		"description": "Skip the current cinematic.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"skyalpha": {
		"syntax": "skyalpha( Float newAlphaForPortalSky )",
		"description": "Set the alpha on the sky.",
		"example": "$world skyalpha 0.6",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"skybox_farplane": {
		"syntax": "skybox_farplane( Float farplaneDistance )",
		"description": "Sets/Gets the distance of the skybox far clipping plane.",
		"example": "$world skybox_farplane 500\n// Or\n$world.skybox_farplane = 500\nlocal.skybox_farplane = $world.skybox_farplane",
		"class": ["World"],
		"gamever": ["SH", "BT"]
	},
	"skybox_speed": {
		"syntax": "skybox_speed",
		"description": "Sets/Gets the speed of the skybox.",
		"example": "$world skybox_speed 0.01203\n// Or\n$world.skybox_speed = 0.01203\nlocal.skybox_speed = $world.skybox_speed",
		"class": ["World"],
		"gamever": ["SH", "BT"]
	},
	"skyportal": {
		"syntax": "skyportal( Boolean newSkyPortalState )",
		"description": "Whether or not to use the sky portal at all.",
		"example": " $world skyportal 0",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"smashthroughglass": {
		"syntax": "smashthroughglass( Integer speed )",
		"description": "Makes the projectile smash through windows &\nother damageble glass objects when going above a set speed.",
		"example": "local.projectile smashthroughglass 64",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"solid": {
		"syntax": "solid",
		"description": "Make the entity solid.",
		"example": "local.entity solid",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sound": {
		"syntax": "sound( String sound )",
		"description": "Set the sound to play when this trigger is activated.",
		"example": "local.trigger sound \"sound_alias\"",
		"class": ["Trigger"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sound_awareness": {
		"syntax": "sound_awareness",
		"description": "Sets/Gets the awareness of sounds in 0-100 percent chance\nof hearing a sound within half of the sound's radius.\nFades to zero outside sound's radius.",
		"example": "local.actor sound_awareness 75\n// Or\nlocal.actor.sound_awareness = 75\nlocal.sound_awareness = local.actor.sound_awareness",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sound_close_end": {
		"syntax": "sound_close_end( String sound_close )",
		"description": "Sets the sound to use when the door closes.",
		"example": "local.door sound_close_end \"sound_alias\"",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sound_close_start": {
		"syntax": "sound_close_start( String sound_close )",
		"description": "Sets the sound to use when the door closes.",
		"example": "local.door sound_close_start \"sound_alias\"",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sound_locked": {
		"syntax": "sound_locked( String sound_locked )",
		"description": "Sets the sound to use when the door is locked.",
		"example": "local.door sound_locked \"sound_alias\"",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sound_message": {
		"syntax": "sound_message( String sound_message )",
		"description": "Sets the sound to use when the door displays a message.",
		"example": "local.door sound_message \"sound_alias\"",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sound_open_end": {
		"syntax": "sound_open_end( String sound_open_end )",
		"description": "Sets the sound to use when the door stops to opens.",
		"example": "local.door sound_open_end \"sound_alias\"",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sound_open_start": {
		"syntax": "sound_open_start( String sound_open_start )",
		"description": "Sets the sound to use when the door starts to opens.",
		"example": "local.door sound_open_start \"sound_alias\"",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"soundset": {
		"syntax": "SoundSet( String soundset )",
		"description": "Sets the Sound Set to use.",
		"example": "local.vehicle SoundSet \"jeep_\"",
		"class": ["Vehicle", "VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"soundtrack": {
		"syntax": "soundtrack( String MusicFile )",
		"description": "",
		"example": "soundtrack \"music/m3l1b.mus\"\n// Or\n$world soundtrack \"music/m3l1b.mus\"",
		"class": ["ScriptThread", "World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sp": {
		"syntax": "sp( String command, [ String parms ] )",
		"description": "Makes a command be executed only in single player.",
		"example": "local.weapon sp bulletrange 4000",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"spawn": {
		"syntax": "spawn( String entityname, [ String keyname1 ], [ String value1 ], [ String keyname2 ], [ String value2 ],\n[ String keyname3 ], [ String value3 ], [ String keyname4 ], [ String value4 ] )",
		"description": "Spawn the specified entity.",
		"example": "local.entity = spawn \"script_object\" model \"models/animate/fire.tik\" origin ( 0 0 0 )\n// Or\nspawn \"script_object\" model \"models/animate/fire.tik\" origin ( 0 0 0 )",
		"class": ["Player", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spawnbloodygibs": {
		"syntax": "spawnbloodygibs( [ Integer number_of_gibs ], [ Float scale ] )",
		"description": "Spawns some bloody generic gibs.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spawnchance": {
		"syntax": "spawnchance( Float spawn_chance )",
		"description": "Sets the chance that this spawned entity will spawn something when killed, if it is an actor.",
		"example": "",
		"class": ["Spawn"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spawnflags": {
		"syntax": "spawnflags( Integer flags )",
		"description": "Spawnflags from the BSP, these are set inside the editor.",
		"example": "",
		"class": ["Entity", "PathNode", "VehiclePoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spawnitem": {
		"syntax": "spawnitem( String spawn_item_name )",
		"description": "Adds this named item to what will be spawned when\nthis spawned entity is killed, if it is an actor.",
		"example": "",
		"class": ["Spawn"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spawnlife": {
		"syntax": "spawnlife( Float life )",
		"description": "Sets how long each smoke volume lives.",
		"example": "local.smoke_grenade spawnlife 10",
		"class": ["SmokeGrenade"],
		"gamever": ["SH", "BT"]
	},
	"spawnmodel": {
		"syntax": "spawnmodel( String model_to_spawn )",
		"description": "When triggered, what to spawn.",
		"example": "",
		"class": ["RunThrough"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spawnrate": {
		"syntax": "spawnrate( Float rate )",
		"description": "Sets how many smoke volumes are spawned per second.",
		"example": "local.smoke_grenade spawnrate 1.5",
		"class": ["SmokeGrenade"],
		"gamever": ["SH", "BT"]
	},
	"spawnspot": {
		"syntax": "spawnspot( String spawn_spot )",
		"description": "Sets the spawn spot to use.",
		"example": "",
		"class": ["TriggerChangeLevel"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spawntarget": {
		"syntax": "spawntarget( String spawntarget )",
		"description": "Sets spawn target for this spawn entity.",
		"example": "",
		"class": ["Spawn"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spawntargetname": {
		"syntax": "spawntargetname( String spawntargetname )",
		"description": "Sets spawn target name for this spawn entity.",
		"example": "",
		"class": ["Spawn"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spawnturret": {
		"syntax": "spawnturret( Integer slot, String tikifile )",
		"description": "Spawns a turret with the specified model and connects it to the specified slot.",
		"example": "",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spectator": {
		"syntax": "spectator",
		"description": "Become a spectator.",
		"example": "local.player spectator",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"speed": {
		"syntax": "speed",
		"description": "Sets the speed.\n\nAvalaible Classes:\nCamera, FallingRock, Fulcrum, Projectile,\nRunThrough , ScriptSlave, SinkObject, SlidingDoor,\nSplinePath, TriggerPush, TriggerPushAny",
		"example": "",
		"class": ["…"],
		"gamever": ["AA", "SH", "BT"]
	},
	"spin": {
		"syntax": "spin( Float avel )",
		"description": "Sets the number of rotations per second for this entity around its z axis.",
		"example": "local.smoke_grenade spin 0.133",
		"class": ["SmokeGrenade"],
		"gamever": ["SH", "BT"]
	},
	"splinepath_create": {
		"syntax": "SplinePath_create",
		"description": "Creates the spline path from the target list.",
		"example": "",
		"class": ["SplinePath"],
		"gamever": ["AA", "SH", "BT"]
	},
	"sprealism": {
		"syntax": "sprealism( String command, [ String parms ] )",
		"description": "Makes a command be executed only in single player realism mode.",
		"example": "local.weapon sprealism startammo 8",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"sqrt": {
		"syntax": "sqrt( Float x )",
		"description": "Returns the square root of x.",
		"example": "local.result = sqrt 4",
		"class": ["ScriptThread"],
		"gamever": ["BT", "REBORN"]
	},
	"start": {
		"syntax": "start",
		"description": "Camera: Start camera moving.\nFallingRock: Starts rock falling.\nPushObject: Sets up the pushobject.\nTreeModel: Initializes the tree a little.\nVehicle: Initialize the vehicle.",
		"example": "",
		"class": ["Camera", "FallingRock", "PushObject", "TreeModel", "Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"startammo": {
		"syntax": "startammo( Integer amount )",
		"description": "Set the starting ammo of this weapon.",
		"example": "local.weapon startammo 20",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"startangles": {
		"syntax": "startangles",
		"description": "Door's size.",
		"example": "",
		"class": ["ScriptDoor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"startfiring": {
		"syntax": "startFiring",
		"description": "Makes the turret start shooting.",
		"example": "local.turret startFiring",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"startingammotoowner": {
		"syntax": "startingammotoowner",
		"description": "Internal event used to give ammo to the owner of the weapon.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"startitem": {
		"syntax": "startitem( String itemname )",
		"description": "Adds an item to the starting loadout of the weapon.",
		"example": "local.weapon startitem \"items/binoculars.tik\"",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"startorigin": {
		"syntax": "startorigin",
		"description": "Door's startorigin.",
		"example": "",
		"class": ["ScriptDoor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"startuseobject": {
		"syntax": "startuseobject",
		"description": "Starts up the useobject's animations.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"startyaw": {
		"syntax": "startyaw( Float startyaw )",
		"description": "Sets the yaw to be used as the center of our allowed turn arc.",
		"example": "",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"state": {
		"syntax": "state( String stateName )",
		"description": "Player: Dumps the player's state to the console.\nUseAnim: Set the state to use for the player.\nUseAnimDestination: Set the state to use for the player.\nUseObject: Sets the state to use for this UseObject.",
		"example": "",
		"class": ["Player", "UseAnim", "UseAnimDestination", "UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"state_backwards": {
		"syntax": "state_backwards( String newState )",
		"description": "Sets the backward state to use for this UseObject.",
		"example": "",
		"class": ["UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stationary": {
		"syntax": "stationary",
		"description": "Entity does not move, causes no physics to be run on it.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stats": {
		"syntax": "stats",
		"description": "Display the MissionLog.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"steerinplace": {
		"syntax": "steerinplace",
		"description": "Set the vehicle to turn in place.",
		"example": "",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stickybombwet": {
		"syntax": "stickybombwet",
		"description": "",
		"example": "",
		"class": ["ThrobbingBox_Stickybomb"],
		"gamever": ["SH", "BT"]
	},
	"stop": {
		"syntax": "stop",
		"description": "Camera: Stop the camera movement.\nCameraManager: Stop the camera playing path.\nScriptSlave: Stop the script slave.\nVehicle: Make the Vehicle Stop Moving... FULL BREAKS!",
		"example": "",
		"class": ["Camera", "CameraManager", "ScriptSlave", "Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stopatend": {
		"syntax": "stopatend",
		"description": "Makes the vehicle slow down to a complete stop at the end of the path.",
		"example": "local.vehicle stopatend",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stopbackwardsvelocity": {
		"syntax": "StopBackwardsVelocity( [ Integer NULL ] )",
		"description": "Stops any backwards motion for vehicles on rails.",
		"example": "",
		"class": ["Vehicle"],
		"gamever": ["BT"]
	},
	"stopfire": {
		"syntax": "stopfire( [ String hand ] )",
		"description": "Stops the firing of the weapon in the specified hand.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stopfiring": {
		"syntax": "stopFiring",
		"description": "Makes the turret stop shooting.",
		"example": "local.turret stopFiring",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stopforwardsvelocity": {
		"syntax": "StopForwardsVelocity( [ Integer NULL ] )",
		"description": "Stops any forward motion for vehicles on rails.",
		"example": "",
		"class": ["Vehicle"],
		"gamever": ["BT"]
	},
	"stoploopsound": {
		"syntax": "stoploopsound",
		"description": "Stop the looped-sound on this entity.",
		"example": "local.entity stoploopsound",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stoponfire": {
		"syntax": "stoponfire",
		"description": "Stops the sentient from being on fire.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stopped": {
		"syntax": "stopped",
		"description": "Sent when entity has stopped bouncing for MOVETYPE_TOSS.",
		"example": "",
		"class": ["Actor", "Gib", "HelmetObject", "Item", "Projectile", "TossObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stoprotating": {
		"syntax": "stoprotating",
		"description": "Stop rotating the wall.",
		"example": "",
		"class": ["ExplodingWall"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stopsound": {
		"syntax": "stopsound( [ Integer channel ] )",
		"description": "Stop the current sound on the specified channel.\nDefault channel, CHAN_BODY.",
		"example": "local.entity stopsound",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stopteamrespawn": {
		"syntax": "stopteamrespawn( String team )",
		"description": "Stops a team (anerican, german, both) from spawning in non-wave deathmatches.",
		"example": "stopteamrespawn \"both\"",
		"class": ["ScriptThread"],
		"gamever": ["BT"]
	},
	"stopwatch": {
		"syntax": "stopwatch( Integer duration )",
		"description": "Starts a stopwatch for a given duration.\nUse 0 to clear the stopwatch.",
		"example": "local.player stopwatch 10",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stopwatchduration": {
		"syntax": "StopWatchDuration( Float StopWatchDuration )",
		"description": "",
		"example": "",
		"class": ["ThrobbingBox_Explosive"],
		"gamever": ["SH", "BT"]
	},
	"stopwatchingactor": {
		"syntax": "stopwatchingactor( Entity actor_to_stop_watching )",
		"description": "Makes the player's camera stop watching the specified actor.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"string": {
		"syntax": "string( Integer value )",
		"description": "Casts value to a string.",
		"example": "local.string = string 33",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stuffcmd": {
		"syntax": "stuffcmd( [ String arg1 ], [ String arg2 ], [ String arg3 ],\n[ String arg4 ], [ String arg5 ], [ String arg6 ] )",
		"description": "Server only command.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stufftext": {
		"syntax": "stufftext( String stuffstrings )",
		"description": "Stuffs text to the player's console.",
		"example": "local.player stufftext \"set r_fastsky 1\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stunend": {
		"syntax": "stunend",
		"description": "Is the end of the sentient's stun.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"stunstart": {
		"syntax": "stunstart",
		"description": "Is the start of the sentient's stun.",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"suppresschance": {
		"syntax": "suppresschance( Integer chance )",
		"description": "Sets the percent chance of doing suppressing fire when appropriate (0-100)",
		"example": "local.actor suppresschance 80\n// Or\nlocal.actor.suppresschance = 80\nlocal.result = local.actor.suppresschance",
		"class": ["Actor"],
		"gamever": ["SH", "BT"]
	},
	"suppressheight": {
		"syntax": "suppressHeight( Float radius )",
		"description": "Sets the vertical radius of suppression fire.",
		"example": "",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"suppresstime": {
		"syntax": "suppressTime( Float time )",
		"description": "Sets the suppression time.",
		"example": "",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"suppresswaittime": {
		"syntax": "suppressWaitTime( Float time )",
		"description": "Sets the suppression wait nonfiring time before turret returns to default position.",
		"example": "",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"suppresswidth": {
		"syntax": "suppressWidth( Float radius )",
		"description": "Sets the horizontal radius of suppression fire.",
		"example": "",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"surface": {
		"syntax": "surface( String surfaceName, [ String parameter1 ], [ String parameter2 ], [ String parameter3 ],\n[ String parameter4 ], [ String parameter5 ], [ String parameter6 ] )",
		"description": "Change a legs surface parameter for the given surface.\n+ sets the flag, - clears the flag\nValid surface commands are:\nskin1 - set the skin1 offset bit\nskin2 - set the skin2 offset bit\nnodraw - don't draw this surface",
		"example": "local.entity surface \"all\" \"+nodraw\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"svflags": {
		"syntax": "svflags( [ String parameter1 ], [ String parameter2 ], [ String parameter3 ],\n[ String parameter4 ], [ String parameter5 ], [ String parameter6 ] )",
		"description": "Change the current server flags.\nValid flags are as follows:\n+ sets a flag, - clears a flag\nbroadcast - always send this entity to the client",
		"example": "local.entity svflags \"+broadcast\"",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"switchfacet": {
		"syntax": "switchfacet",
		"description": "Switch the current facet that we are editing.",
		"example": "",
		"class": ["SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"take": {
		"syntax": "take( String item_name )",
		"description": "Takes away the specified item from the sentient.",
		"example": "local.player take \"models/weapons/bazooka.tik\"",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"takeall": {
		"syntax": "takeall",
		"description": "Clears out the sentient's entire inventory.",
		"example": "local.player takeall",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"takedamage": {
		"syntax": "takedamage",
		"description": "Makes the entity take damage.",
		"example": "local.entity takedamage",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"takeover": {
		"syntax": "TakeOver( Integer TeamNum )",
		"description": "Sets the team controlling the objective.\n0 = Axis\n1 = Allies",
		"example": "",
		"class": ["TOWObjective"],
		"gamever": ["SH", "BT"]
	},
	"takepain": {
		"syntax": "takepain( Boolean bool )",
		"description": "Set whether or not to take pain.",
		"example": "local.player takepain 0",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"tan": {
		"syntax": "tan( Float x )",
		"description": "<b>Reborn</b>: Returns the tangent of an angle of x radians.\n\n<b>Breakthrough</b>: Tangent of float (expects degrees not radians).",
		"example": "local.result = tan local.x",
		"class": ["ScriptThread"],
		"gamever": ["BT", "REBORN"]
	},
	"target": {
		"syntax": "target( String targetname_to_target )",
		"description": "Target another entity with targetname_to_target.\n\nFuncBeam: Set the target of the beam.\nThe beam will be drawn from the origin to the origin of the target entity.",
		"example": "local.entity target \"targetname\"\n// Or\nlocal.entity.target = \"targetname\"\nlocal.target = local.entity.target",
		"class": ["AISpawnPoint", "FuncBeam", "ProjectileGenerator", "SimpleEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"targetname": {
		"syntax": "targetname( String targetName )",
		"description": "Sets/Gets the entity's targetname.",
		"example": "local.entity targetname \"name\"\n// Or\nlocal.entity.targetname = \"name\"\nlocal.targetname = local.entity.targetname",
		"class": ["SimpleEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"targets_destroyed": {
		"syntax": "targets_destroyed( Integer num )",
		"description": "Sets/Gets the number of bomb targets that have been destroyed.",
		"example": "level targets_destroyed 1\n// Or\nlevel.targets_destroyed = 1\nlocal.result = level.targets_destroyed",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"targets_to_destroy": {
		"syntax": "targets_to_destroy( Integer num )",
		"description": "Sets/Gets the number of bomb targets that must be destroyed.",
		"example": "level targets_to_destroy 2\n// Or\nlevel.targets_to_destroy = 2\nlocal.result = level.targets_to_destroy",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"targettype": {
		"syntax": "targettype( String value )",
		"description": "Sets the target type to be none, any, or player.\nGets the target type.",
		"example": "",
		"class": ["TurretGun"],
		"gamever": ["SH", "BT"]
	},
	"team": {
		"syntax": "team( String moveTeam )",
		"description": "Entity: Used to make multiple entities move together.\nSentient: Returns 'german' or 'american'",
		"example": "local.result = local.actor.team",
		"class": ["Entity", "Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"teamwin": {
		"syntax": "teamwin( String axis_or_allies )",
		"description": "Sets that the \"axis\" or the \"allies\" have won the map.",
		"example": "teamwin \"axis\"",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"tele": {
		"syntax": "tele( Vector location )",
		"description": "Teleport to location.",
		"example": "local.player tele ( 100 500 70 )",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"testmojo": {
		"syntax": "testmojo( String model_name, Vector vector_offset )",
		"description": "INTERNAL EVENT.",
		"example": "",
		"class": ["Animate"],
		"gamever": ["SH", "BT"]
	},
	"testplayeranim": {
		"syntax": "testplayeranim( Float weight, [ String anim ] )",
		"description": "Plays a test animation on the player.",
		"example": "",
		"class": ["Player"],
		"gamever": ["SH", "BT"]
	},
	"testthread": {
		"syntax": "testthread( String scriptfile, [ String label ] )",
		"description": "Starts the named thread at label if provided.\nConsole command.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"tether": {
		"syntax": "tether( Entity entity )",
		"description": "The entity to which the AI's leash should be tethered.",
		"example": "local.actor tether local.entity",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"text": {
		"syntax": "text( String Text )",
		"description": "Set current text.",
		"example": "",
		"class": ["Objective"],
		"gamever": ["SH", "BT"]
	},
	"thinkstate": {
		"syntax": "thinkstate",
		"description": "Gets current AI think state.\nCan be: void, idle, pain, killed, attack, curious, disguise, or grenade.",
		"example": "local.result = local.actor.thinkstate",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"thread": {
		"syntax": "thread",
		"description": "Creates a thread starting at label.",
		"example": "// ScriptThread\nthread label\n// Or\nlocal.result = thread label\n\n// Listener\nlocal.listener thread label",
		"class": ["Listener", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"threadmove": {
		"syntax": "threadmove( String label )",
		"description": "Move the script slave and create thread which waits until finished.",
		"example": "",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"threatbias": {
		"syntax": "threatbias( Integer bias )",
		"description": "Sets/Gets the threat bias for this player / AI.",
		"example": "local.actor threatbias 5000\n// Or\nlocal.actor.threatbias = 5000\nlocal.threatbias = local.actor.threatbias",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"throughmetal": {
		"syntax": "throughmetal( Float dist )",
		"description": "Sets how far the bullets can go through metal.",
		"example": "local.weapon throughmetal 32",
		"class": ["ProjectileGenerator_Gun", "ScriptSimpleStrafingGunfire", "Weapon"],
		"gamever": ["SH", "BT"]
	},
	"throughwood": {
		"syntax": "throughwood( Float dist )",
		"description": "Sets how far the bullets can go through wood.",
		"example": "local.weapon throughwood 32",
		"class": ["ProjectileGenerator_Gun", "ScriptSimpleStrafingGunfire", "Weapon"],
		"gamever": ["SH", "BT"]
	},
	"throw": {
		"syntax": "throw( … )",
		"description": "<b>Listener</b>, <b>ScriptThread</b>: <i>throw( String label )</i>\nThrows to the specified label.\n\n<b>ThrowObject</b>: <i>throw( Entity owner, Float speed, Entity targetent, [ Float grav ] )</i>\nThrow this throw object.",
		"example": "",
		"class": ["Listener", "ScriptThread", "ThrowObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"throwgib": {
		"syntax": "throwgib( Entity ent, Integer velocity, Float scale )",
		"description": "Throw a gib.",
		"example": "",
		"class": ["Gib"],
		"gamever": ["AA", "SH", "BT"]
	},
	"throwsound": {
		"syntax": "throwsound( String throw_sound )",
		"description": "Sets the sound to play when object is thrown.",
		"example": "",
		"class": ["ThrowObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"tickcycle": {
		"syntax": "TickCycle",
		"description": "Tick the cycle.",
		"example": "",
		"class": ["ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"ticksound": {
		"syntax": "TickSound( String TickSound )",
		"description": "",
		"example": "",
		"class": ["ThrobbingBox_Explosive"],
		"gamever": ["SH", "BT"]
	},
	"tileshader": {
		"syntax": "tileshader( String beam_shader )",
		"description": "Set the shader that the beam will use.\nThis shader will be tiled.",
		"example": "local.beam tileshader \"shader_name\"",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"time": {
		"syntax": "time( Float traveltime )",
		"description": "<b>Door:</b> Sets the time it takes for the door to open an close.\n<b>Level:</b> Gets the current level time.\n<b>ScriptSlave:</b> Sets the travel time.",
		"example": "// Door, ScriptSlave\nlocal.ent time 1\n\n// Level\nlocal.current_time = level.time",
		"class": ["Door", "Level", "ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"timedecay": {
		"syntax": "timedecay( Vector decayrate )",
		"description": "Sets jitter decay per second.",
		"example": "",
		"class": ["ViewJitter"],
		"gamever": ["AA", "SH", "BT"]
	},
	"timeout": {
		"syntax": "timeout( Float time )",
		"description": "Specifies script timeout time.",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"toggledelay": {
		"syntax": "toggledelay( [ String [random] ], [ Float time ] )",
		"description": "Causes a beam toggling effect. Sets the time between toggling.\nIf random is specified, The time will be between 0 and time.",
		"example": "",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"toggledoor": {
		"syntax": "toggledoor( Entity other )",
		"description": "Toggles the state of the door (open/close).",
		"example": "local.door toggledoor $world",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"toggleitem": {
		"syntax": "toggleitem",
		"description": "Toggles the use of the player's item (first item if he has multiple).",
		"example": "",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"toss": {
		"syntax": "toss",
		"description": "Entity has gravity applied to it.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["SH", "BT"]
	},
	"total_secrets": {
		"syntax": "total_secrets",
		"description": "Count of total secrets.",
		"example": "local.result = level.total_secrets",
		"class": ["Level"],
		"gamever": ["AA", "SH", "BT"]
	},
	"touchtriggers": {
		"syntax": "touchtriggers",
		"description": "This entity should touch triggers.",
		"example": "",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"trace": {
		"syntax": "trace( Vector start, Vector end, [ Integer pass_entities ], [ Vector mins ], [ Vector maxs ] )",
		"description": "Performs a Trace Line from the start to the end, returns the end or the position it hit at.",
		"example": "local.result = trace ( 550 -783 140 ) ( 1220 340 78 )\n// Or\nlocal.result = local.entity trace local.entity.origin ( 1220 340 78 ) 0 ( -16 -16 16 ) ( 16 16 128 )",
		"class": ["Entity", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"tracerfreq": {
		"syntax": "tracerfreq",
		"description": "Set the frequency of the tracers.",
		"example": "",
		"class": ["ScriptSimpleStrafingGunfire"],
		"gamever": ["SH", "BT"]
	},
	"tracerfrequency": {
		"syntax": "tracerfrequency( Integer frequency )",
		"description": "Set the frequency of making tracers.",
		"example": "local.weapon tracerfrequency 1",
		"class": ["ProjectileGenerator_Gun", "Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"tracerspeed": {
		"syntax": "tracerspeed( Float speed )",
		"description": "Scale factor of how fast a tracer should travel.\nValid ranges 0-2.",
		"example": "local.weapon tracerspeed 1",
		"class": ["ProjectileGenerator_Gun", "Weapon"],
		"gamever": ["SH", "BT"]
	},
	"trigger": {
		"syntax": "trigger( String name )",
		"description": "Trigger the specified target or entity.",
		"example": "",
		"class": ["Entity", "ScriptSlave", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"triggerable": {
		"syntax": "triggerable",
		"description": "Turn this trigger back on.",
		"example": "local.trigger triggerable",
		"class": ["Trigger", "TriggerCameraUse"],
		"gamever": ["AA", "SH", "BT"]
	},
	"triggered": {
		"syntax": "triggered( Integer 0 )",
		"description": "Set the triggered status.",
		"example": "",
		"class": ["ThrobbingBox_Explosive"],
		"gamever": ["SH", "BT"]
	},
	"triggereffect": {
		"syntax": "triggereffect( Entity triggering_entity )",
		"description": "Send event to owner of trigger.",
		"example": "",
		"class": ["Trigger"],
		"gamever": ["AA", "SH", "BT"]
	},
	"triggereffectalt": {
		"syntax": "triggereffectalt( Entity triggering_entity )",
		"description": "Send event to owner of trigger.\nThis event is only triggered when using a trigger as a multi-faceted edge trigger.",
		"example": "",
		"class": ["TriggerMusic", "TriggerReverb"],
		"gamever": ["AA", "SH", "BT"]
	},
	"triggername": {
		"syntax": "triggername( String targetname_of_object )",
		"description": "If set, trigger will only respond to objects with specified name.",
		"example": "",
		"class": ["TriggerByPushObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"triggertarget": {
		"syntax": "triggertarget( String targetname )",
		"description": "SplinePath: Sets the trigger target.\nUseAnim: Sets what should be triggered, when this UseAnim is triggered.\nUseObject: Sets what should be triggered, when this UseObject is triggered.",
		"example": "",
		"class": ["SplinePath", "UseAnim", "UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"triggerthread": {
		"syntax": "triggerthread",
		"description": "Start the trigger thread.",
		"example": "",
		"class": ["Trigger"],
		"gamever": ["AA", "SH", "BT"]
	},
	"trysolid": {
		"syntax": "trysolid",
		"description": "Tries to make the door solid.",
		"example": "local.door trysolid",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"trytoopen": {
		"syntax": "tryToOpen( Entity other )",
		"description": "Tries to open the door.",
		"example": "local.door tryToOpen $world",
		"class": ["Door"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turn": {
		"syntax": "turn( Float yawangle )",
		"description": "Causes player to turn the specified amount.",
		"example": "local.player turn 180",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turndoneerror": {
		"syntax": "turndoneerror",
		"description": "Sets/Gets the error amount that turndone will occur for the turnto command.",
		"example": "local.actor turndoneerror 70\n// Or\nlocal.actor.turndoneerror = 70\nlocal.turndoneerror = local.actor.turndoneerror",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turnlegs": {
		"syntax": "turnlegs( Float yawangle )",
		"description": "Turns the players legs instantly by the specified amount.",
		"example": "local.player turnlegs 180",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turnoff": {
		"syntax": "TurnOff",
		"description": "Turn Off and cancel the current cycle (if any).",
		"example": "",
		"class": ["Objective", "ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"turnon": {
		"syntax": "TurnOn",
		"description": "Turn On and begin the first cycle.",
		"example": "",
		"class": ["Objective", "ProjectileGenerator"],
		"gamever": ["SH", "BT"]
	},
	"turnrate": {
		"syntax": "turnrate( Float rate )",
		"description": "Set the turning rate of the vehicle.",
		"example": "local.vehicle turnrate 40",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turnspeed": {
		"syntax": "turnspeed( Float speed )",
		"description": "Actor: The turn speed of the actor.\nTurretGun, VehicleTurretGun: Sets the turret's turn speed.",
		"example": "// Actor\nlocal.actor turnspeed 50\n// Or\nlocal.actor.turnspeed = 50\nlocal.turnspeed = local.actor.turnspeed\n\n// TurretGun, VehicleTurretGun\nlocal.turret turnspeed 100",
		"class": ["Actor", "TurretGun", "VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turnto": {
		"syntax": "turnto( … )",
		"description": "<b>Actor</b>: turnto<i>( Entity entity )</i>\nThe actor will turn to this entity.\n\n<b>Camera</b>: turnto<i>( Vector angle )</i>\nMakes the camera look in the specified direction.",
		"example": "local.actor turnto $player",
		"class": ["Actor", "Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turnupdate": {
		"syntax": "turnupdate( Float yaw, Float timeleft )",
		"description": "Causes player to turn the specified amount.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turret": {
		"syntax": "turret( String turret )",
		"description": "Actor:\nSets/Gets the turret of the actor.\n\nPlayer: (Breakthrough only)\nReturns the turret the player is using. NULL if player isn't using a turret.",
		"example": "local.actor turret $turret\n// Or\nlocal.actor.turret = $turret\nlocal.turret = local.actor.turret",
		"class": ["Actor", "AISpawnPoint", "Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turretenter": {
		"syntax": "turretenter( Entity turret, [ String driver_anim ] )",
		"description": "Called when someone gets into a turret.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turretexit": {
		"syntax": "turretexit( Entity turret )",
		"description": "Called when driver gets out of the turret.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"turrettik": {
		"syntax": "turrettik( String tikifile )",
		"description": "TIKI of the turret to place.",
		"example": "local.carryable_turret turrettik \"models/weapons/mg42portable_placed.tik\"",
		"class": ["CarryableTurret"],
		"gamever": ["SH", "BT"]
	},
	"tweakladderpos": {
		"syntax": "tweakladderpos",
		"description": "Tweaks the player's position on a ladder to be proper.",
		"example": "local.player tweakladderpos",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"type_attack": {
		"syntax": "type_attack( String value )",
		"description": "Sets/Gets the attack type of the actor.",
		"example": "local.actor type_attack \"cover\"\n// Or\nlocal.actor.type_attack = \"cover\"\nlocal.type_attack = local.actor.type_attack",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"type_disguise": {
		"syntax": "type_disguise( String value )",
		"description": "Sets/Gets the disguise type of the actor.",
		"example": "local.actor type_disguise \"salute\"\n// Or\nlocal.actor.type_disguise = \"salute\"\nlocal.type_disguise = local.actor.type_disguise",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"type_grenade": {
		"syntax": "type_grenade( String value )",
		"description": "Sets/Gets the grenade type of the actor.",
		"example": "local.actor type_grenade \"grenade\"\n// Or\nlocal.actor.type_grenade = \"grenade\"\nlocal.type_grenade = local.actor.type_grenade",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"type_idle": {
		"syntax": "type_idle( String value )",
		"description": "Sets/Gets the idle type of the actor.",
		"example": "local.actor type_idle \"idle\"\n// Or\nlocal.actor.type_idle = \"idle\"\nlocal.type_idle = local.actor.type_idle",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"unattachfromladder": {
		"syntax": "unattachfromladder",
		"description": "Unattaches the player from a ladder.",
		"example": "local.player unattachfromladder",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"unbind": {
		"syntax": "unbind",
		"description": "Unbind this entity from its parent.",
		"example": "local.entity unbind",
		"class": ["Entity", "ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"undrivable": {
		"syntax": "undrivable",
		"description": "Make the vehicle undrivable.",
		"example": "local.vehicle undrivable",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"unglue": {
		"syntax": "unglue",
		"description": "Unglue this entity from its parent.",
		"example": "local.entity unglue",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"unholster": {
		"syntax": "unholster",
		"description": "Unholster weapon.",
		"example": "local.actor unholster",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"unlock": {
		"syntax": "unlock",
		"description": "<b>Door:</b> Unlock the door.\n<b>Vehicle:</b> Sets the vehicle to be unlocked.\n<b>VehicleTurretGun:</b> The Turret Can be used.",
		"example": "local.door unlock",
		"class": ["Door", "Vehicle", "VehicleTurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"unlockmovement": {
		"syntax": "unlockmovement",
		"description": "The Vehicle can move again.",
		"example": "local.vehicle unlockmovement",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"unregister": {
		"syntax": "unregister( String label )",
		"description": "Unregisters the label from the event of the same name.",
		"example": "",
		"class": ["Listener"],
		"gamever": ["AA", "SH", "BT"]
	},
	"updatebeam": {
		"syntax": "updatebeam",
		"description": "Update the attached beam.",
		"example": "",
		"class": ["Projectile"],
		"gamever": ["AA", "SH", "BT"]
	},
	"updateendpoint": {
		"syntax": "updateendpoint",
		"description": "Update the endpoint of a beam.",
		"example": "local.beam updateendpoint",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"updateinput": {
		"syntax": "updateinput",
		"description": "CameraManager: Updates the current node with user interface values.\nSoundManager: Updates the current sound with user interface values.",
		"example": "",
		"class": ["CameraManager", "SoundManager"],
		"gamever": ["AA", "SH", "BT"]
	},
	"updateorigin": {
		"syntax": "updateorigin",
		"description": "Update the origin of a beam.",
		"example": "local.beam updateorigin",
		"class": ["FuncBeam"],
		"gamever": ["AA", "SH", "BT"]
	},
	"updatepoweruptime": {
		"syntax": "updatepoweruptime",
		"description": "Called once a second to decrement powerup time.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"upperanim": {
		"syntax": "upperanim( String anim )",
		"description": "Set the upper body animation.",
		"example": "local.actor upperanim \"pickup_obj\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"upperfail": {
		"syntax": "upperfail",
		"description": "upperfail...",
		"example": "parm.upperfail",
		"class": ["Parm"],
		"gamever": ["AA", "SH", "BT"]
	},
	"upvector": {
		"syntax": "upvector",
		"description": "Gets the up vector of angles.",
		"example": "local.upvector = local.entity.upvector",
		"class": ["SimpleEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"use": {
		"syntax": "use( String name, [ Integer weapon_hand ] )",
		"description": "Use the specified weapon or item in the hand choosen (optional).",
		"example": "local.player use \"models/weapons/springfield.tik\"",
		"class": ["Actor", "Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"usebbox": {
		"syntax": "usebbox",
		"description": "Do not perform perfect collision, use bounding box instead.",
		"example": "local.entity usebbox",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"usedmodel": {
		"syntax": "UsedModel( String UsedModel )",
		"description": "",
		"example": "",
		"class": ["ThrobbingBox_Explosive"],
		"gamever": ["SH", "BT"]
	},
	"useheld": {
		"syntax": "useheld",
		"description": "Returns 1 if this player is holding use, or 0 if he is not.",
		"example": "if (local.player.useheld) {\n\t// local.player is holding use\n}",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"uselast": {
		"syntax": "uselast",
		"description": "Activates the last active weapon.",
		"example": "local.player uselast",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"usematerial": {
		"syntax": "usematerial( String nameOfUseMaterial )",
		"description": "The name of the material that glows when active.",
		"example": "",
		"class": ["UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"usenoammo": {
		"syntax": "usenoammo( Boolean bool )",
		"description": "Set the weapon to be able to be used when it's out of ammo.",
		"example": "local.weapon usenoammo 1",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"userdistance": {
		"syntax": "userdistance( Float distance )",
		"description": "Sets the distance the user should be placed at while using this turret.",
		"example": "local.turret userdistance 35",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"usestuff": {
		"syntax": "usestuff",
		"description": "Makes the player try to use whatever is in front of him.",
		"example": "local.player usestuff",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"useweaponclass": {
		"syntax": "useweaponclass( String weaponclass, [ Integer weapon_hand ] )",
		"description": "Use the weapon of the specified class in the hand choosen (optional).\n\nClasses: pistol, rifle, smg, mg, grenade, agrenade, heavy, shotgun\nand landmine (Breakthrough)",
		"example": "local.player useweaponclass \"rifle\"",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vector_add": {
		"syntax": "vector_add( Vector vector1, Vector vector2 )",
		"description": "Returns vector1 + vector2.",
		"example": "local.result = vector_add ( 100 100 100 ) ( 200 200 200 ) // = ( 300 300 300 )",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vector_closer": {
		"syntax": "vector_closer( Vector vector1, Vector vector2, Vector vector3 )",
		"description": "returns 1 if the first vector is closer than the second vector to the third vector.",
		"example": "local.result = vector_closer ( 100 100 100 ) ( 500 500 500 ) ( 0 0 0 ) // = 1\nlocal.result = vector_closer ( 500 500 500 ) ( 100 100 100 ) ( 0 0 0 ) // = 0",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vector_cross": {
		"syntax": "vector_cross( Vector vector1, Vector vector2 )",
		"description": "Returns vector1 x vector2 (<a href='https://en.wikipedia.org/wiki/Cross_product' title='Cross product - Wikipedia'>Cross product</a>).",
		"example": "local.result = vector_cross ( 1 -7 4 ) ( -9 -3 5 ) // = ( -23 -41 -66 )",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vector_dot": {
		"syntax": "vector_dot( Vector vector1, Vector vector2 )",
		"description": "Returns vector1 * vector2 (<a href='https://en.wikipedia.org/wiki/Dot_product' title='Dot product - Wikipedia'>Dot product</a>).",
		"example": "local.result = vector_dot ( 10 10 10 ) ( 20 20 20 ) // = 600",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vector_length": {
		"syntax": "vector_length( Vector vector )",
		"description": "Returns the length of the specified vector.",
		"example": "local.result = vector_length ( 100 200 300 ) // = 374.166",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vector_normalize": {
		"syntax": "vector_normalize( Vector vector )",
		"description": "Returns the normalized vector of the specified vector.\nNormalizing a vector is to make its length 1 while maintaining its direction.",
		"example": "local.result = vector_normalize ( 100 200 300 ) // = ( 0.267261 0.534522 0.801784 )",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vector_scale": {
		"syntax": "vector_scale( Vector vector1, Float scale_factor )",
		"description": "Returns vector1 * scale_factor.",
		"example": "local.result = vector_scale ( 100 200 300 ) 0.5 // = ( 50 100 150 )",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vector_subtract": {
		"syntax": "vector_subtract( Vector vector1, Vector vector2 )",
		"description": "Returns vector1 - vector2",
		"example": "local.result = vector_subtract ( 100 200 300 )  ( 70 180 10 ) // = ( 30 20 290 )",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vector_toangles": {
		"syntax": "vector_toangles( Vector vector1 )",
		"description": "Returns vector1 converted to angles.",
		"example": "local.result = vector_toangles ( 100 200 300 ) // = ( -53.300774 63.434948 0 )",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vector_within": {
		"syntax": "vector_within( Vector position1, Vector position2, Float distance )",
		"description": "Returns 1 if the two points are &lt;= distance apart,\nor 0 if they are greater than distance apart.",
		"example": "local.result = vector_within ( 0 0 0 ) ( 100 200 300 ) 1000 // = 1\nlocal.result = vector_within ( 0 0 0 ) ( 100 200 300 ) 100 // = 0",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehicle": {
		"syntax": "vehicle",
		"description": "Returns the vehicle the player is using (Breakthrough only).\nNULL if player isn't using a vehicle.",
		"example": "local.result = local.player.vehicle",
		"class": ["Player"],
		"gamever": ["BT"]
	},
	"vehicleanim": {
		"syntax": "vehicleanim( String anim_name, [ Float weight ] )",
		"description": "Sets an animation to use in the LD Animation slot.\nWeight defaults to 1.0.",
		"example": "local.vehicle vehicleanim \"idlenolights\"",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehiclebouncy": {
		"syntax": "vehiclebouncy( Float bouncycoef )",
		"description": "Sets the Bouncy Coefficient for the shocks.",
		"example": "local.vehicle vehiclebouncy 0.2",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehicledestroyed": {
		"syntax": "vehicledestroyed",
		"description": "Driver is dead",
		"example": "",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehicledrag": {
		"syntax": "vehicledrag( Float size )",
		"description": "Sets the Drag Factor.",
		"example": "local.vehicle vehicledrag 0.00001",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehicleinit": {
		"syntax": "vehicleinit",
		"description": "Initialized the Vehicle as the specified file.",
		"example": "local.vehicle vehicleinit \"jeep.tik\"",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehiclemass": {
		"syntax": "vehiclemass( Float weight )",
		"description": "Sets the mass of the vehicle (backmass = frontmass = mass/2).",
		"example": "local.vehicle vehiclemass 1500",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehicleradius": {
		"syntax": "vehicleradius( Float size )",
		"description": "Sets the radius of the wheels.",
		"example": "local.vehicle vehicleradius 0.33",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehicleroll": {
		"syntax": "vehicleRoll( Float min, Float max, Float coef )",
		"description": "Sets the Roll min and max and the acceleration coefficient for the shocks.",
		"example": "local.vehicle vehicleRoll -10 10",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehiclerollingresistance": {
		"syntax": "vehiclerollingresistance( Float size )",
		"description": "Sets the radius of the wheels.",
		"example": "local.vehicle vehiclerollingresistance 0.5",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehiclesoudnentity_updatetraces": {
		"syntax": "vehiclesoudnentity_updatetraces",
		"description": "Updates the traces of a Vehicle Sound Entity.",
		"example": "",
		"class": ["VehicleSoundEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehiclesoundentity_postspawn": {
		"syntax": "vehiclesoundentity_postspawn",
		"description": "PostSpawn of a Vehicle Sound Entity.",
		"example": "",
		"class": ["VehicleSoundEntity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehiclespeed": {
		"syntax": "vehiclespeed( Float speed )",
		"description": "Set the speed of the vehicle.",
		"example": "local.vehicle vehiclespeed 1000",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehiclespringy": {
		"syntax": "vehiclespringy( Float springycoef )",
		"description": "Sets the Springy Coefficient for the shocks.",
		"example": "local.vehicle vehiclespringy 0.8",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehicletread": {
		"syntax": "vehicletread( Float size )",
		"description": "Sets the size of the wheels.",
		"example": "local.vehicle vehicletread 10",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehiclewheelcorners": {
		"syntax": "vehicleWheelCorners( Vector size, Vector offset )",
		"description": "Sets the wheel trace corners.",
		"example": "local.vehicle vehicleWheelCorners \"136 80 78\" \"-12 0 -1.5\"",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehicleyaw": {
		"syntax": "vehicleYaw( Float min, Float max, Float coef )",
		"description": "Sets the Yaw min and max and the acceleration coefficient for the shocks.",
		"example": "local.vehicle vehicleYaw -10 10",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vehiclez": {
		"syntax": "vehicleZ( Float min, Float max, Float coef )",
		"description": "Sets the Z min and max and the acceleration coefficient for the shocks.",
		"example": "local.vehicle vehicleZ -5 10",
		"class": ["Vehicle"],
		"gamever": ["AA", "SH", "BT"]
	},
	"velocity": {
		"syntax": "velocity( Vector velocity )",
		"description": "Sets/Gets the velocity for this entity.",
		"example": "local.entity.velocity = ( 0 0 0 ) // No velocity\nlocal.velocity = local.entity.velocity",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewangles": {
		"syntax": "viewangles( Vector newAngles )",
		"description": "<b>Player</b>, <b>TurretGun</b>: Sets/Gets the view angles of the entity.\n<b>ViewMaster</b>, <b>Viewthing</b>:  Set the angles of the current viewthing.",
		"example": "local.player.viewangles = ( -12 -90 0 )\nlocal.viewangles = local.player.viewangles",
		"class": ["Player", "TurretGun", "ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewanimate": {
		"syntax": "viewanimate",
		"description": "Cycle through the animations modes of the current viewthing.\nNo Animation\nAnimation with no motion\nAnimation with looping motion\nAnimation with motion",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewattach": {
		"syntax": "viewattach( String tagname, String model )",
		"description": "Attach a model to the specified tagname.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewdelete": {
		"syntax": "viewdelete",
		"description": "Delete the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewdeleteall": {
		"syntax": "viewdeleteall",
		"description": "Delete all viewthings.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewdetach": {
		"syntax": "viewdetach",
		"description": "Detach the current viewthing from its parent.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewdetachall": {
		"syntax": "viewdetachall",
		"description": "Detach all the models attached to the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewjitter": {
		"syntax": "viewjitter( Float amount )",
		"description": "Sets the amount that the owner's view should be jittered when fired.",
		"example": "local.turret viewjitter 0.75",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewkick": {
		"syntax": "viewkick( Float pitchmin, Float pitchmax, [ Float yawmin ], [ Float yawmax ] )",
		"description": "Adds kick to the view of the owner when fired.",
		"example": "local.weapon viewkick -2 -3 -1 1",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewlastframe": {
		"syntax": "viewlastframe",
		"description": "Called when the view things last animation frame is displayed.",
		"example": "",
		"class": ["Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewmodel": {
		"syntax": "viewmodel( String viewthingModel )",
		"description": "Set the model of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewmodelanim": {
		"syntax": "viewmodelanim( String anim, [ Integer force_restart ] )",
		"description": "Sets the player's view model animation.",
		"example": "local.player viewmodelanim \"idle\"",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewnext": {
		"syntax": "viewnext",
		"description": "Advance to the next frame of animation of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewnextanim": {
		"syntax": "viewnextanim",
		"description": "Advance to the next animation of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewoffset": {
		"syntax": "viewOffset( Vector offset )",
		"description": "Sets the view offset to use for the turret.",
		"example": "local.turret viewOffset ( -42 0 10 )",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vieworigin": {
		"syntax": "vieworigin( Float x, Float y, Float z )",
		"description": "Set the origin of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewpitch": {
		"syntax": "viewpitch( Float pitch )",
		"description": "Set the pitch of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewprev": {
		"syntax": "viewprev",
		"description": "Advance to the previous frame of animation of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewprevanim": {
		"syntax": "viewprevanim",
		"description": "Advance to the previous animation of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewroll": {
		"syntax": "viewroll( Float roll )",
		"description": "Set the roll of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewsavesurfaces": {
		"syntax": "viewsavesurfaces",
		"description": "Called after the model is spawned to save off the models original surfaces.",
		"example": "",
		"class": ["Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewscale": {
		"syntax": "viewscale( Float scale )",
		"description": "Set the scale of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewscaledown": {
		"syntax": "viewscaledown",
		"description": "Decrease the scale of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewscaleup": {
		"syntax": "viewscaleup",
		"description": "Increase the scale of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewscrub": {
		"syntax": "viewscrub( Float animScrub )",
		"description": "Set the animation time based off a floating point value.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewsetanim": {
		"syntax": "viewsetanim( Float animNum )",
		"description": "Set the animation absolutely based off a floating point value.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewsetanim2": {
		"syntax": "viewsetanim2( Float animNum2 )",
		"description": "Set the animation absolutely based off a floating point value.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewsetanimslot": {
		"syntax": "viewsetanimslot( Integer animSlot )",
		"description": "Set current animation slot that sliders apply to.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewspawn": {
		"syntax": "viewspawn( String model )",
		"description": "Create a viewthing with the specified model.",
		"example": "",
		"class": ["ViewMaster"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewthing_think": {
		"syntax": "viewthing_think",
		"description": "Called every frame to process the view thing.",
		"example": "",
		"class": ["Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewthingnext": {
		"syntax": "viewthingnext",
		"description": "Change the active viewthing to the next viewthing.",
		"example": "",
		"class": ["ViewMaster"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewthingprev": {
		"syntax": "viewthingprev",
		"description": "Change the active viewthing to the previous viewthing.",
		"example": "",
		"class": ["ViewMaster"],
		"gamever": ["AA", "SH", "BT"]
	},
	"viewyaw": {
		"syntax": "viewyaw( Float yaw )",
		"description": "Set the yaw of the current viewthing.",
		"example": "",
		"class": ["ViewMaster", "Viewthing"],
		"gamever": ["AA", "SH", "BT"]
	},
	"voicetype": {
		"syntax": "voicetype( String voice_name )",
		"description": "Sets/Gets the voicetype.",
		"example": "// Actor\nlocal.actor voicetype \"a\"\n// Or\nlocal.actor.voicetype = \"a\"\nlocal.voicetype = local.actor.voicetype\n\n// Player\nlocal.player voicetype \"manon\"",
		"class": ["Actor", "AISpawnPoint", "Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"volume": {
		"syntax": "volume( Float volume )",
		"description": "Sets the volume.",
		"example": "",
		"class": ["TriggerPlaySound"],
		"gamever": ["AA", "SH", "BT"]
	},
	"volumedamage": {
		"syntax": "volumedamage( Float damage )",
		"description": "Does damage to any entity within this volume.",
		"example": "local.entity volumedamage 1000",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"vote": {
		"syntax": "vote( String arg1 )",
		"description": "Player votes either yes or no.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"wait": {
		"syntax": "wait( Float wait )",
		"description": "<b>Door</b>: Sets the amount of time to wait before automatically shutting.\n<b>FallingRock</b>: How long to wait before rock starts falling.\n<b>MultiExploder</b>: Sets the wait time of the explosion.\n<b>ScriptThread</b>: Wait for the specified amount of time.",
		"example": "local.door wait 1",
		"class": ["Door", "FallingRock", "MultiExploder", "ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"waitexec": {
		"syntax": "waitexec( String script )",
		"description": "Executes the specified script and waits until the called thread group is finished.",
		"example": "waitexec path/to/script.scr::label\nlocal.result = waitexec path/to/script.scr",
		"class": ["Listener"],
		"gamever": ["AA", "SH", "BT"]
	},
	"waitforstate": {
		"syntax": "waitForState( String stateToWaitFor )",
		"description": "When set, the player will clear waitforplayer when this state is hit in the legs or torso.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"waitframe": {
		"syntax": "waitframe",
		"description": "Wait for one server frame (1 second/sv_fps).",
		"example": "",
		"class": ["ScriptThread"],
		"gamever": ["AA", "SH", "BT"]
	},
	"waitmove": {
		"syntax": "waitmove",
		"description": "Move the script slave and wait until finished.",
		"example": "local.script_object waitmove",
		"class": ["ScriptSlave"],
		"gamever": ["AA", "SH", "BT"]
	},
	"waitthread": {
		"syntax": "waitthread( String label )",
		"description": "Creates a thread starting at label and waits until the called thread is finished.",
		"example": "waitthread label\n// Or\nlocal.listener waitthread global/script.scr::label\n// Or\nlocal.result = waitthread label",
		"class": ["Listener"],
		"gamever": ["AA", "SH", "BT"]
	},
	"waittill": {
		"syntax": "waitTill( String name )",
		"description": "Wait until event of type name.",
		"example": "level waittill spawn",
		"class": ["CameraManager", "Listener"],
		"gamever": ["AA", "SH", "BT"]
	},
	"waittrigger": {
		"syntax": "waittrigger( Boolean bool )",
		"description": "If true, patrol guys and running men wait until triggered to move.",
		"example": "local.actor waittrigger 1\n// Or\nlocal.actor.waittrigger = 1\nlocal.result = local.actor.waittrigger",
		"class": ["Actor", "AISpawnPoint"],
		"gamever": ["AA", "SH", "BT"]
	},
	"walkto": {
		"syntax": "walkto( String dest )",
		"description": "Specify the location to walk to.",
		"example": "local.actor walkto $node",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"warmupdelay": {
		"syntax": "warmupdelay( Float value )",
		"description": "Set the warmup delay before use after mounting the weapon.",
		"example": "",
		"class": ["VehicleTurretGun"],
		"gamever": ["SH", "BT"]
	},
	"watch": {
		"syntax": "watch( Entity watchEnt, [ Float fadeTime ] )",
		"description": "<b>Camera</b>: Makes the camera watch an entity.\nIf fadeTime is specified, camera will fade over that time\n<b>CameraManager</b>: Set the current path node to watch something.\n<b>SplinePath</b>: Sets the entity to watch at this node.",
		"example": "local.camera watch local.entity",
		"class": ["Camera", "CameraManager", "SplinePath"],
		"gamever": ["AA", "SH", "BT"]
	},
	"watchactor": {
		"syntax": "watchactor( Entity actor_to_watch )",
		"description": "Makes the player's camera watch the specified actor.",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"watchnode": {
		"syntax": "watchnode( [ Float fadeTime ] )",
		"description": "Makes the camera watch based on what is stored in the camera nodes.\nIf fadeTime is specified, camera will fade over that time.",
		"example": "",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"watchpath": {
		"syntax": "watchpath( [ Float fadeTime ] )",
		"description": "Makes the camera look along the path of travel.\nIf fadeTime is specified, camera will fade over that time.",
		"example": "",
		"class": ["Camera"],
		"gamever": ["AA", "SH", "BT"]
	},
	"watchstring": {
		"syntax": "watchstring( String string, [ Float fadeTime ] )",
		"description": "Makes the camera watch based on a string.\nIf fadeTime is specified, camera will fade over that time.",
		"example": "",
		"class": ["Camera"],
		"gamever": ["SH", "BT"]
	},
	"wateralpha": {
		"syntax": "wateralpha( Float waterAlpha )",
		"description": "Set the alpha of the water screen blend.",
		"example": "",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"watercolor": {
		"syntax": "watercolor( Vector waterColor )",
		"description": "Set the watercolor screen blend.",
		"example": "",
		"class": ["World"],
		"gamever": ["AA", "SH", "BT"]
	},
	"weapdrop": {
		"syntax": "weapdrop",
		"description": "Drops the player's current weapon.",
		"example": "local.player weapdrop",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"weapnext": {
		"syntax": "weapnext",
		"description": "Cycle to player's next weapon.",
		"example": "local.player weapnext",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"weapon": {
		"syntax": "weapon( String weapon_name )",
		"description": "Gives the sentient the weapon specified.\nGets the weapon.\nList of names in global/weapon.scr",
		"example": "local.actor weapon \"panzerschrek\"\n// Or\nlocal.actor.weapon = \"panzerschrek\"\nlocal.weapon = local.actor.weapon",
		"class": ["Actor", "AISpawnPoint", "Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"weapon_internal": {
		"syntax": "weapon_internal( String weapon_modelname )",
		"description": "Gives the actor the weapon specified.",
		"example": "local.actor weapon_internal \"models/weapons/kar98.tik\"",
		"class": ["Actor"],
		"gamever": ["AA", "SH", "BT"]
	},
	"weaponcommand": {
		"syntax": "weaponcommand( String hand, [ String arg1 ], [ String arg2 ], [ String arg3 ],\n[ String arg4 ], [ String arg5 ], [ String arg6 ], [ String arg7 ] )",
		"description": "Pass the args to the active weapon in the specified hand.",
		"example": "local.actor weaponcommand mainhand attachtohand mainhand",
		"class": ["Sentient"],
		"gamever": ["AA", "SH", "BT"]
	},
	"weapongroup": {
		"syntax": "weapongroup( String weapon_group )",
		"description": "Actor: Specifies weapon animation set to use in anim scripts.\nWeapon: Sets the weapon group, a set of animations for actor animations scripts to use.",
		"example": "local.weapongroup = local.actor.weapongroup\n\nlocal.weapon weapongroup \"bar\"",
		"class": ["Actor", "Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"weaponsubtype": {
		"syntax": "weaponsubtype( Integer subtype )",
		"description": "Sets the weapon's sub-type. Used by smoke grenades.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"weapontype": {
		"syntax": "weapontype( String weapon_type )",
		"description": "Actor: Gets the weapon type of the actor.\nWeapon: Sets the weapon type.",
		"example": "local.weapontype = local.actor.weapontype\nlocal.weapon weapontype \"rifle\"",
		"class": ["Actor","Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"weapprev": {
		"syntax": "weapprev",
		"description": "Cycle to player's previous weapon.",
		"example": "local.player weapprev",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"whatis": {
		"syntax": "whatis( Integer entity_number )",
		"description": "Prints info on the specified entity (console command).",
		"example": "",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"worldhitspawn": {
		"syntax": "worldhitspawn( String modelname )",
		"description": "Set a model to be spawned when the weapon strikes the world.",
		"example": "",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"writestats": {
		"syntax": "writestats",
		"description": "Used internally to write stats to a CSV file.",
		"example": "",
		"class": ["Actor"],
		"gamever": ["BT"]
	},
	"wuss": {
		"syntax": "wuss",
		"description": "Gives player all weapons.",
		"example": "local.player wuss",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"yaw": {
		"syntax": "yaw",
		"description": "Gets the entity's yaw.",
		"example": "local.yaw = local.entity.yaw",
		"class": ["Entity"],
		"gamever": ["AA", "SH", "BT"]
	},
	"yaw_offset": {
		"syntax": "yaw_offset( Float newYawOffset )",
		"description": "Sets the yaw offset to use for this UseObject.",
		"example": "",
		"class": ["UseObject"],
		"gamever": ["AA", "SH", "BT"]
	},
	"yawcenter": {
		"syntax": "yawCenter( Float yaw )",
		"description": "Sets the yaw for the center of the turret's turning arc.",
		"example": "",
		"class": ["TurretGun"],
		"gamever": ["AA", "SH", "BT"]
	},
	"zoom": {
		"syntax": "zoom( Integer zoomfov, [ Integer autozoom ] )",
		"description": "Sets fov to zoom to on a secondary fire.",
		"example": "local.weapon zoom 20",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	},
	"zoommovement": {
		"syntax": "zoommovement( Float speedmult )",
		"description": "Sets the max speed the player can move while zoomed\n(fraction of weapon's running speed)",
		"example": "local.weapon zoommovement 0.5",
		"class": ["Weapon"],
		"gamever": ["SH", "BT"]
	},
	"zoomoff": {
		"syntax": "zoomoff",
		"description": "Makes sure that zoom is off.",
		"example": "local.player zoomoff",
		"class": ["Player"],
		"gamever": ["AA", "SH", "BT"]
	},
	"zoomspreadmult": {
		"syntax": "zoomspreadmult( Float scale )",
		"description": "Sets the spread multiplier for when using the zoom on a zooming weapon",
		"example": "local.weapon zoomspreadmult 0.055",
		"class": ["Weapon"],
		"gamever": ["AA", "SH", "BT"]
	}
}
